{
  "spec": {
    "title": "Web MIDI API",
    "url": "https://webaudio.github.io/web-midi-api/"
  },
  "idlparsed": {
    "jsNames": {
      "constructors": {
        "Window": [
          "MIDIMessageEvent",
          "MIDIConnectionEvent"
        ]
      },
      "functions": {
        "Window": [
          "MIDIInputMap",
          "MIDIOutputMap",
          "MIDIAccess",
          "MIDIPort",
          "MIDIInput",
          "MIDIOutput"
        ]
      }
    },
    "idlNames": {
      "MidiPermissionDescriptor": {
        "fragment": "dictionary MidiPermissionDescriptor : PermissionDescriptor {\n  boolean sysex = false;\n};",
        "type": "dictionary",
        "name": "MidiPermissionDescriptor",
        "inheritance": "PermissionDescriptor",
        "members": [
          {
            "type": "field",
            "name": "sysex",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": {
              "type": "boolean",
              "value": false
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "MIDIOptions": {
        "fragment": "dictionary MIDIOptions {\n  boolean sysex;\n  boolean software;\n};",
        "type": "dictionary",
        "name": "MIDIOptions",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "sysex",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "software",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "MIDIInputMap": {
        "fragment": "[SecureContext, Exposed=Window] interface MIDIInputMap {\n  readonly maplike <DOMString, MIDIInput>;\n};",
        "type": "interface",
        "name": "MIDIInputMap",
        "inheritance": null,
        "members": [
          {
            "type": "maplike",
            "idlType": [
              {
                "type": null,
                "extAttrs": [],
                "generic": "",
                "nullable": false,
                "union": false,
                "idlType": "DOMString"
              },
              {
                "type": null,
                "extAttrs": [],
                "generic": "",
                "nullable": false,
                "union": false,
                "idlType": "MIDIInput"
              }
            ],
            "arguments": [],
            "extAttrs": [],
            "readonly": true,
            "async": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\nThe  read-only interface of the Web MIDI API provides a [Map]-like interface to the currently available MIDI input ports. Though it works generally like a map, because it is read-only it does not contain [clear()], [delete()], or [set()] functions.",
        "mdn": "/en-US/docs/Web/API/MIDIInputMap"
      },
      "MIDIOutputMap": {
        "fragment": "[SecureContext, Exposed=Window] interface MIDIOutputMap {\n  readonly maplike <DOMString, MIDIOutput>;\n};",
        "type": "interface",
        "name": "MIDIOutputMap",
        "inheritance": null,
        "members": [
          {
            "type": "maplike",
            "idlType": [
              {
                "type": null,
                "extAttrs": [],
                "generic": "",
                "nullable": false,
                "union": false,
                "idlType": "DOMString"
              },
              {
                "type": null,
                "extAttrs": [],
                "generic": "",
                "nullable": false,
                "union": false,
                "idlType": "MIDIOutput"
              }
            ],
            "arguments": [],
            "extAttrs": [],
            "readonly": true,
            "async": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\nThe  read-only interface of the Web MIDI API provides a [Map]-like interface to the currently available MIDI output ports. Although it works like a map, because it is read-only, it does not contain [clear()], [delete()], or [set()] functions.",
        "mdn": "/en-US/docs/Web/API/MIDIOutputMap"
      },
      "MIDIAccess": {
        "fragment": "[SecureContext, Exposed=Window] interface MIDIAccess: EventTarget {\n  readonly attribute MIDIInputMap inputs;\n  readonly attribute MIDIOutputMap outputs;\n  attribute EventHandler onstatechange;\n  readonly attribute boolean sysexEnabled;\n};",
        "type": "interface",
        "name": "MIDIAccess",
        "inheritance": "EventTarget",
        "members": [
          {
            "type": "attribute",
            "name": "inputs",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MIDIInputMap"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "outputs",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MIDIOutputMap"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "onstatechange",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "sysexEnabled",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe  interface of the Web MIDI API provides methods for listing MIDI input and output devices, and obtaining access to those devices.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      MIDIAccess\n    \n  ",
        "mdn": "/en-US/docs/Web/API/MIDIAccess"
      },
      "MIDIPort": {
        "fragment": "[SecureContext, Exposed=Window] interface MIDIPort: EventTarget {\n  readonly attribute DOMString id;\n  readonly attribute DOMString? manufacturer;\n  readonly attribute DOMString? name;\n  readonly attribute MIDIPortType type;\n  readonly attribute DOMString? version;\n  readonly attribute MIDIPortDeviceState state;\n  readonly attribute MIDIPortConnectionState connection;\n  attribute EventHandler onstatechange;\n  Promise <MIDIPort> open();\n  Promise <MIDIPort> close();\n};",
        "type": "interface",
        "name": "MIDIPort",
        "inheritance": "EventTarget",
        "members": [
          {
            "type": "attribute",
            "name": "id",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMString"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "manufacturer",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "DOMString"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "name",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "DOMString"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "type",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MIDIPortType"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "version",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "DOMString"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "state",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MIDIPortDeviceState"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "connection",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MIDIPortConnectionState"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "onstatechange",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "operation",
            "name": "open",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "MIDIPort"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "close",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "MIDIPort"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe  interface of the Web MIDI API represents a MIDI input or output port.\nA  instance is created when a new MIDI device is connected. Therefore it has no constructor.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      MIDIPort\n    \n  ",
        "mdn": "/en-US/docs/Web/API/MIDIPort"
      },
      "MIDIInput": {
        "fragment": "[SecureContext, Exposed=Window] interface MIDIInput: MIDIPort {\n  attribute EventHandler onmidimessage;\n};",
        "type": "interface",
        "name": "MIDIInput",
        "inheritance": "MIDIPort",
        "members": [
          {
            "type": "attribute",
            "name": "onmidimessage",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe  interface of the Web MIDI API receives messages from a MIDI input port.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      MIDIPort\n    \n  \n  \n    \n    \n      MIDIInput\n    \n  ",
        "mdn": "/en-US/docs/Web/API/MIDIInput"
      },
      "MIDIOutput": {
        "fragment": "[SecureContext, Exposed=Window] interface MIDIOutput : MIDIPort {\n  undefined send(sequence<octet> data, optional DOMHighResTimeStamp timestamp = 0);\n  undefined clear();\n};",
        "type": "interface",
        "name": "MIDIOutput",
        "inheritance": "MIDIPort",
        "members": [
          {
            "type": "operation",
            "name": "send",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "data",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "sequence",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "argument-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "octet"
                    }
                  ]
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "timestamp",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMHighResTimeStamp"
                },
                "default": {
                  "type": "number",
                  "value": "0"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "clear",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe  interface of the Web MIDI API provides methods to add messages to the queue of an output device, and to clear the queue of messages.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      MIDIPort\n    \n  \n  \n    \n    \n      MIDIOutput\n    \n  ",
        "mdn": "/en-US/docs/Web/API/MIDIOutput"
      },
      "MIDIPortType": {
        "fragment": "enum MIDIPortType {\n  \"input\",\n  \"output\",\n};",
        "type": "enum",
        "name": "MIDIPortType",
        "values": [
          {
            "type": "enum-value",
            "value": "input"
          },
          {
            "type": "enum-value",
            "value": "output"
          }
        ],
        "extAttrs": []
      },
      "MIDIPortDeviceState": {
        "fragment": "enum MIDIPortDeviceState {\n  \"disconnected\",\n  \"connected\",\n};",
        "type": "enum",
        "name": "MIDIPortDeviceState",
        "values": [
          {
            "type": "enum-value",
            "value": "disconnected"
          },
          {
            "type": "enum-value",
            "value": "connected"
          }
        ],
        "extAttrs": []
      },
      "MIDIPortConnectionState": {
        "fragment": "enum MIDIPortConnectionState {\n  \"open\",\n  \"closed\",\n  \"pending\",\n};",
        "type": "enum",
        "name": "MIDIPortConnectionState",
        "values": [
          {
            "type": "enum-value",
            "value": "open"
          },
          {
            "type": "enum-value",
            "value": "closed"
          },
          {
            "type": "enum-value",
            "value": "pending"
          }
        ],
        "extAttrs": []
      },
      "MIDIMessageEvent": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface MIDIMessageEvent : Event {\n  constructor(DOMString type, optional MIDIMessageEventInit eventInitDict = {});\n  readonly attribute Uint8Array data;\n};",
        "type": "interface",
        "name": "MIDIMessageEvent",
        "inheritance": "Event",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "type",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "eventInitDict",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "MIDIMessageEventInit"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "data",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "Uint8Array"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe  interface of the Web MIDI API represents the event passed to the [onmidimessage] event handler of the [MIDIInput] interface. A [midimessage] event is fired every time a MIDI message is sent from a device represented by a [MIDIInput], for example when a MIDI keyboard key is pressed, a knob is tweaked, or a slider is moved.\n  \n    \n    \n      Event\n    \n  \n  \n    \n    \n      MIDIMessageEvent\n    \n  ",
        "mdn": "/en-US/docs/Web/API/MIDIMessageEvent"
      },
      "MIDIMessageEventInit": {
        "fragment": "dictionary MIDIMessageEventInit: EventInit {\n  Uint8Array data;\n};",
        "type": "dictionary",
        "name": "MIDIMessageEventInit",
        "inheritance": "EventInit",
        "members": [
          {
            "type": "field",
            "name": "data",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "Uint8Array"
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "MIDIConnectionEvent": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface MIDIConnectionEvent : Event {\n  constructor(DOMString type, optional MIDIConnectionEventInit eventInitDict = {});\n  readonly attribute MIDIPort port;\n};",
        "type": "interface",
        "name": "MIDIConnectionEvent",
        "inheritance": "Event",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "type",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "eventInitDict",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "MIDIConnectionEventInit"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "port",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MIDIPort"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe  interface of the Web MIDI API is the event passed to the [onstatechange] event handler of the [MIDIAccess] interface and the [onstatechange] event of the [MIDIPort] interface. This occurs any time a new port becomes available, or when a previously available port becomes unavailable. For example, this event is fired whenever a MIDI device is either plugged in to or unplugged from a computer.\n  \n    \n    \n      Event\n    \n  \n  \n    \n    \n      MIDIConnectionEvent\n    \n  ",
        "mdn": "/en-US/docs/Web/API/MIDIConnectionEvent"
      },
      "MIDIConnectionEventInit": {
        "fragment": "dictionary MIDIConnectionEventInit: EventInit {\n  MIDIPort port;\n};",
        "type": "dictionary",
        "name": "MIDIConnectionEventInit",
        "inheritance": "EventInit",
        "members": [
          {
            "type": "field",
            "name": "port",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MIDIPort"
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      }
    },
    "idlExtendedNames": {
      "Navigator": [
        {
          "fragment": "partial interface Navigator {\n  [SecureContext]\n  Promise <MIDIAccess> requestMIDIAccess(optional MIDIOptions options = {});\n};",
          "type": "interface",
          "name": "Navigator",
          "inheritance": null,
          "members": [
            {
              "type": "operation",
              "name": "requestMIDIAccess",
              "idlType": {
                "type": "return-type",
                "extAttrs": [],
                "generic": "Promise",
                "nullable": false,
                "union": false,
                "idlType": [
                  {
                    "type": "return-type",
                    "extAttrs": [],
                    "generic": "",
                    "nullable": false,
                    "union": false,
                    "idlType": "MIDIAccess"
                  }
                ]
              },
              "arguments": [
                {
                  "type": "argument",
                  "name": "options",
                  "extAttrs": [],
                  "idlType": {
                    "type": "argument-type",
                    "extAttrs": [],
                    "generic": "",
                    "nullable": false,
                    "union": false,
                    "idlType": "MIDIOptions"
                  },
                  "default": {
                    "type": "dictionary"
                  },
                  "optional": true,
                  "variadic": false
                }
              ],
              "extAttrs": [
                {
                  "type": "extended-attribute",
                  "name": "SecureContext",
                  "rhs": null,
                  "arguments": []
                }
              ],
              "special": ""
            }
          ],
          "extAttrs": [],
          "partial": true
        }
      ]
    },
    "globals": {},
    "exposed": {
      "Window": [
        "MIDIInputMap",
        "MIDIOutputMap",
        "MIDIAccess",
        "MIDIPort",
        "MIDIInput",
        "MIDIOutput",
        "MIDIMessageEvent",
        "MIDIConnectionEvent"
      ]
    },
    "dependencies": {
      "MidiPermissionDescriptor": [
        "PermissionDescriptor"
      ],
      "Navigator": [
        "MIDIAccess",
        "MIDIOptions"
      ],
      "MIDIOptions": [],
      "MIDIInputMap": [
        "MIDIInput"
      ],
      "MIDIOutputMap": [
        "MIDIOutput"
      ],
      "MIDIAccess": [
        "EventTarget",
        "MIDIInputMap",
        "MIDIOutputMap",
        "EventHandler"
      ],
      "MIDIPort": [
        "EventTarget",
        "MIDIPortType",
        "MIDIPortDeviceState",
        "MIDIPortConnectionState",
        "EventHandler",
        "MIDIPort"
      ],
      "MIDIInput": [
        "MIDIPort",
        "EventHandler"
      ],
      "MIDIOutput": [
        "MIDIPort",
        "DOMHighResTimeStamp"
      ],
      "MIDIMessageEvent": [
        "Event",
        "MIDIMessageEventInit",
        "Uint8Array"
      ],
      "MIDIMessageEventInit": [
        "EventInit",
        "Uint8Array"
      ],
      "MIDIConnectionEvent": [
        "Event",
        "MIDIConnectionEventInit",
        "MIDIPort"
      ],
      "MIDIConnectionEventInit": [
        "EventInit",
        "MIDIPort"
      ]
    },
    "externalDependencies": [
      "PermissionDescriptor",
      "Navigator",
      "EventTarget",
      "EventHandler",
      "DOMHighResTimeStamp",
      "Event",
      "Uint8Array",
      "EventInit"
    ],
    "hasObsoleteIdl": false
  },
  "path": "./../webIDL/merged/webmidi.json",
  "basename": "webmidi.json",
  "name": "webmidi",
  "libraryName": "webmidi"
}