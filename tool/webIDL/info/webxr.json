{
  "spec": {
    "title": "WebXR Device API",
    "url": "https://immersive-web.github.io/webxr/"
  },
  "idlparsed": {
    "jsNames": {
      "constructors": {
        "Window": [
          "XRRigidTransform",
          "XRWebGLLayer",
          "XRSessionEvent",
          "XRInputSourceEvent",
          "XRInputSourcesChangeEvent",
          "XRReferenceSpaceEvent"
        ]
      },
      "functions": {
        "Window": [
          "XRSystem",
          "XRSession",
          "XRRenderState",
          "XRFrame",
          "XRSpace",
          "XRReferenceSpace",
          "XRBoundedReferenceSpace",
          "XRView",
          "XRViewport",
          "XRPose",
          "XRViewerPose",
          "XRInputSource",
          "XRInputSourceArray",
          "XRLayer",
          "XRPermissionStatus"
        ]
      }
    },
    "idlNames": {
      "XRSystem": {
        "fragment": "[SecureContext, Exposed=Window] interface XRSystem : EventTarget {\n  // Methods\n  Promise<boolean> isSessionSupported(XRSessionMode mode);\n  [NewObject] Promise<XRSession> requestSession(XRSessionMode mode, optional XRSessionInit options = {});\n\n  // Events\n  attribute EventHandler ondevicechange;\n};",
        "type": "interface",
        "name": "XRSystem",
        "inheritance": "EventTarget",
        "members": [
          {
            "type": "operation",
            "name": "isSessionSupported",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "boolean"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "mode",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRSessionMode"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "requestSession",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRSession"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "mode",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRSessionMode"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRSessionInit"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "attribute",
            "name": "ondevicechange",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": true,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe WebXR Device API interface  provides methods which let you get access to an [XRSession] object representing a WebXR session. With that [XRSession] in hand, you can use it to interact with the Augmented Reality (AR) or Virtual Reality (VR) device.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      XRSystem\n    \n  ",
        "mdn": "/en-US/docs/Web/API/XRSystem"
      },
      "XRSessionMode": {
        "fragment": "enum XRSessionMode {\n  \"inline\",\n  \"immersive-vr\",\n  \"immersive-ar\"\n};",
        "type": "enum",
        "name": "XRSessionMode",
        "values": [
          {
            "type": "enum-value",
            "value": "inline"
          },
          {
            "type": "enum-value",
            "value": "immersive-vr"
          },
          {
            "type": "enum-value",
            "value": "immersive-ar"
          }
        ],
        "extAttrs": []
      },
      "XRSessionInit": {
        "fragment": "dictionary XRSessionInit {\n  sequence<DOMString> requiredFeatures;\n  sequence<DOMString> optionalFeatures;\n};",
        "type": "dictionary",
        "name": "XRSessionInit",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "requiredFeatures",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "sequence",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                }
              ]
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "optionalFeatures",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "sequence",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                }
              ]
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "XRVisibilityState": {
        "fragment": "enum XRVisibilityState {\n  \"visible\",\n  \"visible-blurred\",\n  \"hidden\",\n};",
        "type": "enum",
        "name": "XRVisibilityState",
        "values": [
          {
            "type": "enum-value",
            "value": "visible"
          },
          {
            "type": "enum-value",
            "value": "visible-blurred"
          },
          {
            "type": "enum-value",
            "value": "hidden"
          }
        ],
        "extAttrs": []
      },
      "XRSession": {
        "fragment": "[SecureContext, Exposed=Window] interface XRSession : EventTarget {\n  // Attributes\n  readonly attribute XRVisibilityState visibilityState;\n  readonly attribute float? frameRate;\n  readonly attribute Float32Array? supportedFrameRates;\n  [SameObject] readonly attribute XRRenderState renderState;\n  [SameObject] readonly attribute XRInputSourceArray inputSources;\n  readonly attribute FrozenArray<DOMString> enabledFeatures;\n\n  // Methods\n  undefined updateRenderState(optional XRRenderStateInit state = {});\n  Promise<undefined> updateTargetFrameRate(float rate);\n  [NewObject] Promise<XRReferenceSpace> requestReferenceSpace(XRReferenceSpaceType type);\n\n  unsigned long requestAnimationFrame(XRFrameRequestCallback callback);\n  undefined cancelAnimationFrame(unsigned long handle);\n\n  Promise<undefined> end();\n\n  // Events\n  attribute EventHandler onend;\n  attribute EventHandler oninputsourceschange;\n  attribute EventHandler onselect;\n  attribute EventHandler onselectstart;\n  attribute EventHandler onselectend;\n  attribute EventHandler onsqueeze;\n  attribute EventHandler onsqueezestart;\n  attribute EventHandler onsqueezeend;\n  attribute EventHandler onvisibilitychange;\n  attribute EventHandler onframeratechange;\n};",
        "type": "interface",
        "name": "XRSession",
        "inheritance": "EventTarget",
        "members": [
          {
            "type": "attribute",
            "name": "visibilityState",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRVisibilityState"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "frameRate",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "float"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "supportedFrameRates",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "Float32Array"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "renderState",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRRenderState"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "inputSources",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRInputSourceArray"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "enabledFeatures",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "FrozenArray",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "attribute-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                }
              ]
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "updateRenderState",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "state",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRRenderStateInit"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "updateTargetFrameRate",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "rate",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "requestReferenceSpace",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRReferenceSpace"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "type",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRReferenceSpaceType"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "requestAnimationFrame",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "callback",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRFrameRequestCallback"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "cancelAnimationFrame",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "handle",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "end",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "attribute",
            "name": "onend",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "oninputsourceschange",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "onselect",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "onselectstart",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "onselectend",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "onsqueeze",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "onsqueezestart",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "onsqueezeend",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "onvisibilitychange",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "onframeratechange",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe WebXR Device API's  interface represents an ongoing XR session, providing methods and properties used to interact with and control the session. To open a WebXR session, use the [XRSystem] interface's [requestSession()] method.\nWith  methods, you can poll the viewer's position and orientation (the [XRViewerPose]), gather information about the user's environment, and present imagery to the user.  supports both inline and immersive virtual and augmented reality modes.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      XRSession\n    \n  ",
        "mdn": "/en-US/docs/Web/API/XRSession"
      },
      "XRRenderStateInit": {
        "fragment": "dictionary XRRenderStateInit {\n  double depthNear;\n  double depthFar;\n  double inlineVerticalFieldOfView;\n  XRWebGLLayer? baseLayer;\n  sequence<XRLayer>? layers;\n};",
        "type": "dictionary",
        "name": "XRRenderStateInit",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "depthNear",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "depthFar",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "inlineVerticalFieldOfView",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "baseLayer",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "XRWebGLLayer"
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "layers",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "sequence",
              "nullable": true,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRLayer"
                }
              ]
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "XRRenderState": {
        "fragment": "[SecureContext, Exposed=Window] interface XRRenderState {\n  readonly attribute double depthNear;\n  readonly attribute double depthFar;\n  readonly attribute double? inlineVerticalFieldOfView;\n  readonly attribute XRWebGLLayer? baseLayer;\n};",
        "type": "interface",
        "name": "XRRenderState",
        "inheritance": null,
        "members": [
          {
            "type": "attribute",
            "name": "depthNear",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "depthFar",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "inlineVerticalFieldOfView",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "baseLayer",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "XRWebGLLayer"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe  interface of the WebXR Device API contains configurable values which affect how the imagery generated by an [XRSession] gets composited. These properties include the range of distances from the viewer within which content should be rendered, the vertical field of view (for inline presentations), and a reference to the [XRWebGLLayer] being used as the target for rendering the scene prior to it being presented on the XR device's display or displays.\nWhen you apply changes using the [XRSession] method [updateRenderState()], the specified changes take effect after the current animation frame has completed, but before the next one begins.",
        "mdn": "/en-US/docs/Web/API/XRRenderState"
      },
      "XRFrameRequestCallback": {
        "fragment": "callback XRFrameRequestCallback = undefined (DOMHighResTimeStamp time, XRFrame frame);",
        "type": "callback",
        "name": "XRFrameRequestCallback",
        "idlType": {
          "type": "return-type",
          "extAttrs": [],
          "generic": "",
          "nullable": false,
          "union": false,
          "idlType": "undefined"
        },
        "arguments": [
          {
            "type": "argument",
            "name": "time",
            "extAttrs": [],
            "idlType": {
              "type": "argument-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMHighResTimeStamp"
            },
            "default": null,
            "optional": false,
            "variadic": false
          },
          {
            "type": "argument",
            "name": "frame",
            "extAttrs": [],
            "idlType": {
              "type": "argument-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRFrame"
            },
            "default": null,
            "optional": false,
            "variadic": false
          }
        ],
        "extAttrs": []
      },
      "XRFrame": {
        "fragment": "[SecureContext, Exposed=Window] interface XRFrame {\n  [SameObject] readonly attribute XRSession session;\n  readonly attribute DOMHighResTimeStamp predictedDisplayTime;\n\n  XRViewerPose? getViewerPose(XRReferenceSpace referenceSpace);\n  XRPose? getPose(XRSpace space, XRSpace baseSpace);\n};",
        "type": "interface",
        "name": "XRFrame",
        "inheritance": null,
        "members": [
          {
            "type": "attribute",
            "name": "session",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRSession"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "predictedDisplayTime",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMHighResTimeStamp"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "getViewerPose",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "XRViewerPose"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "referenceSpace",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRReferenceSpace"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "getPose",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "XRPose"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "space",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRSpace"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "baseSpace",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRSpace"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nA WebXR Device API  object is passed into the [requestAnimationFrame()] callback function and provides access to the information needed in order to render a single frame of animation for an [XRSession] describing a VR or AR scene. Events which communicate the tracking state of objects also provide an  reference as part of their structure.\nIn addition to providing a reference to the [XRSession] for which this frame is to be rendered, the [getViewerPose()] method is provided to obtain the [XRViewerPose] describing the viewer's position and orientation in space, and [getPose()] can be used to create an [XRPose] describing the relative position of one [XRSpace] relative to another.",
        "mdn": "/en-US/docs/Web/API/XRFrame"
      },
      "XRSpace": {
        "fragment": "[SecureContext, Exposed=Window] interface XRSpace : EventTarget {\n\n};",
        "type": "interface",
        "name": "XRSpace",
        "inheritance": "EventTarget",
        "members": [],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": true,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe  interface of the WebXR Device API is an abstract interface providing a common basis for every class which represents a virtual coordinate system within the virtual world, in which its origin corresponds to a physical location. Spatial data in WebXR is always expressed relative to an object based upon one of the descendant interfaces of , at the time at which a given [XRFrame] takes place.\nNumeric values such as pose positions are thus coordinates in the corresponding , relative to that space's origin.\n\n  Note: The  interface is never used directly; instead, all spaces are created using one of the interfaces based on . At this time, those are [XRReferenceSpace], [XRBoundedReferenceSpace], and [XRJointSpace].\n\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      XRSpace\n    \n  ",
        "mdn": "/en-US/docs/Web/API/XRSpace"
      },
      "XRReferenceSpaceType": {
        "fragment": "enum XRReferenceSpaceType {\n  \"viewer\",\n  \"local\",\n  \"local-floor\",\n  \"bounded-floor\",\n  \"unbounded\"\n};",
        "type": "enum",
        "name": "XRReferenceSpaceType",
        "values": [
          {
            "type": "enum-value",
            "value": "viewer"
          },
          {
            "type": "enum-value",
            "value": "local"
          },
          {
            "type": "enum-value",
            "value": "local-floor"
          },
          {
            "type": "enum-value",
            "value": "bounded-floor"
          },
          {
            "type": "enum-value",
            "value": "unbounded"
          }
        ],
        "extAttrs": []
      },
      "XRReferenceSpace": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface XRReferenceSpace : XRSpace {\n  [NewObject] XRReferenceSpace getOffsetReferenceSpace(XRRigidTransform originOffset);\n\n  attribute EventHandler onreset;\n};",
        "type": "interface",
        "name": "XRReferenceSpace",
        "inheritance": "XRSpace",
        "members": [
          {
            "type": "operation",
            "name": "getOffsetReferenceSpace",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRReferenceSpace"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "originOffset",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRRigidTransform"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "attribute",
            "name": "onreset",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe WebXR Device API's  interface describes the coordinate system for a specific tracked entity or object within the virtual world using a specified tracking behavior. The tracking behavior is defined by the selected reference space type. It expands upon the base class, [XRSpace], by adding support for several different tracking behaviors as well as to request a new reference space which describes the offset transform between the tracked object and another location in the world.\nAll reference spaces—with the sole exception being bounded reference spaces—are described using the  type. Bounded spaces are implemented as [XRBoundedReferenceSpace] objects. These are special spaces which let you establish a perimeter within which it's \"safe\" for the viewer to move. For XR systems that allow the user to physically move around, such as those that track movement with a real-world camera, this boundary establishes the edges of the area the user is able to move around in, whether due to physical obstacles or due to limitations of the XR hardware. See the article Using bounded reference spaces to protect the viewer for more on using boundaries to keep the user from colliding with obstacles both physical and virtual.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      XRSpace\n    \n  \n  \n    \n    \n      XRReferenceSpace\n    \n  ",
        "mdn": "/en-US/docs/Web/API/XRReferenceSpace"
      },
      "XRBoundedReferenceSpace": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface XRBoundedReferenceSpace : XRReferenceSpace {\n  readonly attribute FrozenArray<DOMPointReadOnly> boundsGeometry;\n};",
        "type": "interface",
        "name": "XRBoundedReferenceSpace",
        "inheritance": "XRReferenceSpace",
        "members": [
          {
            "type": "attribute",
            "name": "boundsGeometry",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "FrozenArray",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "attribute-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMPointReadOnly"
                }
              ]
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe WebXR Device API's  interface describes a virtual world reference space which has preset boundaries. This extends [XRReferenceSpace], which describes an essentially unrestricted space around the viewer's position. These bounds are defined using an array of points, each of which defines a vertex in a polygon inside which the user is allowed to move.\nThis is typically used when the XR system is capable of tracking the user's physical movement within a limited distance of their starting position. The specified bounds may, in fact, describe the shape and size of the room the user is located in, in order to let the WebXR site or application prevent the user from colliding with the walls or other obstacles in the real world.  At a minimum, the boundaries indicate the area in which the XR device is capable of tracking the user's movement. See the article Using bounded reference spaces for details on how bounded spaces work and why they're useful.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      XRSpace\n    \n  \n  \n    \n    \n      XRReferenceSpace\n    \n  \n  \n    \n    \n      XRBoundedReferenceSpace\n    \n  ",
        "mdn": "/en-US/docs/Web/API/XRBoundedReferenceSpace"
      },
      "XREye": {
        "fragment": "enum XREye {\n  \"none\",\n  \"left\",\n  \"right\"\n};",
        "type": "enum",
        "name": "XREye",
        "values": [
          {
            "type": "enum-value",
            "value": "none"
          },
          {
            "type": "enum-value",
            "value": "left"
          },
          {
            "type": "enum-value",
            "value": "right"
          }
        ],
        "extAttrs": []
      },
      "XRView": {
        "fragment": "[SecureContext, Exposed=Window] interface XRView {\n  readonly attribute XREye eye;\n  readonly attribute Float32Array projectionMatrix;\n  [SameObject] readonly attribute XRRigidTransform transform;\n  readonly attribute double? recommendedViewportScale;\n\n  undefined requestViewportScale(double? scale);\n};",
        "type": "interface",
        "name": "XRView",
        "inheritance": null,
        "members": [
          {
            "type": "attribute",
            "name": "eye",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XREye"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "projectionMatrix",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "Float32Array"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "transform",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRRigidTransform"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "recommendedViewportScale",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "requestViewportScale",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "scale",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": true,
                  "union": false,
                  "idlType": "double"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe WebXR Device API's  interface describes a single view into the XR scene for a specific frame, providing orientation and position information for the viewpoint. You can think of it as a description of a specific eye or camera and how it views the world. A 3D frame will involve two views, one for each eye, separated by an appropriate distance which approximates the distance between the viewer's eyes. This allows the two views, when projected in isolation into the appropriate eyes, to simulate a 3D world.",
        "mdn": "/en-US/docs/Web/API/XRView"
      },
      "XRViewport": {
        "fragment": "[SecureContext, Exposed=Window] interface XRViewport {\n  readonly attribute long x;\n  readonly attribute long y;\n  readonly attribute long width;\n  readonly attribute long height;\n};",
        "type": "interface",
        "name": "XRViewport",
        "inheritance": null,
        "members": [
          {
            "type": "attribute",
            "name": "x",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "y",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "width",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "height",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe WebXR Device API's  interface provides properties used to describe the size and position of the current viewport within the [XRWebGLLayer] being used to render the 3D scene.",
        "mdn": "/en-US/docs/Web/API/XRViewport"
      },
      "XRRigidTransform": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface XRRigidTransform {\n  constructor(optional DOMPointInit position = {}, optional DOMPointInit orientation = {});\n  [SameObject] readonly attribute DOMPointReadOnly position;\n  [SameObject] readonly attribute DOMPointReadOnly orientation;\n  readonly attribute Float32Array matrix;\n  [SameObject] readonly attribute XRRigidTransform inverse;\n};",
        "type": "interface",
        "name": "XRRigidTransform",
        "inheritance": null,
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "position",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMPointInit"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "orientation",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMPointInit"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "position",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMPointReadOnly"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "orientation",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMPointReadOnly"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "matrix",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "Float32Array"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "inverse",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRRigidTransform"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  is a WebXR API interface that represents the 3D geometric transform described by a position and orientation.\n is used to specify transforms throughout the WebXR APIs, including:\n\n  The offset and orientation relative to the parent reference space to use when creating a new reference space with [getOffsetReferenceSpace()].\n  The [transform] of an [XRView].\n  The [transform] of an [XRPose].\n  The [XRReferenceSpaceEvent] event's [transform] property, as found in the [reset] event received by an [XRReferenceSpace].\n\nUsing  in these places rather than bare arrays that provide the matrix data has an advantage. It automatically computes the inverse of the transform and even caches it making subsequent requests significantly faster.",
        "mdn": "/en-US/docs/Web/API/XRRigidTransform"
      },
      "XRPose": {
        "fragment": "[SecureContext, Exposed=Window] interface XRPose {\n  [SameObject] readonly attribute XRRigidTransform transform;\n  [SameObject] readonly attribute DOMPointReadOnly? linearVelocity;\n  [SameObject] readonly attribute DOMPointReadOnly? angularVelocity;\n\n  readonly attribute boolean emulatedPosition;\n};",
        "type": "interface",
        "name": "XRPose",
        "inheritance": null,
        "members": [
          {
            "type": "attribute",
            "name": "transform",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRRigidTransform"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "linearVelocity",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "DOMPointReadOnly"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "angularVelocity",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "DOMPointReadOnly"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "emulatedPosition",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n is a WebXR API interface representing a position and orientation in the 3D space, relative to the [XRSpace] within which it resides. The [XRSpace]—which is either an [XRReferenceSpace] or an [XRBoundedReferenceSpace]—defines the coordinate system used for the pose and, in the case of an [XRViewerPose], its underlying views.\nTo obtain the  for the [XRSpace] used as the local coordinate system of an object, call [XRFrame.getPose()], specifying that local [XRSpace] and the space to which you wish to convert:\n[thePose = xrFrame.getPose(localSpace, baseSpace);\n]\nThe pose for a viewer (or camera) is represented by the [XRViewerPose] subclass of . This is obtained using [XRFrame.getViewerPose()]  instead of [getPose()], specifying a reference space which has been adjusted to position and orient the node to provide the desired viewing position and angle:\n[viewerPose = xrFrame.getViewerPose(adjReferenceSpace);\n]\nHere, [adjReferenceSpace] is a reference space which has been updated using the base frame of reference for the frame and any adjustments needed to position the viewer based on movement or rotation which is being supplied from a source other than the XR device, such as keyboard or mouse inputs.\nSee the article Movement, orientation, and motion for further details and an example with thorough explanations of what's going on.",
        "mdn": "/en-US/docs/Web/API/XRPose"
      },
      "XRViewerPose": {
        "fragment": "[SecureContext, Exposed=Window] interface XRViewerPose : XRPose {\n  [SameObject] readonly attribute FrozenArray<XRView> views;\n};",
        "type": "interface",
        "name": "XRViewerPose",
        "inheritance": "XRPose",
        "members": [
          {
            "type": "attribute",
            "name": "views",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "FrozenArray",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "attribute-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRView"
                }
              ]
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The WebXR Device API interface  represents the pose (the position and orientation) of a viewer's point of view on the scene. Each  can have multiple views to represent, for example, the slight separation between the left and right eye.\nThis view can represent anything from the point-of-view of a user's XR headset to the viewpoint represented by a player's movement of an avatar using mouse and keyboard, presented on the screen, to a virtual camera capturing the scene for a spectator.\n  \n    \n    \n      XRPose\n    \n  \n  \n    \n    \n      XRViewerPose\n    \n  ",
        "mdn": "/en-US/docs/Web/API/XRViewerPose"
      },
      "XRHandedness": {
        "fragment": "enum XRHandedness {\n  \"none\",\n  \"left\",\n  \"right\"\n};",
        "type": "enum",
        "name": "XRHandedness",
        "values": [
          {
            "type": "enum-value",
            "value": "none"
          },
          {
            "type": "enum-value",
            "value": "left"
          },
          {
            "type": "enum-value",
            "value": "right"
          }
        ],
        "extAttrs": []
      },
      "XRTargetRayMode": {
        "fragment": "enum XRTargetRayMode {\n  \"gaze\",\n  \"tracked-pointer\",\n  \"screen\"\n};",
        "type": "enum",
        "name": "XRTargetRayMode",
        "values": [
          {
            "type": "enum-value",
            "value": "gaze"
          },
          {
            "type": "enum-value",
            "value": "tracked-pointer"
          },
          {
            "type": "enum-value",
            "value": "screen"
          }
        ],
        "extAttrs": []
      },
      "XRInputSource": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface XRInputSource {\n  readonly attribute XRHandedness handedness;\n  readonly attribute XRTargetRayMode targetRayMode;\n  [SameObject] readonly attribute XRSpace targetRaySpace;\n  [SameObject] readonly attribute XRSpace? gripSpace;\n  [SameObject] readonly attribute FrozenArray<DOMString> profiles;\n};",
        "type": "interface",
        "name": "XRInputSource",
        "inheritance": null,
        "members": [
          {
            "type": "attribute",
            "name": "handedness",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRHandedness"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "targetRayMode",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRTargetRayMode"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "targetRaySpace",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRSpace"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "gripSpace",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "XRSpace"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "profiles",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "FrozenArray",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "attribute-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                }
              ]
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": true,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe WebXR Device API's  interface describes a single source of control input which is part of the user's WebXR-compatible virtual or augmented reality system. The device is specific to the platform being used, but provides the direction in which it is being aimed and optionally may generate events if the user triggers performs actions using the device.",
        "mdn": "/en-US/docs/Web/API/XRInputSource"
      },
      "XRInputSourceArray": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface XRInputSourceArray {\n  iterable<XRInputSource>;\n  readonly attribute unsigned long length;\n  getter XRInputSource(unsigned long index);\n};",
        "type": "interface",
        "name": "XRInputSourceArray",
        "inheritance": null,
        "members": [
          {
            "type": "iterable",
            "idlType": [
              {
                "type": null,
                "extAttrs": [],
                "generic": "",
                "nullable": false,
                "union": false,
                "idlType": "XRInputSource"
              }
            ],
            "arguments": [],
            "extAttrs": [],
            "readonly": false,
            "async": false
          },
          {
            "type": "attribute",
            "name": "length",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRInputSource"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "index",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": "getter"
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe interface  represents a live list of WebXR input sources, and is used as the return value of the [XRSession] property [inputSources]. Each entry is an [XRInputSource] representing one input device connected to the WebXR system.\nIn addition to being able to access the input sources in the list using standard array notation (that is, with index numbers inside square brackets), methods are available to allow the use of iterators and the [forEach()] method is also available.",
        "mdn": "/en-US/docs/Web/API/XRInputSourceArray"
      },
      "XRLayer": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface XRLayer : EventTarget {};",
        "type": "interface",
        "name": "XRLayer",
        "inheritance": "EventTarget",
        "members": [],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe  interface of the WebXR Device API is the base class for WebXR layer types. It inherits methods from [EventTarget].\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      XRLayer\n    \n  ",
        "mdn": "/en-US/docs/Web/API/XRLayer"
      },
      "XRWebGLRenderingContext": {
        "fragment": "typedef (WebGLRenderingContext or\n         WebGL2RenderingContext) XRWebGLRenderingContext;",
        "type": "typedef",
        "name": "XRWebGLRenderingContext",
        "idlType": {
          "type": "typedef-type",
          "extAttrs": [],
          "generic": "",
          "nullable": false,
          "union": true,
          "idlType": [
            {
              "type": null,
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "WebGLRenderingContext"
            },
            {
              "type": null,
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "WebGL2RenderingContext"
            }
          ]
        },
        "extAttrs": []
      },
      "XRWebGLLayerInit": {
        "fragment": "dictionary XRWebGLLayerInit {\n  boolean antialias = true;\n  boolean depth = true;\n  boolean stencil = false;\n  boolean alpha = true;\n  boolean ignoreDepthValues = false;\n  double framebufferScaleFactor = 1.0;\n};",
        "type": "dictionary",
        "name": "XRWebGLLayerInit",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "antialias",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": {
              "type": "boolean",
              "value": true
            },
            "required": false
          },
          {
            "type": "field",
            "name": "depth",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": {
              "type": "boolean",
              "value": true
            },
            "required": false
          },
          {
            "type": "field",
            "name": "stencil",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": {
              "type": "boolean",
              "value": false
            },
            "required": false
          },
          {
            "type": "field",
            "name": "alpha",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": {
              "type": "boolean",
              "value": true
            },
            "required": false
          },
          {
            "type": "field",
            "name": "ignoreDepthValues",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": {
              "type": "boolean",
              "value": false
            },
            "required": false
          },
          {
            "type": "field",
            "name": "framebufferScaleFactor",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "1.0"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "XRWebGLLayer": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface XRWebGLLayer: XRLayer {\n  constructor(XRSession session,\n             XRWebGLRenderingContext context,\n             optional XRWebGLLayerInit layerInit = {});\n  // Attributes\n  readonly attribute boolean antialias;\n  readonly attribute boolean ignoreDepthValues;\n  attribute float? fixedFoveation;\n\n  [SameObject] readonly attribute WebGLFramebuffer? framebuffer;\n  readonly attribute unsigned long framebufferWidth;\n  readonly attribute unsigned long framebufferHeight;\n\n  // Methods\n  XRViewport? getViewport(XRView view);\n\n  // Static Methods\n  static double getNativeFramebufferScaleFactor(XRSession session);\n};",
        "type": "interface",
        "name": "XRWebGLLayer",
        "inheritance": "XRLayer",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "session",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRSession"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRWebGLRenderingContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "layerInit",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRWebGLLayerInit"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "antialias",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "ignoreDepthValues",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "fixedFoveation",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "float"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "framebuffer",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "WebGLFramebuffer"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "framebufferWidth",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "framebufferHeight",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "getViewport",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "XRViewport"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "view",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRView"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "getNativeFramebufferScaleFactor",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "session",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRSession"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": "static"
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": true,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe  interface of the WebXR Device API provides a linkage between the WebXR device (or simulated XR device, in the case of an inline session) and a WebGL context used to render the scene for display on the device. In particular, it provides access to the WebGL framebuffer and viewport to ease access to the context.\nAlthough  is currently the only type of framebuffer layer supported by WebGL, it's entirely possible that future updates to the WebXR specification may allow for other layer types and corresponding image sources.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      XRLayer\n    \n  \n  \n    \n    \n      XRWebGLLayer\n    \n  ",
        "mdn": "/en-US/docs/Web/API/XRWebGLLayer"
      },
      "XRSessionEvent": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface XRSessionEvent : Event {\n  constructor(DOMString type, XRSessionEventInit eventInitDict);\n  [SameObject] readonly attribute XRSession session;\n};",
        "type": "interface",
        "name": "XRSessionEvent",
        "inheritance": "Event",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "type",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "eventInitDict",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRSessionEventInit"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "session",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRSession"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The WebXR Device API's  interface describes an event which indicates the change of the state of an [XRSession]. These events occur, for example, when the session ends or the visibility of its context changes.\n  \n    \n    \n      Event\n    \n  \n  \n    \n    \n      XRSessionEvent\n    \n  ",
        "mdn": "/en-US/docs/Web/API/XRSessionEvent"
      },
      "XRSessionEventInit": {
        "fragment": "dictionary XRSessionEventInit : EventInit {\n  required XRSession session;\n};",
        "type": "dictionary",
        "name": "XRSessionEventInit",
        "inheritance": "EventInit",
        "members": [
          {
            "type": "field",
            "name": "session",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRSession"
            },
            "default": null,
            "required": true
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "XRInputSourceEvent": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface XRInputSourceEvent : Event {\n  constructor(DOMString type, XRInputSourceEventInit eventInitDict);\n  [SameObject] readonly attribute XRFrame frame;\n  [SameObject] readonly attribute XRInputSource inputSource;\n};",
        "type": "interface",
        "name": "XRInputSourceEvent",
        "inheritance": "Event",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "type",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "eventInitDict",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRInputSourceEventInit"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "frame",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRFrame"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "inputSource",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRInputSource"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe WebXR Device API's  interface describes an event which has occurred on a WebXR user input device such as a hand controller, gaze tracking system, or motion tracking system. More specifically, they represent a change in the state of an [XRInputSource].\nTo learn more about handling inputs in a WebXR project, see the article Inputs and input sources.\n  \n    \n    \n      Event\n    \n  \n  \n    \n    \n      XRInputSourceEvent\n    \n  ",
        "mdn": "/en-US/docs/Web/API/XRInputSourceEvent"
      },
      "XRInputSourceEventInit": {
        "fragment": "dictionary XRInputSourceEventInit : EventInit {\n  required XRFrame frame;\n  required XRInputSource inputSource;\n};",
        "type": "dictionary",
        "name": "XRInputSourceEventInit",
        "inheritance": "EventInit",
        "members": [
          {
            "type": "field",
            "name": "frame",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRFrame"
            },
            "default": null,
            "required": true
          },
          {
            "type": "field",
            "name": "inputSource",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRInputSource"
            },
            "default": null,
            "required": true
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "XRInputSourcesChangeEvent": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface XRInputSourcesChangeEvent : Event {\n  constructor(DOMString type, XRInputSourcesChangeEventInit eventInitDict);\n  [SameObject] readonly attribute XRSession session;\n  [SameObject] readonly attribute FrozenArray<XRInputSource> added;\n  [SameObject] readonly attribute FrozenArray<XRInputSource> removed;\n};",
        "type": "interface",
        "name": "XRInputSourcesChangeEvent",
        "inheritance": "Event",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "type",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "eventInitDict",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRInputSourcesChangeEventInit"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "session",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRSession"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "added",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "FrozenArray",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "attribute-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRInputSource"
                }
              ]
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "removed",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "FrozenArray",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "attribute-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRInputSource"
                }
              ]
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe WebXR Device API interface  is used to represent the [inputsourceschange] event sent to an [XRSession] when the set of available WebXR input controllers changes.\n  \n    \n    \n      Event\n    \n  \n  \n    \n    \n      XRInputSourcesChangeEvent\n    \n  ",
        "mdn": "/en-US/docs/Web/API/XRInputSourcesChangeEvent"
      },
      "XRInputSourcesChangeEventInit": {
        "fragment": "dictionary XRInputSourcesChangeEventInit : EventInit {\n  required XRSession session;\n  required FrozenArray<XRInputSource> added;\n  required FrozenArray<XRInputSource> removed;\n\n};",
        "type": "dictionary",
        "name": "XRInputSourcesChangeEventInit",
        "inheritance": "EventInit",
        "members": [
          {
            "type": "field",
            "name": "session",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRSession"
            },
            "default": null,
            "required": true
          },
          {
            "type": "field",
            "name": "added",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "FrozenArray",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRInputSource"
                }
              ]
            },
            "default": null,
            "required": true
          },
          {
            "type": "field",
            "name": "removed",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "FrozenArray",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRInputSource"
                }
              ]
            },
            "default": null,
            "required": true
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "XRReferenceSpaceEvent": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface XRReferenceSpaceEvent : Event {\n  constructor(DOMString type, XRReferenceSpaceEventInit eventInitDict);\n  [SameObject] readonly attribute XRReferenceSpace referenceSpace;\n  [SameObject] readonly attribute XRRigidTransform? transform;\n};",
        "type": "interface",
        "name": "XRReferenceSpaceEvent",
        "inheritance": "Event",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "type",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "eventInitDict",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "XRReferenceSpaceEventInit"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "referenceSpace",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRReferenceSpace"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "transform",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "XRRigidTransform"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe WebXR Device API interface  represents an event sent to an [XRReferenceSpace]. Currently, the only event  that uses this type is the [reset] event.\n  \n    \n    \n      Event\n    \n  \n  \n    \n    \n      XRReferenceSpaceEvent\n    \n  ",
        "mdn": "/en-US/docs/Web/API/XRReferenceSpaceEvent"
      },
      "XRReferenceSpaceEventInit": {
        "fragment": "dictionary XRReferenceSpaceEventInit : EventInit {\n  required XRReferenceSpace referenceSpace;\n  XRRigidTransform? transform = null;\n};",
        "type": "dictionary",
        "name": "XRReferenceSpaceEventInit",
        "inheritance": "EventInit",
        "members": [
          {
            "type": "field",
            "name": "referenceSpace",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRReferenceSpace"
            },
            "default": null,
            "required": true
          },
          {
            "type": "field",
            "name": "transform",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "XRRigidTransform"
            },
            "default": {
              "type": "null"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "XRSessionSupportedPermissionDescriptor": {
        "fragment": "dictionary XRSessionSupportedPermissionDescriptor: PermissionDescriptor {\n  XRSessionMode mode;\n};",
        "type": "dictionary",
        "name": "XRSessionSupportedPermissionDescriptor",
        "inheritance": "PermissionDescriptor",
        "members": [
          {
            "type": "field",
            "name": "mode",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRSessionMode"
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "XRPermissionDescriptor": {
        "fragment": "dictionary XRPermissionDescriptor: PermissionDescriptor {\n  XRSessionMode mode;\n  sequence<DOMString> requiredFeatures;\n  sequence<DOMString> optionalFeatures;\n};",
        "type": "dictionary",
        "name": "XRPermissionDescriptor",
        "inheritance": "PermissionDescriptor",
        "members": [
          {
            "type": "field",
            "name": "mode",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "XRSessionMode"
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "requiredFeatures",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "sequence",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                }
              ]
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "optionalFeatures",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "sequence",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                }
              ]
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "XRPermissionStatus": {
        "fragment": "[Exposed=Window]\ninterface XRPermissionStatus: PermissionStatus {\n  attribute FrozenArray<DOMString> granted;\n};",
        "type": "interface",
        "name": "XRPermissionStatus",
        "inheritance": "PermissionStatus",
        "members": [
          {
            "type": "attribute",
            "name": "granted",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "FrozenArray",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "attribute-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                }
              ]
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe  interface defines the object returned by calling [navigator.permissions.query()] for the [xr] permission name; it indicates whether or not the app or site has permission to use WebXR, and may be monitored over time for changes to that permissions tate.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      PermissionStatus\n    \n  \n  \n    \n    \n      XRPermissionStatus\n    \n  ",
        "mdn": "/en-US/docs/Web/API/XRPermissionStatus"
      }
    },
    "idlExtendedNames": {
      "Navigator": [
        {
          "fragment": "partial interface Navigator {\n  [SecureContext, SameObject] readonly attribute XRSystem xr;\n};",
          "type": "interface",
          "name": "Navigator",
          "inheritance": null,
          "members": [
            {
              "type": "attribute",
              "name": "xr",
              "idlType": {
                "type": "attribute-type",
                "extAttrs": [],
                "generic": "",
                "nullable": false,
                "union": false,
                "idlType": "XRSystem"
              },
              "extAttrs": [
                {
                  "type": "extended-attribute",
                  "name": "SecureContext",
                  "rhs": null,
                  "arguments": []
                },
                {
                  "type": "extended-attribute",
                  "name": "SameObject",
                  "rhs": null,
                  "arguments": []
                }
              ],
              "special": "",
              "readonly": true
            }
          ],
          "extAttrs": [],
          "partial": true
        }
      ],
      "WebGLContextAttributes": [
        {
          "fragment": "partial dictionary WebGLContextAttributes {\n    boolean xrCompatible = false;\n};",
          "type": "dictionary",
          "name": "WebGLContextAttributes",
          "inheritance": null,
          "members": [
            {
              "type": "field",
              "name": "xrCompatible",
              "extAttrs": [],
              "idlType": {
                "type": "dictionary-type",
                "extAttrs": [],
                "generic": "",
                "nullable": false,
                "union": false,
                "idlType": "boolean"
              },
              "default": {
                "type": "boolean",
                "value": false
              },
              "required": false
            }
          ],
          "extAttrs": [],
          "partial": true
        }
      ],
      "WebGLRenderingContextBase": [
        {
          "fragment": "partial interface mixin WebGLRenderingContextBase {\n    [NewObject] Promise<undefined> makeXRCompatible();\n};",
          "type": "interface mixin",
          "name": "WebGLRenderingContextBase",
          "inheritance": null,
          "members": [
            {
              "type": "operation",
              "name": "makeXRCompatible",
              "idlType": {
                "type": "return-type",
                "extAttrs": [],
                "generic": "Promise",
                "nullable": false,
                "union": false,
                "idlType": [
                  {
                    "type": "return-type",
                    "extAttrs": [],
                    "generic": "",
                    "nullable": false,
                    "union": false,
                    "idlType": "undefined"
                  }
                ]
              },
              "arguments": [],
              "extAttrs": [
                {
                  "type": "extended-attribute",
                  "name": "NewObject",
                  "rhs": null,
                  "arguments": []
                }
              ],
              "special": ""
            }
          ],
          "extAttrs": [],
          "partial": true
        }
      ]
    },
    "globals": {},
    "exposed": {
      "Window": [
        "XRSystem",
        "XRSession",
        "XRRenderState",
        "XRFrame",
        "XRSpace",
        "XRReferenceSpace",
        "XRBoundedReferenceSpace",
        "XRView",
        "XRViewport",
        "XRRigidTransform",
        "XRPose",
        "XRViewerPose",
        "XRInputSource",
        "XRInputSourceArray",
        "XRLayer",
        "XRWebGLLayer",
        "XRSessionEvent",
        "XRInputSourceEvent",
        "XRInputSourcesChangeEvent",
        "XRReferenceSpaceEvent",
        "XRPermissionStatus"
      ]
    },
    "dependencies": {
      "Navigator": [
        "XRSystem"
      ],
      "XRSystem": [
        "EventTarget",
        "XRSessionMode",
        "XRSession",
        "XRSessionInit",
        "EventHandler"
      ],
      "XRSessionInit": [],
      "XRSession": [
        "EventTarget",
        "XRVisibilityState",
        "Float32Array",
        "XRRenderState",
        "XRInputSourceArray",
        "XRRenderStateInit",
        "XRReferenceSpace",
        "XRReferenceSpaceType",
        "XRFrameRequestCallback",
        "EventHandler"
      ],
      "XRRenderStateInit": [
        "XRWebGLLayer",
        "XRLayer"
      ],
      "XRRenderState": [
        "XRWebGLLayer"
      ],
      "XRFrame": [
        "XRSession",
        "DOMHighResTimeStamp",
        "XRViewerPose",
        "XRReferenceSpace",
        "XRPose",
        "XRSpace"
      ],
      "XRSpace": [
        "EventTarget"
      ],
      "XRReferenceSpace": [
        "XRSpace",
        "XRReferenceSpace",
        "XRRigidTransform",
        "EventHandler"
      ],
      "XRBoundedReferenceSpace": [
        "XRReferenceSpace",
        "DOMPointReadOnly"
      ],
      "XRView": [
        "XREye",
        "Float32Array",
        "XRRigidTransform"
      ],
      "XRViewport": [],
      "XRRigidTransform": [
        "DOMPointInit",
        "DOMPointReadOnly",
        "Float32Array",
        "XRRigidTransform"
      ],
      "XRPose": [
        "XRRigidTransform",
        "DOMPointReadOnly"
      ],
      "XRViewerPose": [
        "XRPose",
        "XRView"
      ],
      "XRInputSource": [
        "XRHandedness",
        "XRTargetRayMode",
        "XRSpace"
      ],
      "XRInputSourceArray": [
        "XRInputSource"
      ],
      "XRLayer": [
        "EventTarget"
      ],
      "XRWebGLLayerInit": [],
      "XRWebGLLayer": [
        "XRLayer",
        "XRSession",
        "XRWebGLRenderingContext",
        "XRWebGLLayerInit",
        "WebGLFramebuffer",
        "XRViewport",
        "XRView"
      ],
      "WebGLContextAttributes": [],
      "WebGLRenderingContextBase": [],
      "XRSessionEvent": [
        "Event",
        "XRSessionEventInit",
        "XRSession"
      ],
      "XRSessionEventInit": [
        "EventInit",
        "XRSession"
      ],
      "XRInputSourceEvent": [
        "Event",
        "XRInputSourceEventInit",
        "XRFrame",
        "XRInputSource"
      ],
      "XRInputSourceEventInit": [
        "EventInit",
        "XRFrame",
        "XRInputSource"
      ],
      "XRInputSourcesChangeEvent": [
        "Event",
        "XRInputSourcesChangeEventInit",
        "XRSession",
        "XRInputSource"
      ],
      "XRInputSourcesChangeEventInit": [
        "EventInit",
        "XRSession",
        "XRInputSource"
      ],
      "XRReferenceSpaceEvent": [
        "Event",
        "XRReferenceSpaceEventInit",
        "XRReferenceSpace",
        "XRRigidTransform"
      ],
      "XRReferenceSpaceEventInit": [
        "EventInit",
        "XRReferenceSpace",
        "XRRigidTransform"
      ],
      "XRSessionSupportedPermissionDescriptor": [
        "PermissionDescriptor",
        "XRSessionMode"
      ],
      "XRPermissionDescriptor": [
        "PermissionDescriptor",
        "XRSessionMode"
      ],
      "XRPermissionStatus": [
        "PermissionStatus"
      ]
    },
    "externalDependencies": [
      "Navigator",
      "EventTarget",
      "EventHandler",
      "Float32Array",
      "DOMHighResTimeStamp",
      "DOMPointReadOnly",
      "DOMPointInit",
      "WebGLRenderingContext",
      "WebGL2RenderingContext",
      "WebGLFramebuffer",
      "WebGLContextAttributes",
      "WebGLRenderingContextBase",
      "Event",
      "EventInit",
      "PermissionDescriptor",
      "PermissionStatus"
    ],
    "hasObsoleteIdl": false
  },
  "path": "./../webIDL/merged/webxr.json",
  "basename": "webxr.json",
  "name": "webxr",
  "libraryName": "webxr"
}