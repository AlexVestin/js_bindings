{
  "spec": {
    "title": "Service Workers Nightly",
    "url": "https://w3c.github.io/ServiceWorker/"
  },
  "idlparsed": {
    "jsNames": {
      "constructors": {
        "ServiceWorker": [
          "ExtendableEvent",
          "FetchEvent",
          "ExtendableMessageEvent"
        ]
      },
      "functions": {
        "Window": [
          "ServiceWorker",
          "ServiceWorkerRegistration",
          "ServiceWorkerContainer",
          "NavigationPreloadManager",
          "Cache",
          "CacheStorage"
        ],
        "Worker": [
          "ServiceWorker",
          "ServiceWorkerRegistration",
          "ServiceWorkerContainer",
          "NavigationPreloadManager",
          "Cache",
          "CacheStorage"
        ],
        "ServiceWorker": [
          "ServiceWorkerGlobalScope",
          "Client",
          "WindowClient",
          "Clients"
        ]
      }
    },
    "idlNames": {
      "ServiceWorker": {
        "fragment": "[SecureContext, Exposed=(Window,Worker)]\ninterface ServiceWorker : EventTarget {\n  readonly attribute USVString scriptURL;\n  readonly attribute ServiceWorkerState state;\n  undefined postMessage(any message, sequence<object> transfer);\n  undefined postMessage(any message, optional StructuredSerializeOptions options = {});\n\n  // event\n  attribute EventHandler onstatechange;\n};",
        "type": "interface",
        "name": "ServiceWorker",
        "inheritance": "EventTarget",
        "members": [
          {
            "type": "attribute",
            "name": "scriptURL",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "USVString"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "state",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ServiceWorkerState"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "postMessage",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "message",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "any"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "transfer",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "sequence",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "argument-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "object"
                    }
                  ]
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "postMessage",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "message",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "any"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "StructuredSerializeOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "attribute",
            "name": "onstatechange",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier-list",
              "value": [
                {
                  "value": "Window"
                },
                {
                  "value": "Worker"
                }
              ]
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe  interface of the Service Worker API provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique  object.\nA  object is available in the [ServiceWorkerRegistration.active] property, and the [ServiceWorkerContainer.controller] property — this is a service worker that has been activated and is controlling the page (the service worker has been successfully registered, and the controlled page has been reloaded.)\nThe  interface is dispatched a set of lifecycle events — [install] and [activate] — and functional events including [fetch]. A  object has an associated [ServiceWorker.state], related to its lifecycle.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      ServiceWorker\n    \n  ",
        "mdn": "/en-US/docs/Web/API/ServiceWorker"
      },
      "ServiceWorkerState": {
        "fragment": "enum ServiceWorkerState {\n  \"parsed\",\n  \"installing\",\n  \"installed\",\n  \"activating\",\n  \"activated\",\n  \"redundant\"\n};",
        "type": "enum",
        "name": "ServiceWorkerState",
        "values": [
          {
            "type": "enum-value",
            "value": "parsed"
          },
          {
            "type": "enum-value",
            "value": "installing"
          },
          {
            "type": "enum-value",
            "value": "installed"
          },
          {
            "type": "enum-value",
            "value": "activating"
          },
          {
            "type": "enum-value",
            "value": "activated"
          },
          {
            "type": "enum-value",
            "value": "redundant"
          }
        ],
        "extAttrs": []
      },
      "ServiceWorkerRegistration": {
        "fragment": "[SecureContext, Exposed=(Window,Worker)]\ninterface ServiceWorkerRegistration : EventTarget {\n  readonly attribute ServiceWorker? installing;\n  readonly attribute ServiceWorker? waiting;\n  readonly attribute ServiceWorker? active;\n  [SameObject] readonly attribute NavigationPreloadManager navigationPreload;\n\n  readonly attribute USVString scope;\n  readonly attribute ServiceWorkerUpdateViaCache updateViaCache;\n\n  [NewObject] Promise<undefined> update();\n  [NewObject] Promise<boolean> unregister();\n\n  // event\n  attribute EventHandler onupdatefound;\n};",
        "type": "interface",
        "name": "ServiceWorkerRegistration",
        "inheritance": "EventTarget",
        "members": [
          {
            "type": "attribute",
            "name": "installing",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "ServiceWorker"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "waiting",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "ServiceWorker"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "active",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "ServiceWorker"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "navigationPreload",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "NavigationPreloadManager"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "scope",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "USVString"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "updateViaCache",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ServiceWorkerUpdateViaCache"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "update",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "unregister",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "boolean"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "attribute",
            "name": "onupdatefound",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier-list",
              "value": [
                {
                  "value": "Window"
                },
                {
                  "value": "Worker"
                }
              ]
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface of the Service Worker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin.\nThe lifetime of a service worker registration is beyond that of the  objects that represent them within the lifetime of their corresponding service worker clients. The browser maintains a persistent list of active  objects.\n\n  Note: This feature is available in Web Workers.\n\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      ServiceWorkerRegistration\n    \n  ",
        "mdn": "/en-US/docs/Web/API/ServiceWorkerRegistration"
      },
      "ServiceWorkerUpdateViaCache": {
        "fragment": "enum ServiceWorkerUpdateViaCache {\n  \"imports\",\n  \"all\",\n  \"none\"\n};",
        "type": "enum",
        "name": "ServiceWorkerUpdateViaCache",
        "values": [
          {
            "type": "enum-value",
            "value": "imports"
          },
          {
            "type": "enum-value",
            "value": "all"
          },
          {
            "type": "enum-value",
            "value": "none"
          }
        ],
        "extAttrs": []
      },
      "ServiceWorkerContainer": {
        "fragment": "[SecureContext, Exposed=(Window,Worker)]\ninterface ServiceWorkerContainer : EventTarget {\n  readonly attribute ServiceWorker? controller;\n  readonly attribute Promise<ServiceWorkerRegistration> ready;\n\n  [NewObject] Promise<ServiceWorkerRegistration> register(USVString scriptURL, optional RegistrationOptions options = {});\n\n  [NewObject] Promise<(ServiceWorkerRegistration or undefined)> getRegistration(optional USVString clientURL = \"\");\n  [NewObject] Promise<FrozenArray<ServiceWorkerRegistration>> getRegistrations();\n\n  undefined startMessages();\n\n  // events\n  attribute EventHandler oncontrollerchange;\n  attribute EventHandler onmessage; // event.source of message events is ServiceWorker object\n  attribute EventHandler onmessageerror;\n};",
        "type": "interface",
        "name": "ServiceWorkerContainer",
        "inheritance": "EventTarget",
        "members": [
          {
            "type": "attribute",
            "name": "controller",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "ServiceWorker"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "ready",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "attribute-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "ServiceWorkerRegistration"
                }
              ]
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "register",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "ServiceWorkerRegistration"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "scriptURL",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "USVString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "RegistrationOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "getRegistration",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": true,
                  "idlType": [
                    {
                      "type": null,
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "ServiceWorkerRegistration"
                    },
                    {
                      "type": null,
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "undefined"
                    }
                  ]
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "clientURL",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "USVString"
                },
                "default": {
                  "type": "string",
                  "value": ""
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "getRegistrations",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "FrozenArray",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "return-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "ServiceWorkerRegistration"
                    }
                  ]
                }
              ]
            },
            "arguments": [],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "startMessages",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "attribute",
            "name": "oncontrollerchange",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "onmessage",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "onmessageerror",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier-list",
              "value": [
                {
                  "value": "Window"
                },
                {
                  "value": "Worker"
                }
              ]
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface of the Service Worker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.\nMost importantly, it exposes the [ServiceWorkerContainer.register()] method used to register service workers, and the [ServiceWorkerContainer.controller] property used to determine whether or not the current page is actively controlled.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      ServiceWorkerContainer\n    \n  ",
        "mdn": "/en-US/docs/Web/API/ServiceWorkerContainer"
      },
      "RegistrationOptions": {
        "fragment": "dictionary RegistrationOptions {\n  USVString scope;\n  WorkerType type = \"classic\";\n  ServiceWorkerUpdateViaCache updateViaCache = \"imports\";\n};",
        "type": "dictionary",
        "name": "RegistrationOptions",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "scope",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "USVString"
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "type",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "WorkerType"
            },
            "default": {
              "type": "string",
              "value": "classic"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "updateViaCache",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ServiceWorkerUpdateViaCache"
            },
            "default": {
              "type": "string",
              "value": "imports"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "NavigationPreloadManager": {
        "fragment": "[SecureContext, Exposed=(Window,Worker)]\ninterface NavigationPreloadManager {\n  Promise<undefined> enable();\n  Promise<undefined> disable();\n  Promise<undefined> setHeaderValue(ByteString value);\n  Promise<NavigationPreloadState> getState();\n};",
        "type": "interface",
        "name": "NavigationPreloadManager",
        "inheritance": null,
        "members": [
          {
            "type": "operation",
            "name": "enable",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "disable",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "setHeaderValue",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "value",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "ByteString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "getState",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "NavigationPreloadState"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier-list",
              "value": [
                {
                  "value": "Window"
                },
                {
                  "value": "Worker"
                }
              ]
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface of the Service Worker API provides methods for managing the preloading of resources with a service worker.",
        "mdn": "/en-US/docs/Web/API/NavigationPreloadManager"
      },
      "NavigationPreloadState": {
        "fragment": "dictionary NavigationPreloadState {\n  boolean enabled = false;\n  ByteString headerValue;\n};",
        "type": "dictionary",
        "name": "NavigationPreloadState",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "enabled",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": {
              "type": "boolean",
              "value": false
            },
            "required": false
          },
          {
            "type": "field",
            "name": "headerValue",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ByteString"
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "ServiceWorkerGlobalScope": {
        "fragment": "[Global=(Worker,ServiceWorker), Exposed=ServiceWorker]\ninterface ServiceWorkerGlobalScope : WorkerGlobalScope {\n  [SameObject] readonly attribute Clients clients;\n  [SameObject] readonly attribute ServiceWorkerRegistration registration;\n  [SameObject] readonly attribute ServiceWorker serviceWorker;\n\n  [NewObject] Promise<undefined> skipWaiting();\n\n  attribute EventHandler oninstall;\n  attribute EventHandler onactivate;\n  attribute EventHandler onfetch;\n\n  attribute EventHandler onmessage;\n  attribute EventHandler onmessageerror;\n};",
        "type": "interface",
        "name": "ServiceWorkerGlobalScope",
        "inheritance": "WorkerGlobalScope",
        "members": [
          {
            "type": "attribute",
            "name": "clients",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "Clients"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "registration",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ServiceWorkerRegistration"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "serviceWorker",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ServiceWorker"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "skipWaiting",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "attribute",
            "name": "oninstall",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "onactivate",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "onfetch",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "onmessage",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "onmessageerror",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Global",
            "rhs": {
              "type": "identifier-list",
              "value": [
                {
                  "value": "Worker"
                },
                {
                  "value": "ServiceWorker"
                }
              ]
            },
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "ServiceWorker"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface of the Service Worker API represents the global execution context of a service worker.\nDevelopers should keep in mind that the ServiceWorker state is not persisted across the termination/restart cycle, so each event handler should assume it's being invoked with a bare, default global state.\nOnce successfully registered, a service worker can and will be terminated when idle to conserve memory and processor power. An active service worker is automatically restarted to respond to events, such as [ServiceWorkerGlobalScope.onfetch] or [ServiceWorkerGlobalScope.onmessage].\nAdditionally, synchronous requests are not allowed from within a service worker — only asynchronous requests, like those initiated via the [fetch()] method, can be used.\nThis interface inherits from the [WorkerGlobalScope] interface, and its parent [EventTarget].\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      WorkerGlobalScope\n    \n  \n  \n    \n    \n      ServiceWorkerGlobalScope\n    \n  ",
        "mdn": "/en-US/docs/Web/API/ServiceWorkerGlobalScope"
      },
      "Client": {
        "fragment": "[Exposed=ServiceWorker]\ninterface Client {\n  readonly attribute USVString url;\n  readonly attribute FrameType frameType;\n  readonly attribute DOMString id;\n  readonly attribute ClientType type;\n  undefined postMessage(any message, sequence<object> transfer);\n  undefined postMessage(any message, optional StructuredSerializeOptions options = {});\n};",
        "type": "interface",
        "name": "Client",
        "inheritance": null,
        "members": [
          {
            "type": "attribute",
            "name": "url",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "USVString"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "frameType",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "FrameType"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "id",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMString"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "type",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ClientType"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "postMessage",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "message",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "any"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "transfer",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "sequence",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "argument-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "object"
                    }
                  ]
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "postMessage",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "message",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "any"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "StructuredSerializeOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "ServiceWorker"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": true,
        "desc": "The  interface represents an executable context such as a [Worker], or a [SharedWorker]. [Window] clients are represented by the more-specific [WindowClient]. You can get /[WindowClient] objects from methods such as [Clients.matchAll()] and [Clients.get()].",
        "mdn": "/en-US/docs/Web/API/Client"
      },
      "WindowClient": {
        "fragment": "[Exposed=ServiceWorker]\ninterface WindowClient : Client {\n  readonly attribute DocumentVisibilityState visibilityState;\n  readonly attribute boolean focused;\n  [SameObject] readonly attribute FrozenArray<USVString> ancestorOrigins;\n  [NewObject] Promise<WindowClient> focus();\n  [NewObject] Promise<WindowClient?> navigate(USVString url);\n};",
        "type": "interface",
        "name": "WindowClient",
        "inheritance": "Client",
        "members": [
          {
            "type": "attribute",
            "name": "visibilityState",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DocumentVisibilityState"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "focused",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "ancestorOrigins",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "FrozenArray",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "attribute-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "USVString"
                }
              ]
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "focus",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "WindowClient"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "navigate",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": true,
                  "union": false,
                  "idlType": "WindowClient"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "url",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "USVString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "ServiceWorker"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": true,
        "desc": "The  interface of the ServiceWorker API represents the scope of a service worker client that is a document in a browsing context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources.\n  \n    \n    \n      Client\n    \n  \n  \n    \n    \n      WindowClient\n    \n  ",
        "mdn": "/en-US/docs/Web/API/WindowClient"
      },
      "FrameType": {
        "fragment": "enum FrameType {\n  \"auxiliary\",\n  \"top-level\",\n  \"nested\",\n  \"none\"\n};",
        "type": "enum",
        "name": "FrameType",
        "values": [
          {
            "type": "enum-value",
            "value": "auxiliary"
          },
          {
            "type": "enum-value",
            "value": "top-level"
          },
          {
            "type": "enum-value",
            "value": "nested"
          },
          {
            "type": "enum-value",
            "value": "none"
          }
        ],
        "extAttrs": []
      },
      "Clients": {
        "fragment": "[Exposed=ServiceWorker]\ninterface Clients {\n  // The objects returned will be new instances every time\n  [NewObject] Promise<(Client or undefined)> get(DOMString id);\n  [NewObject] Promise<FrozenArray<Client>> matchAll(optional ClientQueryOptions options = {});\n  [NewObject] Promise<WindowClient?> openWindow(USVString url);\n  [NewObject] Promise<undefined> claim();\n};",
        "type": "interface",
        "name": "Clients",
        "inheritance": null,
        "members": [
          {
            "type": "operation",
            "name": "get",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": true,
                  "idlType": [
                    {
                      "type": null,
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "Client"
                    },
                    {
                      "type": null,
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "undefined"
                    }
                  ]
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "id",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "matchAll",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "FrozenArray",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "return-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "Client"
                    }
                  ]
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "ClientQueryOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "openWindow",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": true,
                  "union": false,
                  "idlType": "WindowClient"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "url",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "USVString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "claim",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "ServiceWorker"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": true,
        "desc": "The  interface provides access to [Client] objects. Access it via [[self].clients] within a service worker.",
        "mdn": "/en-US/docs/Web/API/Clients"
      },
      "ClientQueryOptions": {
        "fragment": "dictionary ClientQueryOptions {\n  boolean includeUncontrolled = false;\n  ClientType type = \"window\";\n};",
        "type": "dictionary",
        "name": "ClientQueryOptions",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "includeUncontrolled",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": {
              "type": "boolean",
              "value": false
            },
            "required": false
          },
          {
            "type": "field",
            "name": "type",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ClientType"
            },
            "default": {
              "type": "string",
              "value": "window"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "ClientType": {
        "fragment": "enum ClientType {\n  \"window\",\n  \"worker\",\n  \"sharedworker\",\n  \"all\"\n};",
        "type": "enum",
        "name": "ClientType",
        "values": [
          {
            "type": "enum-value",
            "value": "window"
          },
          {
            "type": "enum-value",
            "value": "worker"
          },
          {
            "type": "enum-value",
            "value": "sharedworker"
          },
          {
            "type": "enum-value",
            "value": "all"
          }
        ],
        "extAttrs": []
      },
      "ExtendableEvent": {
        "fragment": "[Exposed=ServiceWorker]\ninterface ExtendableEvent : Event {\n  constructor(DOMString type, optional ExtendableEventInit eventInitDict = {});\n  undefined waitUntil(Promise<any> f);\n};",
        "type": "interface",
        "name": "ExtendableEvent",
        "inheritance": "Event",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "type",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "eventInitDict",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "ExtendableEventInit"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "operation",
            "name": "waitUntil",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "f",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "Promise",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "argument-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "any"
                    }
                  ]
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "ServiceWorker"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": true,
        "desc": "The  interface extends the lifetime of the [install] and [activate] events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like [FetchEvent]) are not dispatched until it upgrades database schemas and deletes the outdated cache entries.\nIf [waitUntil()] is called outside of the  handler, the browser should throw an [InvalidStateError]; note also that multiple calls will stack up, and the resulting promises will be added to the list of extend lifetime promises.\n\n  Note: The behavior described in the above paragraph was fixed in Firefox 43 (see bug 1180274.)\n\nThis interface inherits from the [Event] interface.\n  \n    \n    \n      Event\n    \n  \n  \n    \n    \n      ExtendableEvent\n    \n  \n\n  Note: This interface is only available when the global scope is a [ServiceWorkerGlobalScope]. It is not available when it is a [Window], or the scope of another kind of worker.\n",
        "mdn": "/en-US/docs/Web/API/ExtendableEvent"
      },
      "ExtendableEventInit": {
        "fragment": "dictionary ExtendableEventInit : EventInit {\n  // Defined for the forward compatibility across the derived events\n};",
        "type": "dictionary",
        "name": "ExtendableEventInit",
        "inheritance": "EventInit",
        "members": [],
        "extAttrs": [],
        "partial": false
      },
      "FetchEvent": {
        "fragment": "[Exposed=ServiceWorker]\ninterface FetchEvent : ExtendableEvent {\n  constructor(DOMString type, FetchEventInit eventInitDict);\n  [SameObject] readonly attribute Request request;\n  readonly attribute Promise<any> preloadResponse;\n  readonly attribute DOMString clientId;\n  readonly attribute DOMString resultingClientId;\n  readonly attribute DOMString replacesClientId;\n  readonly attribute Promise<undefined> handled;\n\n  undefined respondWith(Promise<Response> r);\n};",
        "type": "interface",
        "name": "FetchEvent",
        "inheritance": "ExtendableEvent",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "type",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "eventInitDict",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "FetchEventInit"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "request",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "Request"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "preloadResponse",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "attribute-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "any"
                }
              ]
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "clientId",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMString"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "resultingClientId",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMString"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "replacesClientId",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMString"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "handled",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "attribute-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "respondWith",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "r",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "Promise",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "argument-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "Response"
                    }
                  ]
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "ServiceWorker"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "This is the event type for [fetch] events dispatched on the service worker global scope. It contains information about the fetch, including the request and how the receiver will treat the response. It provides the [event.respondWith()] method, which allows us to provide a response to this fetch.\n  \n    \n    \n      Event\n    \n  \n  \n    \n    \n      ExtendableEvent\n    \n  \n  \n    \n    \n      FetchEvent\n    \n  ",
        "mdn": "/en-US/docs/Web/API/FetchEvent"
      },
      "FetchEventInit": {
        "fragment": "dictionary FetchEventInit : ExtendableEventInit {\n  required Request request;\n  Promise<any> preloadResponse;\n  DOMString clientId = \"\";\n  DOMString resultingClientId = \"\";\n  DOMString replacesClientId = \"\";\n  Promise<undefined> handled;\n};",
        "type": "dictionary",
        "name": "FetchEventInit",
        "inheritance": "ExtendableEventInit",
        "members": [
          {
            "type": "field",
            "name": "request",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "Request"
            },
            "default": null,
            "required": true
          },
          {
            "type": "field",
            "name": "preloadResponse",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "any"
                }
              ]
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "clientId",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMString"
            },
            "default": {
              "type": "string",
              "value": ""
            },
            "required": false
          },
          {
            "type": "field",
            "name": "resultingClientId",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMString"
            },
            "default": {
              "type": "string",
              "value": ""
            },
            "required": false
          },
          {
            "type": "field",
            "name": "replacesClientId",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMString"
            },
            "default": {
              "type": "string",
              "value": ""
            },
            "required": false
          },
          {
            "type": "field",
            "name": "handled",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "ExtendableMessageEvent": {
        "fragment": "[Exposed=ServiceWorker]\ninterface ExtendableMessageEvent : ExtendableEvent {\n  constructor(DOMString type, optional ExtendableMessageEventInit eventInitDict = {});\n  readonly attribute any data;\n  readonly attribute USVString origin;\n  readonly attribute DOMString lastEventId;\n  [SameObject] readonly attribute (Client or ServiceWorker or MessagePort)? source;\n  readonly attribute FrozenArray<MessagePort> ports;\n};",
        "type": "interface",
        "name": "ExtendableMessageEvent",
        "inheritance": "ExtendableEvent",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "type",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "eventInitDict",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "ExtendableMessageEventInit"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "data",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "any"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "origin",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "USVString"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "lastEventId",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMString"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "source",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": true,
              "idlType": [
                {
                  "type": null,
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Client"
                },
                {
                  "type": null,
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "ServiceWorker"
                },
                {
                  "type": null,
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "MessagePort"
                }
              ]
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "ports",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "FrozenArray",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "attribute-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "MessagePort"
                }
              ]
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "ServiceWorker"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": true,
        "desc": "The  interface of the Service Worker API represents the event object of a [message] event fired on a service worker (when a message is received on the [ServiceWorkerGlobalScope] from another context) — extends the lifetime of such events.\nThis interface inherits from the [ExtendableEvent] interface.\n  \n    \n    \n      Event\n    \n  \n  \n    \n    \n      ExtendableEvent\n    \n  \n  \n    \n    \n      ExtendableMessageEvent\n    \n  ",
        "mdn": "/en-US/docs/Web/API/ExtendableMessageEvent"
      },
      "ExtendableMessageEventInit": {
        "fragment": "dictionary ExtendableMessageEventInit : ExtendableEventInit {\n  any data = null;\n  USVString origin = \"\";\n  DOMString lastEventId = \"\";\n  (Client or ServiceWorker or MessagePort)? source = null;\n  sequence<MessagePort> ports = [];\n};",
        "type": "dictionary",
        "name": "ExtendableMessageEventInit",
        "inheritance": "ExtendableEventInit",
        "members": [
          {
            "type": "field",
            "name": "data",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "any"
            },
            "default": {
              "type": "null"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "origin",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "USVString"
            },
            "default": {
              "type": "string",
              "value": ""
            },
            "required": false
          },
          {
            "type": "field",
            "name": "lastEventId",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMString"
            },
            "default": {
              "type": "string",
              "value": ""
            },
            "required": false
          },
          {
            "type": "field",
            "name": "source",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": true,
              "idlType": [
                {
                  "type": null,
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Client"
                },
                {
                  "type": null,
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "ServiceWorker"
                },
                {
                  "type": null,
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "MessagePort"
                }
              ]
            },
            "default": {
              "type": "null"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "ports",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "sequence",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "MessagePort"
                }
              ]
            },
            "default": {
              "type": "sequence",
              "value": []
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "Cache": {
        "fragment": "[SecureContext, Exposed=(Window,Worker)]\ninterface Cache {\n  [NewObject] Promise<(Response or undefined)> match(RequestInfo request, optional CacheQueryOptions options = {});\n  [NewObject] Promise<FrozenArray<Response>> matchAll(optional RequestInfo request, optional CacheQueryOptions options = {});\n  [NewObject] Promise<undefined> add(RequestInfo request);\n  [NewObject] Promise<undefined> addAll(sequence<RequestInfo> requests);\n  [NewObject] Promise<undefined> put(RequestInfo request, Response response);\n  [NewObject] Promise<boolean> delete(RequestInfo request, optional CacheQueryOptions options = {});\n  [NewObject] Promise<FrozenArray<Request>> keys(optional RequestInfo request, optional CacheQueryOptions options = {});\n};",
        "type": "interface",
        "name": "Cache",
        "inheritance": null,
        "members": [
          {
            "type": "operation",
            "name": "match",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": true,
                  "idlType": [
                    {
                      "type": null,
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "Response"
                    },
                    {
                      "type": null,
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "undefined"
                    }
                  ]
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "request",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "RequestInfo"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "CacheQueryOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "matchAll",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "FrozenArray",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "return-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "Response"
                    }
                  ]
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "request",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "RequestInfo"
                },
                "default": null,
                "optional": true,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "CacheQueryOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "add",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "request",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "RequestInfo"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "addAll",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "requests",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "sequence",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "argument-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "RequestInfo"
                    }
                  ]
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "put",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "request",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "RequestInfo"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "response",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Response"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "delete",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "boolean"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "request",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "RequestInfo"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "CacheQueryOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "keys",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "FrozenArray",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "return-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "Request"
                    }
                  ]
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "request",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "RequestInfo"
                },
                "default": null,
                "optional": true,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "CacheQueryOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier-list",
              "value": [
                {
                  "value": "Window"
                },
                {
                  "value": "Worker"
                }
              ]
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": true,
        "desc": "The  interface provides a persistent storage mechanism for [[Request]] / [[Response]] object pairs that are cached in long lived memory. How long a Cache lives is browser dependent, but a single origin's scripts can typically rely on the presence of a previously populated Cache. Note that the  interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.\nAn origin can have multiple, named  objects. You are responsible for implementing how your script (e.g. in a [ServiceWorker]) handles  updates. Items in a  do not get updated unless explicitly requested; they don’t expire unless deleted. Use [CacheStorage.open()] to open a specific named  object and then call any of the  methods to maintain the .\nYou are also responsible for periodically purging cache entries. Each browser has a hard limit on the amount of cache storage that a given origin can use. Cache quota usage estimates are available via the [StorageManager.estimate()] method. The browser does its best to manage disk space, but it may delete the Cache storage for an origin. The browser will generally delete all of the data for an origin or none of the data for an origin. Make sure to version caches by name and use the caches only from the version of the script that they can safely operate on. See Deleting old caches for more information.\n\n  Note: The key matching algorithm depends on the VARY header in the value. So matching a new key requires looking at both key and value for entries in the Cache.\n\n\n  Note: The caching API doesn't honor HTTP caching headers.\n\n  Note: This feature is available in Web Workers\n\nSecure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "mdn": "/en-US/docs/Web/API/Cache"
      },
      "CacheQueryOptions": {
        "fragment": "dictionary CacheQueryOptions {\n  boolean ignoreSearch = false;\n  boolean ignoreMethod = false;\n  boolean ignoreVary = false;\n};",
        "type": "dictionary",
        "name": "CacheQueryOptions",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "ignoreSearch",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": {
              "type": "boolean",
              "value": false
            },
            "required": false
          },
          {
            "type": "field",
            "name": "ignoreMethod",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": {
              "type": "boolean",
              "value": false
            },
            "required": false
          },
          {
            "type": "field",
            "name": "ignoreVary",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": {
              "type": "boolean",
              "value": false
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "CacheStorage": {
        "fragment": "[SecureContext, Exposed=(Window,Worker)]\ninterface CacheStorage {\n  [NewObject] Promise<(Response or undefined)> match(RequestInfo request, optional MultiCacheQueryOptions options = {});\n  [NewObject] Promise<boolean> has(DOMString cacheName);\n  [NewObject] Promise<Cache> open(DOMString cacheName);\n  [NewObject] Promise<boolean> delete(DOMString cacheName);\n  [NewObject] Promise<sequence<DOMString>> keys();\n};",
        "type": "interface",
        "name": "CacheStorage",
        "inheritance": null,
        "members": [
          {
            "type": "operation",
            "name": "match",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": true,
                  "idlType": [
                    {
                      "type": null,
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "Response"
                    },
                    {
                      "type": null,
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "undefined"
                    }
                  ]
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "request",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "RequestInfo"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "MultiCacheQueryOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "has",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "boolean"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "cacheName",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "open",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Cache"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "cacheName",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "delete",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "boolean"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "cacheName",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          },
          {
            "type": "operation",
            "name": "keys",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "sequence",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "return-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "DOMString"
                    }
                  ]
                }
              ]
            },
            "arguments": [],
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "NewObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier-list",
              "value": [
                {
                  "value": "Window"
                },
                {
                  "value": "Worker"
                }
              ]
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": true,
        "desc": "The  interface represents the storage for [Cache] objects.\nThe interface:\n\n  Provides a master directory of all the named caches that can be accessed by a [ServiceWorker] or other type of worker or [window] scope (you’re not limited to only using it with service workers).\n    \n      Note: Chrome and Safari only expose `CacheStorage` to the windowed context over HTTPS. [caches] will be undefined unless an SSL certificate is configured.\n    \n  \n  Maintains a mapping of string names to corresponding [Cache] objects.\n\nUse [CacheStorage.open()] to obtain a [Cache] instance.\nUse [CacheStorage.match()] to check if a given [Request] is a key in any of the [Cache] objects that the  object tracks.\nYou can access  through the global [caches] property.\n\n  Note:  always rejects with a [SecurityError] on untrusted origins (i.e. those that aren't using HTTPS, although this definition will likely become more complex in the future.) When testing on Firefox, you can get around this by checking the Enable Service Workers over HTTP (when toolbox is open) option in the Firefox Devtools options/gear menu. Furthermore, because  requires file-system access, it may be unavailable in private mode in Firefox.\n\n\n  Note: [CacheStorage.match()] is a convenience method. Equivalent functionality to match a cache entry can be implemented by returning an array of cache names from [CacheStorage.keys()], opening each cache with [CacheStorage.open()], and matching the one you want with [Cache.match()].\n\n  Note: This feature is available in Web Workers\n\nSecure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "mdn": "/en-US/docs/Web/API/CacheStorage"
      },
      "MultiCacheQueryOptions": {
        "fragment": "dictionary MultiCacheQueryOptions : CacheQueryOptions {\n  DOMString cacheName;\n};",
        "type": "dictionary",
        "name": "MultiCacheQueryOptions",
        "inheritance": "CacheQueryOptions",
        "members": [
          {
            "type": "field",
            "name": "cacheName",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMString"
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      }
    },
    "idlExtendedNames": {
      "ServiceWorker": [
        {
          "fragment": "ServiceWorker includes AbstractWorker;",
          "type": "includes",
          "extAttrs": [],
          "target": "ServiceWorker",
          "includes": "AbstractWorker"
        }
      ],
      "Navigator": [
        {
          "fragment": "partial interface Navigator {\n  [SecureContext, SameObject] readonly attribute ServiceWorkerContainer serviceWorker;\n};",
          "type": "interface",
          "name": "Navigator",
          "inheritance": null,
          "members": [
            {
              "type": "attribute",
              "name": "serviceWorker",
              "idlType": {
                "type": "attribute-type",
                "extAttrs": [],
                "generic": "",
                "nullable": false,
                "union": false,
                "idlType": "ServiceWorkerContainer"
              },
              "extAttrs": [
                {
                  "type": "extended-attribute",
                  "name": "SecureContext",
                  "rhs": null,
                  "arguments": []
                },
                {
                  "type": "extended-attribute",
                  "name": "SameObject",
                  "rhs": null,
                  "arguments": []
                }
              ],
              "special": "",
              "readonly": true
            }
          ],
          "extAttrs": [],
          "partial": true
        }
      ],
      "WorkerNavigator": [
        {
          "fragment": "partial interface WorkerNavigator {\n  [SecureContext, SameObject] readonly attribute ServiceWorkerContainer serviceWorker;\n};",
          "type": "interface",
          "name": "WorkerNavigator",
          "inheritance": null,
          "members": [
            {
              "type": "attribute",
              "name": "serviceWorker",
              "idlType": {
                "type": "attribute-type",
                "extAttrs": [],
                "generic": "",
                "nullable": false,
                "union": false,
                "idlType": "ServiceWorkerContainer"
              },
              "extAttrs": [
                {
                  "type": "extended-attribute",
                  "name": "SecureContext",
                  "rhs": null,
                  "arguments": []
                },
                {
                  "type": "extended-attribute",
                  "name": "SameObject",
                  "rhs": null,
                  "arguments": []
                }
              ],
              "special": "",
              "readonly": true
            }
          ],
          "extAttrs": [],
          "partial": true
        }
      ],
      "WindowOrWorkerGlobalScope": [
        {
          "fragment": "partial interface mixin WindowOrWorkerGlobalScope {\n  [SecureContext, SameObject] readonly attribute CacheStorage caches;\n};",
          "type": "interface mixin",
          "name": "WindowOrWorkerGlobalScope",
          "inheritance": null,
          "members": [
            {
              "type": "attribute",
              "name": "caches",
              "idlType": {
                "type": "attribute-type",
                "extAttrs": [],
                "generic": "",
                "nullable": false,
                "union": false,
                "idlType": "CacheStorage"
              },
              "extAttrs": [
                {
                  "type": "extended-attribute",
                  "name": "SecureContext",
                  "rhs": null,
                  "arguments": []
                },
                {
                  "type": "extended-attribute",
                  "name": "SameObject",
                  "rhs": null,
                  "arguments": []
                }
              ],
              "special": "",
              "readonly": true
            }
          ],
          "extAttrs": [],
          "partial": true
        }
      ]
    },
    "globals": {
      "Worker": [
        "ServiceWorkerGlobalScope"
      ],
      "ServiceWorker": [
        "ServiceWorkerGlobalScope"
      ]
    },
    "exposed": {
      "Window": [
        "ServiceWorker",
        "ServiceWorkerRegistration",
        "ServiceWorkerContainer",
        "NavigationPreloadManager",
        "Cache",
        "CacheStorage"
      ],
      "Worker": [
        "ServiceWorker",
        "ServiceWorkerRegistration",
        "ServiceWorkerContainer",
        "NavigationPreloadManager",
        "Cache",
        "CacheStorage"
      ],
      "ServiceWorker": [
        "ServiceWorkerGlobalScope",
        "Client",
        "WindowClient",
        "Clients",
        "ExtendableEvent",
        "FetchEvent",
        "ExtendableMessageEvent"
      ]
    },
    "dependencies": {
      "ServiceWorker": [
        "EventTarget",
        "ServiceWorkerState",
        "StructuredSerializeOptions",
        "EventHandler",
        "AbstractWorker"
      ],
      "ServiceWorkerRegistration": [
        "EventTarget",
        "ServiceWorker",
        "NavigationPreloadManager",
        "ServiceWorkerUpdateViaCache",
        "EventHandler"
      ],
      "Navigator": [
        "ServiceWorkerContainer"
      ],
      "WorkerNavigator": [
        "ServiceWorkerContainer"
      ],
      "ServiceWorkerContainer": [
        "EventTarget",
        "ServiceWorker",
        "ServiceWorkerRegistration",
        "RegistrationOptions",
        "EventHandler"
      ],
      "RegistrationOptions": [
        "WorkerType",
        "ServiceWorkerUpdateViaCache"
      ],
      "NavigationPreloadManager": [
        "NavigationPreloadState"
      ],
      "NavigationPreloadState": [],
      "ServiceWorkerGlobalScope": [
        "WorkerGlobalScope",
        "Clients",
        "ServiceWorkerRegistration",
        "ServiceWorker",
        "EventHandler"
      ],
      "Client": [
        "FrameType",
        "ClientType",
        "StructuredSerializeOptions"
      ],
      "WindowClient": [
        "Client",
        "DocumentVisibilityState",
        "WindowClient"
      ],
      "Clients": [
        "Client",
        "ClientQueryOptions",
        "WindowClient"
      ],
      "ClientQueryOptions": [
        "ClientType"
      ],
      "ExtendableEvent": [
        "Event",
        "ExtendableEventInit"
      ],
      "ExtendableEventInit": [
        "EventInit"
      ],
      "FetchEvent": [
        "ExtendableEvent",
        "FetchEventInit",
        "Request",
        "Response"
      ],
      "FetchEventInit": [
        "ExtendableEventInit",
        "Request"
      ],
      "ExtendableMessageEvent": [
        "ExtendableEvent",
        "ExtendableMessageEventInit",
        "Client",
        "ServiceWorker",
        "MessagePort"
      ],
      "ExtendableMessageEventInit": [
        "ExtendableEventInit",
        "Client",
        "ServiceWorker",
        "MessagePort"
      ],
      "WindowOrWorkerGlobalScope": [
        "CacheStorage"
      ],
      "Cache": [
        "Response",
        "RequestInfo",
        "CacheQueryOptions",
        "Request"
      ],
      "CacheQueryOptions": [],
      "CacheStorage": [
        "Response",
        "RequestInfo",
        "MultiCacheQueryOptions",
        "Cache"
      ],
      "MultiCacheQueryOptions": [
        "CacheQueryOptions"
      ]
    },
    "externalDependencies": [
      "EventTarget",
      "StructuredSerializeOptions",
      "EventHandler",
      "Navigator",
      "WorkerNavigator",
      "WorkerType",
      "WorkerGlobalScope",
      "DocumentVisibilityState",
      "Event",
      "EventInit",
      "Request",
      "Response",
      "MessagePort",
      "WindowOrWorkerGlobalScope",
      "RequestInfo"
    ],
    "hasObsoleteIdl": false
  },
  "path": "./../webIDL/merged/service-workers.json",
  "basename": "service-workers.json",
  "name": "service-workers",
  "libraryName": "service_workers"
}