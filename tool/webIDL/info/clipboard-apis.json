{
  "spec": {
    "title": "Clipboard API and events",
    "url": "https://w3c.github.io/clipboard-apis/"
  },
  "idlparsed": {
    "jsNames": {
      "constructors": {
        "Window": [
          "ClipboardEvent",
          "ClipboardItem"
        ]
      },
      "functions": {
        "Window": [
          "Clipboard"
        ]
      }
    },
    "idlNames": {
      "ClipboardEventInit": {
        "fragment": "dictionary ClipboardEventInit : EventInit {\n  DataTransfer? clipboardData = null;\n};",
        "type": "dictionary",
        "name": "ClipboardEventInit",
        "inheritance": "EventInit",
        "members": [
          {
            "type": "field",
            "name": "clipboardData",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "DataTransfer"
            },
            "default": {
              "type": "null"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "ClipboardEvent": {
        "fragment": "[Exposed=Window]\ninterface ClipboardEvent : Event {\n  constructor(DOMString type, optional ClipboardEventInit eventInitDict = {});\n  readonly attribute DataTransfer? clipboardData;\n};",
        "type": "interface",
        "name": "ClipboardEvent",
        "inheritance": "Event",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "type",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "eventInitDict",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "ClipboardEventInit"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "clipboardData",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "DataTransfer"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": true,
        "desc": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\nThe  interface represents events providing information related to modification of the clipboard, that is [cut], [copy], and [paste] events.\n  \n    \n    \n      Event\n    \n  \n  \n    \n    \n      ClipboardEvent\n    \n  ",
        "mdn": "/en-US/docs/Web/API/ClipboardEvent"
      },
      "ClipboardItemData": {
        "fragment": "typedef Promise<(DOMString or Blob)> ClipboardItemData;",
        "type": "typedef",
        "name": "ClipboardItemData",
        "idlType": {
          "type": "typedef-type",
          "extAttrs": [],
          "generic": "Promise",
          "nullable": false,
          "union": false,
          "idlType": [
            {
              "type": "typedef-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": true,
              "idlType": [
                {
                  "type": null,
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                {
                  "type": null,
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Blob"
                }
              ]
            }
          ]
        },
        "extAttrs": []
      },
      "ClipboardItem": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface ClipboardItem {\n  constructor(record<DOMString, ClipboardItemData> items,\n              optional ClipboardItemOptions options = {});\n\n  readonly attribute PresentationStyle presentationStyle;\n  readonly attribute FrozenArray<DOMString> types;\n\n  Promise<Blob> getType(DOMString type);\n};",
        "type": "interface",
        "name": "ClipboardItem",
        "inheritance": null,
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "items",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "record",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "argument-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "DOMString"
                    },
                    {
                      "type": "argument-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "ClipboardItemData"
                    }
                  ]
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "ClipboardItemOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "presentationStyle",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "PresentationStyle"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "types",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "FrozenArray",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "attribute-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                }
              ]
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "getType",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Blob"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "type",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface of the [Clipboard API] represents a single item format, used when reading or writing data via the [Clipboard API]. That is [clipboard.read()] and [clipboard.write()] respectively.\nThe benefit of having the  interface to represent data, is that it enables developers to cope with the varying scope of file types and data easily.\nAccess to the contents of the clipboard is gated behind the Permissions API: The [clipboard-write] permission is granted automatically to pages when they are in the active tab. The [clipboard-read] permission must be requested, which you can do by trying to read data from the clipboard.\n\n  Note: To work with text see the [Clipboard.readText()] and [Clipboard.writeText()] methods of the [Clipboard] interface.\n\n\n  Note: You can only pass in one clipboard item at a time.\n",
        "mdn": "/en-US/docs/Web/API/ClipboardItem"
      },
      "PresentationStyle": {
        "fragment": "enum PresentationStyle { \"unspecified\", \"inline\", \"attachment\" };",
        "type": "enum",
        "name": "PresentationStyle",
        "values": [
          {
            "type": "enum-value",
            "value": "unspecified"
          },
          {
            "type": "enum-value",
            "value": "inline"
          },
          {
            "type": "enum-value",
            "value": "attachment"
          }
        ],
        "extAttrs": []
      },
      "ClipboardItemOptions": {
        "fragment": "dictionary ClipboardItemOptions {\n  PresentationStyle presentationStyle = \"unspecified\";\n};",
        "type": "dictionary",
        "name": "ClipboardItemOptions",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "presentationStyle",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "PresentationStyle"
            },
            "default": {
              "type": "string",
              "value": "unspecified"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "ClipboardItems": {
        "fragment": "typedef sequence<ClipboardItem> ClipboardItems;",
        "type": "typedef",
        "name": "ClipboardItems",
        "idlType": {
          "type": "typedef-type",
          "extAttrs": [],
          "generic": "sequence",
          "nullable": false,
          "union": false,
          "idlType": [
            {
              "type": "typedef-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ClipboardItem"
            }
          ]
        },
        "extAttrs": []
      },
      "Clipboard": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface Clipboard : EventTarget {\n  Promise<ClipboardItems> read();\n  Promise<DOMString> readText();\n  Promise<undefined> write(ClipboardItems data);\n  Promise<undefined> writeText(DOMString data);\n};",
        "type": "interface",
        "name": "Clipboard",
        "inheritance": "EventTarget",
        "members": [
          {
            "type": "operation",
            "name": "read",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "ClipboardItems"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "readText",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "write",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "data",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "ClipboardItems"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "writeText",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "data",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe  interface implements the Clipboard API, providing—if the user grants permission—both read and write access to the contents of the system clipboard. The Clipboard API can be used to implement cut, copy, and paste features within a web application.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      Clipboard\n    \n  \nThe system clipboard is exposed through the global [Navigator.clipboard] property.\nCalls to the methods of the  object will not succeed if the user hasn't granted the needed permissions using the Permissions API and the [\"clipboard-read\"] or [\"clipboard-write\"] permission as appropriate.\n\n  Note: In reality, at this time browser requirements for access to the clipboard vary significantly. Please see the section Clipboard availability for details.\n\nAll of the Clipboard API methods operate asynchronously; they return a [Promise] which is resolved once the clipboard access has been completed. The promise is rejected if clipboard access is denied.\n\n  \n    Note: The clipboard is a data buffer that is used for short-term, data storage and/or data transfers, this can be between documents or applications\n    It is usually implemented as an anonymous, temporary data buffer, sometimes called the paste buffer, that can be accessed from most or all programs within the environment via defined programming interfaces.\n  \n  A typical application accesses clipboard functionality by mapping user input such as keybindings, menu selections, etc. to these interfaces.\n",
        "mdn": "/en-US/docs/Web/API/Clipboard"
      },
      "ClipboardPermissionDescriptor": {
        "fragment": "dictionary ClipboardPermissionDescriptor : PermissionDescriptor {\n  boolean allowWithoutGesture = false;\n};",
        "type": "dictionary",
        "name": "ClipboardPermissionDescriptor",
        "inheritance": "PermissionDescriptor",
        "members": [
          {
            "type": "field",
            "name": "allowWithoutGesture",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": {
              "type": "boolean",
              "value": false
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      }
    },
    "idlExtendedNames": {
      "Navigator": [
        {
          "fragment": "partial interface Navigator {\n  [SecureContext, SameObject] readonly attribute Clipboard clipboard;\n};",
          "type": "interface",
          "name": "Navigator",
          "inheritance": null,
          "members": [
            {
              "type": "attribute",
              "name": "clipboard",
              "idlType": {
                "type": "attribute-type",
                "extAttrs": [],
                "generic": "",
                "nullable": false,
                "union": false,
                "idlType": "Clipboard"
              },
              "extAttrs": [
                {
                  "type": "extended-attribute",
                  "name": "SecureContext",
                  "rhs": null,
                  "arguments": []
                },
                {
                  "type": "extended-attribute",
                  "name": "SameObject",
                  "rhs": null,
                  "arguments": []
                }
              ],
              "special": "",
              "readonly": true
            }
          ],
          "extAttrs": [],
          "partial": true
        }
      ]
    },
    "globals": {},
    "exposed": {
      "Window": [
        "ClipboardEvent",
        "ClipboardItem",
        "Clipboard"
      ]
    },
    "dependencies": {
      "ClipboardEventInit": [
        "EventInit",
        "DataTransfer"
      ],
      "ClipboardEvent": [
        "Event",
        "ClipboardEventInit",
        "DataTransfer"
      ],
      "Navigator": [
        "Clipboard"
      ],
      "ClipboardItem": [
        "ClipboardItemData",
        "ClipboardItemOptions",
        "PresentationStyle",
        "Blob"
      ],
      "ClipboardItemOptions": [
        "PresentationStyle"
      ],
      "Clipboard": [
        "EventTarget",
        "ClipboardItems"
      ],
      "ClipboardPermissionDescriptor": [
        "PermissionDescriptor"
      ]
    },
    "externalDependencies": [
      "EventInit",
      "DataTransfer",
      "Event",
      "Navigator",
      "Blob",
      "EventTarget",
      "PermissionDescriptor"
    ],
    "hasObsoleteIdl": false
  },
  "path": "./../webIDL/merged/clipboard-apis.json",
  "basename": "clipboard-apis.json",
  "name": "clipboard-apis",
  "libraryName": "clipboard_apis"
}