{
  "spec": {
    "title": "Keyboard Map",
    "url": "https://wicg.github.io/keyboard-map/"
  },
  "idlparsed": {
    "jsNames": {
      "constructors": {},
      "functions": {
        "Window": [
          "KeyboardLayoutMap"
        ]
      }
    },
    "idlNames": {
      "KeyboardLayoutMap": {
        "fragment": "[Exposed=Window]\ninterface KeyboardLayoutMap {\n  readonly maplike<DOMString, DOMString>;\n};",
        "type": "interface",
        "name": "KeyboardLayoutMap",
        "inheritance": null,
        "members": [
          {
            "type": "maplike",
            "idlType": [
              {
                "type": null,
                "extAttrs": [],
                "generic": "",
                "nullable": false,
                "union": false,
                "idlType": "DOMString"
              },
              {
                "type": null,
                "extAttrs": [],
                "generic": "",
                "nullable": false,
                "union": false,
                "idlType": "DOMString"
              }
            ],
            "arguments": [],
            "extAttrs": [],
            "readonly": true,
            "async": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": true,
        "desc": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\nThe  interface of the Keyboard API is a map-like object with functions for retrieving the string associated with specific physical keys.\nA list of valid keys is found in the UI Events KeyboardEvent code Values specification.",
        "mdn": "/en-US/docs/Web/API/KeyboardLayoutMap"
      }
    },
    "idlExtendedNames": {
      "Keyboard": [
        {
          "fragment": "partial interface Keyboard {\n  Promise<KeyboardLayoutMap> getLayoutMap();\n\n  attribute EventHandler onlayoutchange;\n};",
          "type": "interface",
          "name": "Keyboard",
          "inheritance": null,
          "members": [
            {
              "type": "operation",
              "name": "getLayoutMap",
              "idlType": {
                "type": "return-type",
                "extAttrs": [],
                "generic": "Promise",
                "nullable": false,
                "union": false,
                "idlType": [
                  {
                    "type": "return-type",
                    "extAttrs": [],
                    "generic": "",
                    "nullable": false,
                    "union": false,
                    "idlType": "KeyboardLayoutMap"
                  }
                ]
              },
              "arguments": [],
              "extAttrs": [],
              "special": ""
            },
            {
              "type": "attribute",
              "name": "onlayoutchange",
              "idlType": {
                "type": "attribute-type",
                "extAttrs": [],
                "generic": "",
                "nullable": false,
                "union": false,
                "idlType": "EventHandler"
              },
              "extAttrs": [],
              "special": "",
              "readonly": false
            }
          ],
          "extAttrs": [],
          "partial": true
        }
      ]
    },
    "globals": {},
    "exposed": {
      "Window": [
        "KeyboardLayoutMap"
      ]
    },
    "dependencies": {
      "KeyboardLayoutMap": [],
      "Keyboard": [
        "KeyboardLayoutMap",
        "EventHandler"
      ]
    },
    "externalDependencies": [
      "Keyboard",
      "EventHandler"
    ],
    "hasObsoleteIdl": false
  },
  "path": "./../webIDL/merged/keyboard-map.json",
  "basename": "keyboard-map.json",
  "name": "keyboard-map",
  "libraryName": "keyboard_map"
}