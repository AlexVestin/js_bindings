{
  "spec": {
    "title": "Orientation Sensor",
    "url": "https://w3c.github.io/orientation-sensor/"
  },
  "idlparsed": {
    "jsNames": {
      "constructors": {
        "Window": [
          "AbsoluteOrientationSensor",
          "RelativeOrientationSensor"
        ]
      },
      "functions": {
        "Window": [
          "OrientationSensor"
        ]
      }
    },
    "idlNames": {
      "RotationMatrixType": {
        "fragment": "typedef (Float32Array or Float64Array or DOMMatrix) RotationMatrixType;",
        "type": "typedef",
        "name": "RotationMatrixType",
        "idlType": {
          "type": "typedef-type",
          "extAttrs": [],
          "generic": "",
          "nullable": false,
          "union": true,
          "idlType": [
            {
              "type": null,
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "Float32Array"
            },
            {
              "type": null,
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "Float64Array"
            },
            {
              "type": null,
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMMatrix"
            }
          ]
        },
        "extAttrs": []
      },
      "OrientationSensor": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface OrientationSensor : Sensor {\n  readonly attribute FrozenArray<double>? quaternion;\n  undefined populateMatrix(RotationMatrixType targetMatrix);\n};",
        "type": "interface",
        "name": "OrientationSensor",
        "inheritance": "Sensor",
        "members": [
          {
            "type": "attribute",
            "name": "quaternion",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "FrozenArray",
              "nullable": true,
              "union": false,
              "idlType": [
                {
                  "type": "attribute-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                }
              ]
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "populateMatrix",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "targetMatrix",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "RotationMatrixType"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface of the Sensor APIs is the base class for orientation sensors. This interface cannot be used directly. Instead it provides properties and methods accessed by interfaces that inherit from it.\nIf a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. The [Feature-Policy] HTTP header article contains implementation instructions.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      Sensor\n    \n  \n  \n    \n    \n      OrientationSensor\n    \n  ",
        "mdn": "/en-US/docs/Web/API/OrientationSensor"
      },
      "OrientationSensorLocalCoordinateSystem": {
        "fragment": "enum OrientationSensorLocalCoordinateSystem { \"device\", \"screen\" };",
        "type": "enum",
        "name": "OrientationSensorLocalCoordinateSystem",
        "values": [
          {
            "type": "enum-value",
            "value": "device"
          },
          {
            "type": "enum-value",
            "value": "screen"
          }
        ],
        "extAttrs": []
      },
      "OrientationSensorOptions": {
        "fragment": "dictionary OrientationSensorOptions : SensorOptions {\n  OrientationSensorLocalCoordinateSystem referenceFrame = \"device\";\n};",
        "type": "dictionary",
        "name": "OrientationSensorOptions",
        "inheritance": "SensorOptions",
        "members": [
          {
            "type": "field",
            "name": "referenceFrame",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "OrientationSensorLocalCoordinateSystem"
            },
            "default": {
              "type": "string",
              "value": "device"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "AbsoluteOrientationSensor": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface AbsoluteOrientationSensor : OrientationSensor {\n  constructor(optional OrientationSensorOptions sensorOptions = {});\n};",
        "type": "interface",
        "name": "AbsoluteOrientationSensor",
        "inheritance": "OrientationSensor",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "sensorOptions",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "OrientationSensorOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface of the Sensor APIs describes the device's physical orientation in relation to the Earth's reference coordinate system.\nTo use this sensor, the user must grant permission to the ['accelerometer'], ['gyroscope'], and ['magnetometer'] device sensors through the Permissions API.\nIf a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. The [Feature-Policy] HTTP header article contains implementation instructions.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      Sensor\n    \n  \n  \n    \n    \n      OrientationSensor\n    \n  \n  \n    \n    \n      AbsoluteOrientationSensor\n    \n  ",
        "mdn": "/en-US/docs/Web/API/AbsoluteOrientationSensor"
      },
      "RelativeOrientationSensor": {
        "fragment": "[SecureContext, Exposed=Window]\ninterface RelativeOrientationSensor : OrientationSensor {\n  constructor(optional OrientationSensorOptions sensorOptions = {});\n};",
        "type": "interface",
        "name": "RelativeOrientationSensor",
        "inheritance": "OrientationSensor",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "sensorOptions",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "OrientationSensorOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface of the Sensor APIs describes the device's physical orientation without regard to the Earth's reference coordinate system.\nTo use this sensor, the user must grant permission to the ['accelerometer'], and ['gyroscope'] device sensors through the Permissions API.\nIf a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. The [Feature-Policy] HTTP header article contains implementation instructions.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      Sensor\n    \n  \n  \n    \n    \n      OrientationSensor\n    \n  \n  \n    \n    \n      RelativeOrientationSensor\n    \n  ",
        "mdn": "/en-US/docs/Web/API/RelativeOrientationSensor"
      },
      "AbsoluteOrientationReadingValues": {
        "fragment": "dictionary AbsoluteOrientationReadingValues {\n  required FrozenArray<double>? quaternion;\n};",
        "type": "dictionary",
        "name": "AbsoluteOrientationReadingValues",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "quaternion",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "FrozenArray",
              "nullable": true,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                }
              ]
            },
            "default": null,
            "required": true
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "RelativeOrientationReadingValues": {
        "fragment": "dictionary RelativeOrientationReadingValues : AbsoluteOrientationReadingValues {\n};",
        "type": "dictionary",
        "name": "RelativeOrientationReadingValues",
        "inheritance": "AbsoluteOrientationReadingValues",
        "members": [],
        "extAttrs": [],
        "partial": false
      }
    },
    "idlExtendedNames": {},
    "globals": {},
    "exposed": {
      "Window": [
        "OrientationSensor",
        "AbsoluteOrientationSensor",
        "RelativeOrientationSensor"
      ]
    },
    "dependencies": {
      "OrientationSensor": [
        "Sensor",
        "RotationMatrixType"
      ],
      "OrientationSensorOptions": [
        "SensorOptions",
        "OrientationSensorLocalCoordinateSystem"
      ],
      "AbsoluteOrientationSensor": [
        "OrientationSensor",
        "OrientationSensorOptions"
      ],
      "RelativeOrientationSensor": [
        "OrientationSensor",
        "OrientationSensorOptions"
      ],
      "AbsoluteOrientationReadingValues": [],
      "RelativeOrientationReadingValues": [
        "AbsoluteOrientationReadingValues"
      ]
    },
    "externalDependencies": [
      "Float32Array",
      "Float64Array",
      "DOMMatrix",
      "Sensor",
      "SensorOptions"
    ],
    "hasObsoleteIdl": false
  },
  "path": "./../webIDL/merged/orientation-sensor.json",
  "basename": "orientation-sensor.json",
  "name": "orientation-sensor",
  "libraryName": "orientation_sensor"
}