{
  "spec": {
    "title": "Web Audio API",
    "url": "https://webaudio.github.io/web-audio-api/"
  },
  "idlparsed": {
    "jsNames": {
      "constructors": {
        "Window": [
          "AudioContext",
          "AudioRenderCapacityEvent",
          "OfflineAudioContext",
          "OfflineAudioCompletionEvent",
          "AudioBuffer",
          "AnalyserNode",
          "AudioBufferSourceNode",
          "AudioProcessingEvent",
          "BiquadFilterNode",
          "ChannelMergerNode",
          "ChannelSplitterNode",
          "ConstantSourceNode",
          "ConvolverNode",
          "DelayNode",
          "DynamicsCompressorNode",
          "GainNode",
          "IIRFilterNode",
          "MediaElementAudioSourceNode",
          "MediaStreamAudioDestinationNode",
          "MediaStreamAudioSourceNode",
          "MediaStreamTrackAudioSourceNode",
          "OscillatorNode",
          "PannerNode",
          "PeriodicWave",
          "StereoPannerNode",
          "WaveShaperNode",
          "AudioWorkletNode"
        ],
        "AudioWorklet": [
          "AudioWorkletProcessor"
        ]
      },
      "functions": {
        "Window": [
          "BaseAudioContext",
          "AudioRenderCapacity",
          "AudioNode",
          "AudioParam",
          "AudioScheduledSourceNode",
          "AudioDestinationNode",
          "AudioListener",
          "ScriptProcessorNode",
          "AudioWorklet",
          "AudioParamMap"
        ],
        "AudioWorklet": [
          "AudioWorkletGlobalScope"
        ]
      }
    },
    "idlNames": {
      "AudioContextState": {
        "fragment": "enum AudioContextState {\n  \"suspended\",\n  \"running\",\n  \"closed\"\n};",
        "type": "enum",
        "name": "AudioContextState",
        "values": [
          {
            "type": "enum-value",
            "value": "suspended"
          },
          {
            "type": "enum-value",
            "value": "running"
          },
          {
            "type": "enum-value",
            "value": "closed"
          }
        ],
        "extAttrs": []
      },
      "DecodeErrorCallback": {
        "fragment": "callback DecodeErrorCallback = undefined (DOMException error);",
        "type": "callback",
        "name": "DecodeErrorCallback",
        "idlType": {
          "type": "return-type",
          "extAttrs": [],
          "generic": "",
          "nullable": false,
          "union": false,
          "idlType": "undefined"
        },
        "arguments": [
          {
            "type": "argument",
            "name": "error",
            "extAttrs": [],
            "idlType": {
              "type": "argument-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMException"
            },
            "default": null,
            "optional": false,
            "variadic": false
          }
        ],
        "extAttrs": []
      },
      "DecodeSuccessCallback": {
        "fragment": "callback DecodeSuccessCallback = undefined (AudioBuffer decodedData);",
        "type": "callback",
        "name": "DecodeSuccessCallback",
        "idlType": {
          "type": "return-type",
          "extAttrs": [],
          "generic": "",
          "nullable": false,
          "union": false,
          "idlType": "undefined"
        },
        "arguments": [
          {
            "type": "argument",
            "name": "decodedData",
            "extAttrs": [],
            "idlType": {
              "type": "argument-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioBuffer"
            },
            "default": null,
            "optional": false,
            "variadic": false
          }
        ],
        "extAttrs": []
      },
      "BaseAudioContext": {
        "fragment": "[Exposed=Window]\ninterface BaseAudioContext : EventTarget {\n  readonly attribute AudioDestinationNode destination;\n  readonly attribute float sampleRate;\n  readonly attribute double currentTime;\n  readonly attribute AudioListener listener;\n  readonly attribute AudioContextState state;\n  [SameObject, SecureContext]\n  readonly attribute AudioWorklet audioWorklet;\n  attribute EventHandler onstatechange;\n\n  AnalyserNode createAnalyser ();\n  BiquadFilterNode createBiquadFilter ();\n  AudioBuffer createBuffer (unsigned long numberOfChannels,\n                            unsigned long length,\n                            float sampleRate);\n  AudioBufferSourceNode createBufferSource ();\n  ChannelMergerNode createChannelMerger (optional unsigned long numberOfInputs = 6);\n  ChannelSplitterNode createChannelSplitter (\n    optional unsigned long numberOfOutputs = 6);\n  ConstantSourceNode createConstantSource ();\n  ConvolverNode createConvolver ();\n  DelayNode createDelay (optional double maxDelayTime = 1.0);\n  DynamicsCompressorNode createDynamicsCompressor ();\n  GainNode createGain ();\n  IIRFilterNode createIIRFilter (sequence<double> feedforward,\n                                 sequence<double> feedback);\n  OscillatorNode createOscillator ();\n  PannerNode createPanner ();\n  PeriodicWave createPeriodicWave (sequence<float> real,\n                                   sequence<float> imag,\n                                   optional PeriodicWaveConstraints constraints = {});\n  ScriptProcessorNode createScriptProcessor(\n    optional unsigned long bufferSize = 0,\n    optional unsigned long numberOfInputChannels = 2,\n    optional unsigned long numberOfOutputChannels = 2);\n  StereoPannerNode createStereoPanner ();\n  WaveShaperNode createWaveShaper ();\n\n  Promise<AudioBuffer> decodeAudioData (\n    ArrayBuffer audioData,\n    optional DecodeSuccessCallback? successCallback,\n    optional DecodeErrorCallback? errorCallback);\n};",
        "type": "interface",
        "name": "BaseAudioContext",
        "inheritance": "EventTarget",
        "members": [
          {
            "type": "attribute",
            "name": "destination",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioDestinationNode"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "sampleRate",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "currentTime",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "listener",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioListener"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "state",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioContextState"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "audioWorklet",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioWorklet"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              },
              {
                "type": "extended-attribute",
                "name": "SecureContext",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "onstatechange",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "operation",
            "name": "createAnalyser",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AnalyserNode"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createBiquadFilter",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "BiquadFilterNode"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createBuffer",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioBuffer"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "numberOfChannels",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "length",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "sampleRate",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createBufferSource",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioBufferSourceNode"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createChannelMerger",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ChannelMergerNode"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "numberOfInputs",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": {
                  "type": "number",
                  "value": "6"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createChannelSplitter",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ChannelSplitterNode"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "numberOfOutputs",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": {
                  "type": "number",
                  "value": "6"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createConstantSource",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ConstantSourceNode"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createConvolver",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ConvolverNode"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createDelay",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DelayNode"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "maxDelayTime",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                },
                "default": {
                  "type": "number",
                  "value": "1.0"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createDynamicsCompressor",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DynamicsCompressorNode"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createGain",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "GainNode"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createIIRFilter",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "IIRFilterNode"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "feedforward",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "sequence",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "argument-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "double"
                    }
                  ]
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "feedback",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "sequence",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "argument-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "double"
                    }
                  ]
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createOscillator",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "OscillatorNode"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createPanner",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "PannerNode"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createPeriodicWave",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "PeriodicWave"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "real",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "sequence",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "argument-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "float"
                    }
                  ]
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "imag",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "sequence",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "argument-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "float"
                    }
                  ]
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "constraints",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "PeriodicWaveConstraints"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createScriptProcessor",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ScriptProcessorNode"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "bufferSize",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": {
                  "type": "number",
                  "value": "0"
                },
                "optional": true,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "numberOfInputChannels",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": {
                  "type": "number",
                  "value": "2"
                },
                "optional": true,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "numberOfOutputChannels",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": {
                  "type": "number",
                  "value": "2"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createStereoPanner",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "StereoPannerNode"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createWaveShaper",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "WaveShaperNode"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "decodeAudioData",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioBuffer"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "audioData",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "ArrayBuffer"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "successCallback",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": true,
                  "union": false,
                  "idlType": "DecodeSuccessCallback"
                },
                "default": null,
                "optional": true,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "errorCallback",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": true,
                  "union": false,
                  "idlType": "DecodeErrorCallback"
                },
                "default": null,
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface of the Web Audio API acts as a base definition for online and offline audio-processing graphs, as represented by [AudioContext] and [OfflineAudioContext] respectively. You wouldn't use  directly — you'd use its features via one of these two inheriting interfaces.\nA  can be a target of events, therefore it implements the [EventTarget] interface.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      BaseAudioContext\n    \n  ",
        "mdn": "/en-US/docs/Web/API/BaseAudioContext"
      },
      "AudioContextLatencyCategory": {
        "fragment": "enum AudioContextLatencyCategory {\n    \"balanced\",\n    \"interactive\",\n    \"playback\"\n};",
        "type": "enum",
        "name": "AudioContextLatencyCategory",
        "values": [
          {
            "type": "enum-value",
            "value": "balanced"
          },
          {
            "type": "enum-value",
            "value": "interactive"
          },
          {
            "type": "enum-value",
            "value": "playback"
          }
        ],
        "extAttrs": []
      },
      "AudioContext": {
        "fragment": "[Exposed=Window]\ninterface AudioContext : BaseAudioContext {\n  constructor (optional AudioContextOptions contextOptions = {});\n  readonly attribute double baseLatency;\n  readonly attribute double outputLatency;\n  [SecureContext] readonly attribute AudioRenderCapacity renderCapacity;\n  AudioTimestamp getOutputTimestamp ();\n  Promise<undefined> resume ();\n  Promise<undefined> suspend ();\n  Promise<undefined> close ();\n  MediaElementAudioSourceNode createMediaElementSource (HTMLMediaElement mediaElement);\n  MediaStreamAudioSourceNode createMediaStreamSource (MediaStream mediaStream);\n  MediaStreamTrackAudioSourceNode createMediaStreamTrackSource (\n    MediaStreamTrack mediaStreamTrack);\n  MediaStreamAudioDestinationNode createMediaStreamDestination ();\n};",
        "type": "interface",
        "name": "AudioContext",
        "inheritance": "BaseAudioContext",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "contextOptions",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioContextOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "baseLatency",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "outputLatency",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "renderCapacity",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioRenderCapacity"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SecureContext",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "getOutputTimestamp",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioTimestamp"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "resume",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "suspend",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "close",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createMediaElementSource",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MediaElementAudioSourceNode"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "mediaElement",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "HTMLMediaElement"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createMediaStreamSource",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MediaStreamAudioSourceNode"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "mediaStream",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "MediaStream"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createMediaStreamTrackSource",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MediaStreamTrackAudioSourceNode"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "mediaStreamTrack",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "MediaStreamTrack"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "createMediaStreamDestination",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MediaStreamAudioDestinationNode"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface represents an audio-processing graph built from audio modules linked together, each represented by an [AudioNode].\nAn audio context controls both the creation of the nodes it contains and the execution of the audio processing, or decoding. You need to create an  before you do anything else, as everything happens inside a context. It's recommended to create one AudioContext and reuse it instead of initializing a new one each time, and it's OK to use a single  for several different audio sources and pipeline concurrently.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      BaseAudioContext\n    \n  \n  \n    \n    \n      AudioContext\n    \n  ",
        "mdn": "/en-US/docs/Web/API/AudioContext"
      },
      "AudioContextOptions": {
        "fragment": "dictionary AudioContextOptions {\n  (AudioContextLatencyCategory or double) latencyHint = \"interactive\";\n  float sampleRate;\n};",
        "type": "dictionary",
        "name": "AudioContextOptions",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "latencyHint",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": true,
              "idlType": [
                {
                  "type": null,
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioContextLatencyCategory"
                },
                {
                  "type": null,
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                }
              ]
            },
            "default": {
              "type": "string",
              "value": "interactive"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "sampleRate",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "AudioTimestamp": {
        "fragment": "dictionary AudioTimestamp {\n  double contextTime;\n  DOMHighResTimeStamp performanceTime;\n};",
        "type": "dictionary",
        "name": "AudioTimestamp",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "contextTime",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "performanceTime",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMHighResTimeStamp"
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "AudioRenderCapacity": {
        "fragment": "[Exposed=Window]\ninterface AudioRenderCapacity : EventTarget {\n  undefined start(optional AudioRenderCapacityOptions options = {});\n    undefined stop();\n    attribute EventHandler onupdate;\n};",
        "type": "interface",
        "name": "AudioRenderCapacity",
        "inheritance": "EventTarget",
        "members": [
          {
            "type": "operation",
            "name": "start",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioRenderCapacityOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "stop",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "attribute",
            "name": "onupdate",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false
      },
      "AudioRenderCapacityOptions": {
        "fragment": "dictionary AudioRenderCapacityOptions {\n    double updateInterval = 1;\n};",
        "type": "dictionary",
        "name": "AudioRenderCapacityOptions",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "updateInterval",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "1"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "AudioRenderCapacityEvent": {
        "fragment": "[Exposed=Window]\ninterface AudioRenderCapacityEvent : Event {\n  constructor (DOMString type, optional AudioRenderCapacityEventInit eventInitDict = {});\n    readonly attribute double timestamp;\n    readonly attribute double averageLoad;\n    readonly attribute double peakLoad;\n    readonly attribute double underrunRatio;\n};",
        "type": "interface",
        "name": "AudioRenderCapacityEvent",
        "inheritance": "Event",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "type",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "eventInitDict",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioRenderCapacityEventInit"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "timestamp",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "averageLoad",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "peakLoad",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "underrunRatio",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false
      },
      "AudioRenderCapacityEventInit": {
        "fragment": "dictionary AudioRenderCapacityEventInit : EventInit {\n  double timestamp = 0;\n  double averageLoad = 0;\n  double peakLoad = 0;\n  double underrunRatio = 0;\n};",
        "type": "dictionary",
        "name": "AudioRenderCapacityEventInit",
        "inheritance": "EventInit",
        "members": [
          {
            "type": "field",
            "name": "timestamp",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "averageLoad",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "peakLoad",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "underrunRatio",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "OfflineAudioContext": {
        "fragment": "[Exposed=Window]\ninterface OfflineAudioContext : BaseAudioContext {\n  constructor(OfflineAudioContextOptions contextOptions);\n  constructor(unsigned long numberOfChannels, unsigned long length, float sampleRate);\n  Promise<AudioBuffer> startRendering();\n  Promise<undefined> resume();\n  Promise<undefined> suspend(double suspendTime);\n  readonly attribute unsigned long length;\n  attribute EventHandler oncomplete;\n};",
        "type": "interface",
        "name": "OfflineAudioContext",
        "inheritance": "BaseAudioContext",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "contextOptions",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "OfflineAudioContextOptions"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "numberOfChannels",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "length",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "sampleRate",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "operation",
            "name": "startRendering",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioBuffer"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "resume",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "suspend",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "Promise",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "return-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "undefined"
                }
              ]
            },
            "arguments": [
              {
                "type": "argument",
                "name": "suspendTime",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "attribute",
            "name": "length",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "oncomplete",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface is an [AudioContext] interface representing an audio-processing graph built from linked together [AudioNode]s. In contrast with a standard [AudioContext], an  doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an [AudioBuffer].\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      BaseAudioContext\n    \n  \n  \n    \n    \n      OfflineAudioContext\n    \n  ",
        "mdn": "/en-US/docs/Web/API/OfflineAudioContext"
      },
      "OfflineAudioContextOptions": {
        "fragment": "dictionary OfflineAudioContextOptions {\n  unsigned long numberOfChannels = 1;\n  required unsigned long length;\n  required float sampleRate;\n};",
        "type": "dictionary",
        "name": "OfflineAudioContextOptions",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "numberOfChannels",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "default": {
              "type": "number",
              "value": "1"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "length",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "default": null,
            "required": true
          },
          {
            "type": "field",
            "name": "sampleRate",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": null,
            "required": true
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "OfflineAudioCompletionEvent": {
        "fragment": "[Exposed=Window]\ninterface OfflineAudioCompletionEvent : Event {\n  constructor (DOMString type, OfflineAudioCompletionEventInit eventInitDict);\n  readonly attribute AudioBuffer renderedBuffer;\n};",
        "type": "interface",
        "name": "OfflineAudioCompletionEvent",
        "inheritance": "Event",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "type",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "eventInitDict",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "OfflineAudioCompletionEventInit"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "renderedBuffer",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioBuffer"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The Web Audio API  interface represents events that occur when the processing of an [OfflineAudioContext] is terminated. The [complete] event uses this interface.\n\n  Note: This interface is marked as deprecated; it is still supported for legacy reasons, but it will soon be superseded when the promise version of [OfflineAudioContext.startRendering] is supported in browsers, which will no longer need it.\n\n  \n    \n    \n      Event\n    \n  \n  \n    \n    \n      OfflineAudioCompletionEvent\n    \n  ",
        "mdn": "/en-US/docs/Web/API/OfflineAudioCompletionEvent"
      },
      "OfflineAudioCompletionEventInit": {
        "fragment": "dictionary OfflineAudioCompletionEventInit : EventInit {\n  required AudioBuffer renderedBuffer;\n};",
        "type": "dictionary",
        "name": "OfflineAudioCompletionEventInit",
        "inheritance": "EventInit",
        "members": [
          {
            "type": "field",
            "name": "renderedBuffer",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioBuffer"
            },
            "default": null,
            "required": true
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "AudioBuffer": {
        "fragment": "[Exposed=Window]\ninterface AudioBuffer {\n  constructor (AudioBufferOptions options);\n  readonly attribute float sampleRate;\n  readonly attribute unsigned long length;\n  readonly attribute double duration;\n  readonly attribute unsigned long numberOfChannels;\n  Float32Array getChannelData (unsigned long channel);\n  undefined copyFromChannel (Float32Array destination,\n                             unsigned long channelNumber,\n                             optional unsigned long bufferOffset = 0);\n  undefined copyToChannel (Float32Array source,\n                           unsigned long channelNumber,\n                           optional unsigned long bufferOffset = 0);\n};",
        "type": "interface",
        "name": "AudioBuffer",
        "inheritance": null,
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioBufferOptions"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "sampleRate",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "length",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "duration",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "numberOfChannels",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "getChannelData",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "Float32Array"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "channel",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "copyFromChannel",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "destination",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Float32Array"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "channelNumber",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "bufferOffset",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": {
                  "type": "number",
                  "value": "0"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "copyToChannel",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "source",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Float32Array"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "channelNumber",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "bufferOffset",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": {
                  "type": "number",
                  "value": "0"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface represents a short audio asset residing in memory, created from an audio file using the [AudioContext.decodeAudioData()] method, or from raw data using [AudioContext.createBuffer()]. Once put into an AudioBuffer, the audio can then be played by being passed into an [AudioBufferSourceNode].\nObjects of these types are designed to hold small audio snippets, typically less than 45 s. For longer sounds, objects implementing the [MediaElementAudioSourceNode] are more suitable. The buffer contains data in the following format: non-interleaved IEEE754 32-bit linear PCM with a nominal range between [-1] and [+1], that is, a 32-bit floating point buffer, with each sample between -1.0 and 1.0. If the  has multiple channels, they are stored in separate buffers.",
        "mdn": "/en-US/docs/Web/API/AudioBuffer"
      },
      "AudioBufferOptions": {
        "fragment": "dictionary AudioBufferOptions {\n  unsigned long numberOfChannels = 1;\n  required unsigned long length;\n  required float sampleRate;\n};",
        "type": "dictionary",
        "name": "AudioBufferOptions",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "numberOfChannels",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "default": {
              "type": "number",
              "value": "1"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "length",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "default": null,
            "required": true
          },
          {
            "type": "field",
            "name": "sampleRate",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": null,
            "required": true
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "AudioNode": {
        "fragment": "[Exposed=Window]\ninterface AudioNode : EventTarget {\n  AudioNode connect (AudioNode destinationNode,\n                     optional unsigned long output = 0,\n                     optional unsigned long input = 0);\n  undefined connect (AudioParam destinationParam, optional unsigned long output = 0);\n  undefined disconnect ();\n  undefined disconnect (unsigned long output);\n  undefined disconnect (AudioNode destinationNode);\n  undefined disconnect (AudioNode destinationNode, unsigned long output);\n  undefined disconnect (AudioNode destinationNode,\n                        unsigned long output,\n                        unsigned long input);\n  undefined disconnect (AudioParam destinationParam);\n  undefined disconnect (AudioParam destinationParam, unsigned long output);\n  readonly attribute BaseAudioContext context;\n  readonly attribute unsigned long numberOfInputs;\n  readonly attribute unsigned long numberOfOutputs;\n  attribute unsigned long channelCount;\n  attribute ChannelCountMode channelCountMode;\n  attribute ChannelInterpretation channelInterpretation;\n};",
        "type": "interface",
        "name": "AudioNode",
        "inheritance": "EventTarget",
        "members": [
          {
            "type": "operation",
            "name": "connect",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioNode"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "destinationNode",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioNode"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "output",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": {
                  "type": "number",
                  "value": "0"
                },
                "optional": true,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "input",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": {
                  "type": "number",
                  "value": "0"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "connect",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "destinationParam",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioParam"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "output",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": {
                  "type": "number",
                  "value": "0"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "disconnect",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "disconnect",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "output",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "disconnect",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "destinationNode",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioNode"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "disconnect",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "destinationNode",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioNode"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "output",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "disconnect",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "destinationNode",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioNode"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "output",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "input",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "disconnect",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "destinationParam",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioParam"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "disconnect",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "destinationParam",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioParam"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "output",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "attribute",
            "name": "context",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "BaseAudioContext"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "numberOfInputs",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "numberOfOutputs",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "channelCount",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "channelCountMode",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ChannelCountMode"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "channelInterpretation",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ChannelInterpretation"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface is a generic interface for representing an audio processing module.\nExamples include:\n\n  an audio source (e.g. an HTML [<audio>] or [<video>] element, an [OscillatorNode], etc.),\n  the audio destination,\n  intermediate processing module (e.g. a filter like [BiquadFilterNode] or [ConvolverNode]), or\n  volume control (like [GainNode])\n\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n\n  Note: An  can be target of events, therefore it implements the [EventTarget] interface.\n",
        "mdn": "/en-US/docs/Web/API/AudioNode"
      },
      "ChannelCountMode": {
        "fragment": "enum ChannelCountMode {\n  \"max\",\n  \"clamped-max\",\n  \"explicit\"\n};",
        "type": "enum",
        "name": "ChannelCountMode",
        "values": [
          {
            "type": "enum-value",
            "value": "max"
          },
          {
            "type": "enum-value",
            "value": "clamped-max"
          },
          {
            "type": "enum-value",
            "value": "explicit"
          }
        ],
        "extAttrs": []
      },
      "ChannelInterpretation": {
        "fragment": "enum ChannelInterpretation {\n  \"speakers\",\n  \"discrete\"\n};",
        "type": "enum",
        "name": "ChannelInterpretation",
        "values": [
          {
            "type": "enum-value",
            "value": "speakers"
          },
          {
            "type": "enum-value",
            "value": "discrete"
          }
        ],
        "extAttrs": []
      },
      "AudioNodeOptions": {
        "fragment": "dictionary AudioNodeOptions {\n  unsigned long channelCount;\n  ChannelCountMode channelCountMode;\n  ChannelInterpretation channelInterpretation;\n};",
        "type": "dictionary",
        "name": "AudioNodeOptions",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "channelCount",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "channelCountMode",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ChannelCountMode"
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "channelInterpretation",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "ChannelInterpretation"
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "AutomationRate": {
        "fragment": "enum AutomationRate {\n  \"a-rate\",\n  \"k-rate\"\n};",
        "type": "enum",
        "name": "AutomationRate",
        "values": [
          {
            "type": "enum-value",
            "value": "a-rate"
          },
          {
            "type": "enum-value",
            "value": "k-rate"
          }
        ],
        "extAttrs": []
      },
      "AudioParam": {
        "fragment": "[Exposed=Window]\ninterface AudioParam {\n  attribute float value;\n  attribute AutomationRate automationRate;\n  readonly attribute float defaultValue;\n  readonly attribute float minValue;\n  readonly attribute float maxValue;\n  AudioParam setValueAtTime (float value, double startTime);\n  AudioParam linearRampToValueAtTime (float value, double endTime);\n  AudioParam exponentialRampToValueAtTime (float value, double endTime);\n  AudioParam setTargetAtTime (float target, double startTime, float timeConstant);\n  AudioParam setValueCurveAtTime (sequence<float> values,\n                                  double startTime,\n                                  double duration);\n  AudioParam cancelScheduledValues (double cancelTime);\n  AudioParam cancelAndHoldAtTime (double cancelTime);\n};",
        "type": "interface",
        "name": "AudioParam",
        "inheritance": null,
        "members": [
          {
            "type": "attribute",
            "name": "value",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "automationRate",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AutomationRate"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "defaultValue",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "minValue",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "maxValue",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "setValueAtTime",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "value",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "startTime",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "linearRampToValueAtTime",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "value",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "endTime",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "exponentialRampToValueAtTime",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "value",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "endTime",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "setTargetAtTime",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "target",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "startTime",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "timeConstant",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "setValueCurveAtTime",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "values",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "sequence",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "argument-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "float"
                    }
                  ]
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "startTime",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "duration",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "cancelScheduledValues",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "cancelTime",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "cancelAndHoldAtTime",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "cancelTime",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The Web Audio API's  interface represents an audio-related parameter, usually a parameter of an [AudioNode] (such as [GainNode.gain]).\nAn  can be set to a specific value or a change in value, and can be scheduled to happen at a specific time and following a specific pattern.\nEach  has a list of events, initially empty, that define when and how values change. When this list is not empty, changes using the [AudioParam.value] attributes are ignored. This list of events allows us to schedule changes that have to happen at very precise times, using arbitrary timeline-based automation curves. The time used is the one defined in [AudioContext.currentTime].",
        "mdn": "/en-US/docs/Web/API/AudioParam"
      },
      "AudioScheduledSourceNode": {
        "fragment": "[Exposed=Window]\ninterface AudioScheduledSourceNode : AudioNode {\n  attribute EventHandler onended;\n  undefined start(optional double when = 0);\n  undefined stop(optional double when = 0);\n};",
        "type": "interface",
        "name": "AudioScheduledSourceNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "attribute",
            "name": "onended",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "operation",
            "name": "start",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "when",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                },
                "default": {
                  "type": "number",
                  "value": "0"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "stop",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "when",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                },
                "default": {
                  "type": "number",
                  "value": "0"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface—part of the Web Audio API—is a parent interface for several types of audio source node interfaces which share the ability to be started and stopped, optionally at specified times. Specifically, this interface defines the [start()] and [stop()] methods, as well as the [onended] event handler.\n\n  Note: You can't create an  object directly. Instead, use the interface which extends it, such as [AudioBufferSourceNode], [OscillatorNode], and [ConstantSourceNode].\n\nUnless stated otherwise, nodes based upon  output silence when not playing (that is, before [start()] is called and after [stop()] is called). Silence is represented, as always, by a stream of samples with the value zero (0).\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      AudioScheduledSourceNode\n    \n  ",
        "mdn": "/en-US/docs/Web/API/AudioScheduledSourceNode"
      },
      "AnalyserNode": {
        "fragment": "[Exposed=Window]\ninterface AnalyserNode : AudioNode {\n  constructor (BaseAudioContext context, optional AnalyserOptions options = {});\n  undefined getFloatFrequencyData (Float32Array array);\n  undefined getByteFrequencyData (Uint8Array array);\n  undefined getFloatTimeDomainData (Float32Array array);\n  undefined getByteTimeDomainData (Uint8Array array);\n  attribute unsigned long fftSize;\n  readonly attribute unsigned long frequencyBinCount;\n  attribute double minDecibels;\n  attribute double maxDecibels;\n  attribute double smoothingTimeConstant;\n};",
        "type": "interface",
        "name": "AnalyserNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BaseAudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AnalyserOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "operation",
            "name": "getFloatFrequencyData",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "array",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Float32Array"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "getByteFrequencyData",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "array",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Uint8Array"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "getFloatTimeDomainData",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "array",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Float32Array"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "getByteTimeDomainData",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "array",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Uint8Array"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "attribute",
            "name": "fftSize",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "frequencyBinCount",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "minDecibels",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "maxDecibels",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "smoothingTimeConstant",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface represents a node able to provide real-time frequency and time-domain analysis information. It is an [AudioNode] that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.\nAn  has exactly one input and one output. The node works even if the output is not connected.\n\n  \n\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      AnalyserNode\n    \n  \n\n  \n    \n      Number of inputs\n      [1]\n    \n    \n      Number of outputs\n      [1] (but may be left unconnected)\n    \n    \n      Channel count mode\n      [\"max\"]\n    \n    \n      Channel count\n      [2]\n    \n    \n      Channel interpretation\n      [\"speakers\"]\n    \n  \n",
        "mdn": "/en-US/docs/Web/API/AnalyserNode"
      },
      "AnalyserOptions": {
        "fragment": "dictionary AnalyserOptions : AudioNodeOptions {\n  unsigned long fftSize = 2048;\n  double maxDecibels = -30;\n  double minDecibels = -100;\n  double smoothingTimeConstant = 0.8;\n};",
        "type": "dictionary",
        "name": "AnalyserOptions",
        "inheritance": "AudioNodeOptions",
        "members": [
          {
            "type": "field",
            "name": "fftSize",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "default": {
              "type": "number",
              "value": "2048"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "maxDecibels",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "-30"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "minDecibels",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "-100"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "smoothingTimeConstant",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "0.8"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "AudioBufferSourceNode": {
        "fragment": "[Exposed=Window]\ninterface AudioBufferSourceNode : AudioScheduledSourceNode {\n  constructor (BaseAudioContext context,\n               optional AudioBufferSourceOptions options = {});\n  attribute AudioBuffer? buffer;\n  readonly attribute AudioParam playbackRate;\n  readonly attribute AudioParam detune;\n  attribute boolean loop;\n  attribute double loopStart;\n  attribute double loopEnd;\n  undefined start (optional double when = 0,\n                   optional double offset,\n                   optional double duration);\n};",
        "type": "interface",
        "name": "AudioBufferSourceNode",
        "inheritance": "AudioScheduledSourceNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BaseAudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioBufferSourceOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "buffer",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "AudioBuffer"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "playbackRate",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "detune",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "loop",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "loopStart",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "loopEnd",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "operation",
            "name": "start",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "when",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                },
                "default": {
                  "type": "number",
                  "value": "0"
                },
                "optional": true,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "offset",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                },
                "default": null,
                "optional": true,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "duration",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                },
                "default": null,
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface is an [AudioScheduledSourceNode] which represents an audio source consisting of in-memory audio data, stored in an [AudioBuffer].\nThis interface is especially useful for playing back audio which has particularly stringent timing accuracy requirements, such as for sounds that must match a specific rhythm and can be kept in memory rather than being played from disk or the network. To play sounds which require accurate timing but must be streamed from the network or played from disk, use a [AudioWorkletNode] to implement its playback.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      AudioScheduledSourceNode\n    \n  \n  \n    \n    \n      AudioBufferSourceNode\n    \n  \nAn  has no inputs and exactly one output, which has the same number of channels as the [AudioBuffer] indicated by its [buffer] property. If there's no buffer set—that is, if [buffer] is [null]—the output contains a single channel of silence (every sample is 0).\nAn  can only be played once; after each call to [start()], you have to create a new node if you want to play the same sound again. Fortunately, these nodes are very inexpensive to create, and the actual [AudioBuffer]s can be reused for multiple plays of the sound. Indeed, you can use these nodes in a \"fire and forget\" manner: create the node, call [start()] to begin playing the sound, and don't even bother to hold a reference to it. It will automatically be garbage-collected at an appropriate time, which won't be until sometime after the sound has finished playing.\nMultiple calls to [stop()] are allowed. The most recent call replaces the previous one, if the  has not already reached the end of the buffer.\n\n  \n\n\n  \n    \n      Number of inputs\n      [0]\n    \n    \n      Number of outputs\n      [1]\n    \n    \n      Channel count\n      defined by the associated [AudioBuffer]\n    \n  \n",
        "mdn": "/en-US/docs/Web/API/AudioBufferSourceNode"
      },
      "AudioBufferSourceOptions": {
        "fragment": "dictionary AudioBufferSourceOptions {\n  AudioBuffer? buffer;\n  float detune = 0;\n  boolean loop = false;\n  double loopEnd = 0;\n  double loopStart = 0;\n  float playbackRate = 1;\n};",
        "type": "dictionary",
        "name": "AudioBufferSourceOptions",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "buffer",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "AudioBuffer"
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "detune",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "loop",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": {
              "type": "boolean",
              "value": false
            },
            "required": false
          },
          {
            "type": "field",
            "name": "loopEnd",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "loopStart",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "playbackRate",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "1"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "AudioDestinationNode": {
        "fragment": "[Exposed=Window]\ninterface AudioDestinationNode : AudioNode {\n  readonly attribute unsigned long maxChannelCount;\n};",
        "type": "interface",
        "name": "AudioDestinationNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "attribute",
            "name": "maxChannelCount",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface represents the end destination of an audio graph in a given context — usually the speakers of your device. It can also be the node that will \"record\" the audio data when used with an [OfflineAudioContext].\n has no output (as it is the output, no more [AudioNode] can be linked after it in the audio graph) and one input. The number of channels in the input must be between [0] and the [maxChannelCount] value or an exception is raised.\nThe  of a given [AudioContext] can be retrieved using the [AudioContext.destination] property.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      AudioDestinationNode\n    \n  \n\n  \n    \n      Number of inputs\n      [1]\n    \n    \n      Number of outputs\n      [0]\n    \n    \n      Channel count mode\n      [\"explicit\"]\n    \n    \n      Channel count\n      [2]\n    \n    \n      Channel interpretation\n      [\"speakers\"]\n    \n  \n",
        "mdn": "/en-US/docs/Web/API/AudioDestinationNode"
      },
      "AudioListener": {
        "fragment": "[Exposed=Window]\ninterface AudioListener {\n  readonly attribute AudioParam positionX;\n  readonly attribute AudioParam positionY;\n  readonly attribute AudioParam positionZ;\n  readonly attribute AudioParam forwardX;\n  readonly attribute AudioParam forwardY;\n  readonly attribute AudioParam forwardZ;\n  readonly attribute AudioParam upX;\n  readonly attribute AudioParam upY;\n  readonly attribute AudioParam upZ;\n  undefined setPosition (float x, float y, float z);\n  undefined setOrientation (float x, float y, float z, float xUp, float yUp, float zUp);\n};",
        "type": "interface",
        "name": "AudioListener",
        "inheritance": null,
        "members": [
          {
            "type": "attribute",
            "name": "positionX",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "positionY",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "positionZ",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "forwardX",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "forwardY",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "forwardZ",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "upX",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "upY",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "upZ",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "setPosition",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "x",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "y",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "z",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "setOrientation",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "x",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "y",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "z",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "xUp",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "yUp",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "zUp",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface represents the position and orientation of the unique person listening to the audio scene, and is used in audio spatialization. All [PannerNode]s spatialize in relation to the  stored in the [BaseAudioContext.listener] attribute.\nIt is important to note that there is only one listener per context and that it isn't an [AudioNode].\n\n  \n",
        "mdn": "/en-US/docs/Web/API/AudioListener"
      },
      "AudioProcessingEvent": {
        "fragment": "[Exposed=Window]\ninterface AudioProcessingEvent : Event {\n  constructor (DOMString type, AudioProcessingEventInit eventInitDict);\n  readonly attribute double playbackTime;\n  readonly attribute AudioBuffer inputBuffer;\n  readonly attribute AudioBuffer outputBuffer;\n};",
        "type": "interface",
        "name": "AudioProcessingEvent",
        "inheritance": "Event",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "type",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "eventInitDict",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioProcessingEventInit"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "playbackTime",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "inputBuffer",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioBuffer"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "outputBuffer",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioBuffer"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": true,
        "experimental": false,
        "desc": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\nThe Web Audio API  represents events that occur when a [ScriptProcessorNode] input buffer is ready to be processed.\n\n  Note: As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and is soon to be replaced by AudioWorklet.\n\n  \n    \n    \n      Event\n    \n  \n  \n    \n    \n      AudioProcessingEvent\n    \n  ",
        "mdn": "/en-US/docs/Web/API/AudioProcessingEvent"
      },
      "AudioProcessingEventInit": {
        "fragment": "dictionary AudioProcessingEventInit : EventInit {\n  required double playbackTime;\n  required AudioBuffer inputBuffer;\n  required AudioBuffer outputBuffer;\n};",
        "type": "dictionary",
        "name": "AudioProcessingEventInit",
        "inheritance": "EventInit",
        "members": [
          {
            "type": "field",
            "name": "playbackTime",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": null,
            "required": true
          },
          {
            "type": "field",
            "name": "inputBuffer",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioBuffer"
            },
            "default": null,
            "required": true
          },
          {
            "type": "field",
            "name": "outputBuffer",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioBuffer"
            },
            "default": null,
            "required": true
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "BiquadFilterType": {
        "fragment": "enum BiquadFilterType {\n  \"lowpass\",\n  \"highpass\",\n  \"bandpass\",\n  \"lowshelf\",\n  \"highshelf\",\n  \"peaking\",\n  \"notch\",\n  \"allpass\"\n};",
        "type": "enum",
        "name": "BiquadFilterType",
        "values": [
          {
            "type": "enum-value",
            "value": "lowpass"
          },
          {
            "type": "enum-value",
            "value": "highpass"
          },
          {
            "type": "enum-value",
            "value": "bandpass"
          },
          {
            "type": "enum-value",
            "value": "lowshelf"
          },
          {
            "type": "enum-value",
            "value": "highshelf"
          },
          {
            "type": "enum-value",
            "value": "peaking"
          },
          {
            "type": "enum-value",
            "value": "notch"
          },
          {
            "type": "enum-value",
            "value": "allpass"
          }
        ],
        "extAttrs": []
      },
      "BiquadFilterNode": {
        "fragment": "[Exposed=Window]\ninterface BiquadFilterNode : AudioNode {\n  constructor (BaseAudioContext context, optional BiquadFilterOptions options = {});\n  attribute BiquadFilterType type;\n  readonly attribute AudioParam frequency;\n  readonly attribute AudioParam detune;\n  readonly attribute AudioParam Q;\n  readonly attribute AudioParam gain;\n  undefined getFrequencyResponse (Float32Array frequencyHz,\n                                  Float32Array magResponse,\n                                  Float32Array phaseResponse);\n};",
        "type": "interface",
        "name": "BiquadFilterNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BaseAudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BiquadFilterOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "type",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "BiquadFilterType"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "frequency",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "detune",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "Q",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "gain",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "getFrequencyResponse",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "frequencyHz",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Float32Array"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "magResponse",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Float32Array"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "phaseResponse",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Float32Array"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface represents a simple low-order filter, and is created using the [BaseAudioContext/createBiquadFilter] method. It is an [AudioNode] that can represent different kinds of filters, tone control devices, and graphic equalizers. A  always has exactly one input and one output.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      BiquadFilterNode\n    \n  \n\n  \n    \n      Number of inputs\n      [1]\n    \n    \n      Number of outputs\n      [1]\n    \n    \n      Channel count mode\n      [\"max\"]\n    \n    \n      Channel count\n      [2] (not used in the default count mode)\n    \n    \n      Channel interpretation\n      [\"speakers\"]\n    \n  \n",
        "mdn": "/en-US/docs/Web/API/BiquadFilterNode"
      },
      "BiquadFilterOptions": {
        "fragment": "dictionary BiquadFilterOptions : AudioNodeOptions {\n  BiquadFilterType type = \"lowpass\";\n  float Q = 1;\n  float detune = 0;\n  float frequency = 350;\n  float gain = 0;\n};",
        "type": "dictionary",
        "name": "BiquadFilterOptions",
        "inheritance": "AudioNodeOptions",
        "members": [
          {
            "type": "field",
            "name": "type",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "BiquadFilterType"
            },
            "default": {
              "type": "string",
              "value": "lowpass"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "Q",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "1"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "detune",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "frequency",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "350"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "gain",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "ChannelMergerNode": {
        "fragment": "[Exposed=Window]\ninterface ChannelMergerNode : AudioNode {\n  constructor (BaseAudioContext context, optional ChannelMergerOptions options = {});\n};",
        "type": "interface",
        "name": "ChannelMergerNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BaseAudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "ChannelMergerOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface, often used in conjunction with its opposite, [ChannelSplitterNode], reunites different mono inputs into a single output. Each input is used to fill a channel of the output. This is useful for accessing each channels separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.\n\n  \n\nIf  has one single output, but as many inputs as there are channels to merge; the number of inputs is defined as a parameter of its constructor and the call to [AudioContext.createChannelMerger()]. In the case that no value is given, it will default to [6].\nUsing a , it is possible to create outputs with more channels than the rendering hardware is able to process. In that case, when the signal is sent to the [AudioContext.listener] object, supernumerary channels will be ignored.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      ChannelMergerNode\n    \n  \n\n  \n    \n      Number of inputs\n      variable; default to [6].\n    \n    \n      Number of outputs\n      [1]\n    \n    \n      Channel count mode\n      [\"max\"]\n    \n    \n      Channel count\n      [2 ](not used in the default count mode)\n    \n    \n      Channel interpretation\n      [\"speakers\"]\n    \n  \n",
        "mdn": "/en-US/docs/Web/API/ChannelMergerNode"
      },
      "ChannelMergerOptions": {
        "fragment": "dictionary ChannelMergerOptions : AudioNodeOptions {\n  unsigned long numberOfInputs = 6;\n};",
        "type": "dictionary",
        "name": "ChannelMergerOptions",
        "inheritance": "AudioNodeOptions",
        "members": [
          {
            "type": "field",
            "name": "numberOfInputs",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "default": {
              "type": "number",
              "value": "6"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "ChannelSplitterNode": {
        "fragment": "[Exposed=Window]\ninterface ChannelSplitterNode : AudioNode {\n  constructor (BaseAudioContext context, optional ChannelSplitterOptions options = {});\n};",
        "type": "interface",
        "name": "ChannelSplitterNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BaseAudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "ChannelSplitterOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface, often used in conjunction with its opposite, [ChannelMergerNode], separates the different channels of an audio source into a set of mono outputs. This is useful for accessing each channel separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.\n\n  \n\nIf your  always has one single input, the amount of outputs is defined by a parameter on its constructor and the call to [AudioContext.createChannelSplitter()]. In the case that no value is given, it will default to [6]. If there are fewer channels in the input than there are outputs, supernumerary outputs are silent.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      ChannelSplitterNode\n    \n  \n\n  \n    \n      Number of inputs\n      [1]\n    \n    \n      Number of outputs\n      variable; default to [6].\n    \n    \n      Channel count mode\n      \n        [\"explicit]\" Older implementations, as per earlier versions\n        of the spec use [\"max\"].\n      \n    \n    \n      Channel count\n      \n        Fixed to the number of outputs. Older implementations, as per earlier\n        versions of the spec use [2 ](not used in the default count\n        mode).\n      \n    \n    \n      Channel interpretation\n      [\"discrete\"]\n    \n  \n",
        "mdn": "/en-US/docs/Web/API/ChannelSplitterNode"
      },
      "ChannelSplitterOptions": {
        "fragment": "dictionary ChannelSplitterOptions : AudioNodeOptions {\n  unsigned long numberOfOutputs = 6;\n};",
        "type": "dictionary",
        "name": "ChannelSplitterOptions",
        "inheritance": "AudioNodeOptions",
        "members": [
          {
            "type": "field",
            "name": "numberOfOutputs",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "default": {
              "type": "number",
              "value": "6"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "ConstantSourceNode": {
        "fragment": "[Exposed=Window]\ninterface ConstantSourceNode : AudioScheduledSourceNode {\n  constructor (BaseAudioContext context, optional ConstantSourceOptions options = {});\n  readonly attribute AudioParam offset;\n};",
        "type": "interface",
        "name": "ConstantSourceNode",
        "inheritance": "AudioScheduledSourceNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BaseAudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "ConstantSourceOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "offset",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface—part of the Web Audio API—represents an audio source (based upon [AudioScheduledSourceNode]) whose output is single unchanging value. This makes it useful for cases in which you need a constant value coming in from an audio source. In addition, it can be used like a constructible [AudioParam] by automating the value of its [offset] or by connecting another node to it; see Controlling multiple parameters with ConstantSourceNode.\nA  has no inputs and exactly one monaural (one-channel) output. The output's value is always the same as the value of the [offset] parameter.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      AudioScheduledSourceNode\n    \n  \n  \n    \n    \n      ConstantSourceNode\n    \n  \n\n  \n    \n      Number of inputs\n      [0]\n    \n    \n      Number of outputs\n      [1]\n    \n  \n",
        "mdn": "/en-US/docs/Web/API/ConstantSourceNode"
      },
      "ConstantSourceOptions": {
        "fragment": "dictionary ConstantSourceOptions {\n  float offset = 1;\n};",
        "type": "dictionary",
        "name": "ConstantSourceOptions",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "offset",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "1"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "ConvolverNode": {
        "fragment": "[Exposed=Window]\ninterface ConvolverNode : AudioNode {\n  constructor (BaseAudioContext context, optional ConvolverOptions options = {});\n  attribute AudioBuffer? buffer;\n  attribute boolean normalize;\n};",
        "type": "interface",
        "name": "ConvolverNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BaseAudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "ConvolverOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "buffer",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "AudioBuffer"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "normalize",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface is an [AudioNode] that performs a Linear Convolution on a given [AudioBuffer], often used to achieve a reverb effect. A  always has exactly one input and one output.\n\n  Note: For more information on the theory behind Linear Convolution, see the Convolution article on Wikipedia.\n\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      ConvolverNode\n    \n  \n\n  \n    \n      Number of inputs\n      [1]\n    \n    \n      Number of outputs\n      [1]\n    \n    \n      Channel count mode\n      [\"clamped-max\"]\n    \n    \n      Channel count\n      [1], [2], or [4]\n    \n    \n      Channel interpretation\n      [\"speakers\"]\n    \n  \n",
        "mdn": "/en-US/docs/Web/API/ConvolverNode"
      },
      "ConvolverOptions": {
        "fragment": "dictionary ConvolverOptions : AudioNodeOptions {\n  AudioBuffer? buffer;\n  boolean disableNormalization = false;\n};",
        "type": "dictionary",
        "name": "ConvolverOptions",
        "inheritance": "AudioNodeOptions",
        "members": [
          {
            "type": "field",
            "name": "buffer",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "AudioBuffer"
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "disableNormalization",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": {
              "type": "boolean",
              "value": false
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "DelayNode": {
        "fragment": "[Exposed=Window]\ninterface DelayNode : AudioNode {\n  constructor (BaseAudioContext context, optional DelayOptions options = {});\n  readonly attribute AudioParam delayTime;\n};",
        "type": "interface",
        "name": "DelayNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BaseAudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DelayOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "delayTime",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface represents a delay-line; an [AudioNode] audio-processing module that causes a delay between the arrival of an input data and its propagation to the output.\nA  always has exactly one input and one output, both with the same amount of channels.\n\n  \n\nWhen creating a graph that has a cycle, it is mandatory to have at least one  in the cycle, or the nodes taking part in the cycle will be muted.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      DelayNode\n    \n  \n\n  \n    \n      Number of inputs\n      [1]\n    \n    \n      Number of outputs\n      [1]\n    \n    \n      Channel count mode\n      [\"max\"]\n    \n    \n      Channel count\n      [2] (not used in the default count mode)\n    \n    \n      Channel interpretation\n      [\"speakers\"]\n    \n  \n",
        "mdn": "/en-US/docs/Web/API/DelayNode"
      },
      "DelayOptions": {
        "fragment": "dictionary DelayOptions : AudioNodeOptions {\n  double maxDelayTime = 1;\n  double delayTime = 0;\n};",
        "type": "dictionary",
        "name": "DelayOptions",
        "inheritance": "AudioNodeOptions",
        "members": [
          {
            "type": "field",
            "name": "maxDelayTime",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "1"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "delayTime",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "DynamicsCompressorNode": {
        "fragment": "[Exposed=Window]\ninterface DynamicsCompressorNode : AudioNode {\n  constructor (BaseAudioContext context,\n               optional DynamicsCompressorOptions options = {});\n  readonly attribute AudioParam threshold;\n  readonly attribute AudioParam knee;\n  readonly attribute AudioParam ratio;\n  readonly attribute float reduction;\n  readonly attribute AudioParam attack;\n  readonly attribute AudioParam release;\n};",
        "type": "interface",
        "name": "DynamicsCompressorNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BaseAudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DynamicsCompressorOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "threshold",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "knee",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "ratio",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "reduction",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "attack",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "release",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface provides a compression effect, which lowers the volume of the loudest parts of the signal in order to help prevent clipping and distortion that can occur when multiple sounds are played and multiplexed together at once. This is often used in musical production and game audio.  is an [AudioNode] that has exactly one input and one output.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      DynamicsCompressorNode\n    \n  \n\n  \n    \n      Number of inputs\n      [1]\n    \n    \n      Number of outputs\n      [1]\n    \n    \n      Channel count mode\n      [\"clamped-max\"]\n    \n    \n      Channel count\n      [2]\n    \n    \n      Channel interpretation\n      [\"speakers\"]\n    \n  \n",
        "mdn": "/en-US/docs/Web/API/DynamicsCompressorNode"
      },
      "DynamicsCompressorOptions": {
        "fragment": "dictionary DynamicsCompressorOptions : AudioNodeOptions {\n  float attack = 0.003;\n  float knee = 30;\n  float ratio = 12;\n  float release = 0.25;\n  float threshold = -24;\n};",
        "type": "dictionary",
        "name": "DynamicsCompressorOptions",
        "inheritance": "AudioNodeOptions",
        "members": [
          {
            "type": "field",
            "name": "attack",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "0.003"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "knee",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "30"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "ratio",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "12"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "release",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "0.25"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "threshold",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "-24"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "GainNode": {
        "fragment": "[Exposed=Window]\ninterface GainNode : AudioNode {\n  constructor (BaseAudioContext context, optional GainOptions options = {});\n  readonly attribute AudioParam gain;\n};",
        "type": "interface",
        "name": "GainNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BaseAudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "GainOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "gain",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface represents a change in volume. It is an [AudioNode] audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A  always has exactly one input and one output, both with the same number of channels.\nThe gain is a unitless value, changing with time, that is multiplied to each corresponding sample of all input channels. If modified, the new gain is instantly applied, causing unaesthetic 'clicks' in the resulting audio. To prevent this from happening, never change the value directly but use the exponential interpolation methods on the [AudioParam] interface.\n\n  \n\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      GainNode\n    \n  \n\n  \n    \n      Number of inputs\n      [1]\n    \n    \n      Number of outputs\n      [1]\n    \n    \n      Channel count mode\n      [\"max\"]\n    \n    \n      Channel count\n      [2] (not used in the default count mode)\n    \n    \n      Channel interpretation\n      [\"speakers\"]\n    \n  \n",
        "mdn": "/en-US/docs/Web/API/GainNode"
      },
      "GainOptions": {
        "fragment": "dictionary GainOptions : AudioNodeOptions {\n  float gain = 1.0;\n};",
        "type": "dictionary",
        "name": "GainOptions",
        "inheritance": "AudioNodeOptions",
        "members": [
          {
            "type": "field",
            "name": "gain",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "1.0"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "IIRFilterNode": {
        "fragment": "[Exposed=Window]\ninterface IIRFilterNode : AudioNode {\n  constructor (BaseAudioContext context, IIRFilterOptions options);\n  undefined getFrequencyResponse (Float32Array frequencyHz,\n                                  Float32Array magResponse,\n                                  Float32Array phaseResponse);\n};",
        "type": "interface",
        "name": "IIRFilterNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BaseAudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "IIRFilterOptions"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "operation",
            "name": "getFrequencyResponse",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "frequencyHz",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Float32Array"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "magResponse",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Float32Array"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "phaseResponse",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "Float32Array"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface of the Web Audio API is a [AudioNode] processor which implements a general infinite impulse response (IIR)  filter; this type of filter can be used to implement tone control devices and graphic equalizers as well. It lets the parameters of the filter response be specified, so that it can be tuned as needed.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      IIRFilterNode\n    \n  \n\n  \n    \n      Number of inputs\n      [1]\n    \n    \n      Number of outputs\n      [1]\n    \n    \n      Channel count mode\n      [\"max\"]\n    \n    \n      Channel count\n      Same as on the input\n    \n    \n      Channel interpretation\n      [\"speakers\"]\n    \n  \n\nTypically, it's best to use the [BiquadFilterNode] interface to implement higher-order filters. There are several reasons why:\n\n  Biquad filters are typically less sensitive to numeric quirks.\n  The filter parameters of biquad filters can be automated.\n  All even-ordered IIR filters can be created using [BiquadFilterNode].\n\nHowever, if you need to create an odd-ordered IIR filter, you'll need to use . You may also find this interface useful if you don't need automation, or for other reasons.\n\n  Note: Once the node has been created, you can't change its coefficients.\n\ns have a tail-time reference; they continue to output non-silent audio with zero input. As an IIR filter, the non-zero input continues forever, but this can be limited after some finite time in practice, when the output has approached zero closely enough. The actual time that takes depends on the filter coefficients provided.",
        "mdn": "/en-US/docs/Web/API/IIRFilterNode"
      },
      "IIRFilterOptions": {
        "fragment": "dictionary IIRFilterOptions : AudioNodeOptions {\n  required sequence<double> feedforward;\n  required sequence<double> feedback;\n};",
        "type": "dictionary",
        "name": "IIRFilterOptions",
        "inheritance": "AudioNodeOptions",
        "members": [
          {
            "type": "field",
            "name": "feedforward",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "sequence",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                }
              ]
            },
            "default": null,
            "required": true
          },
          {
            "type": "field",
            "name": "feedback",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "sequence",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                }
              ]
            },
            "default": null,
            "required": true
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "MediaElementAudioSourceNode": {
        "fragment": "[Exposed=Window]\ninterface MediaElementAudioSourceNode : AudioNode {\n  constructor (AudioContext context, MediaElementAudioSourceOptions options);\n  [SameObject] readonly attribute HTMLMediaElement mediaElement;\n};",
        "type": "interface",
        "name": "MediaElementAudioSourceNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "MediaElementAudioSourceOptions"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "mediaElement",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "HTMLMediaElement"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface represents an audio source consisting of an HTML5 [<audio>] or [<video>] element. It is an [AudioNode] that acts as an audio source.\nA [MediaElementSourceNode] has no inputs and exactly one output, and is created using the [AudioContext.createMediaElementSource()] method. The amount of channels in the output equals the number of channels of the audio referenced by the [HTMLMediaElement] used in the creation of the node, or is 1 if the [HTMLMediaElement] has no audio.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      MediaElementAudioSourceNode\n    \n  \n\n  \n    \n      Number of inputs\n      [0]\n    \n    \n      Number of outputs\n      [1]\n    \n    \n      Channel count\n      \n        defined by the media in the [HTMLMediaElement]\n        passed to the\n        [AudioContext.createMediaElementSource]\n        method that created it.\n      \n    \n  \n",
        "mdn": "/en-US/docs/Web/API/MediaElementAudioSourceNode"
      },
      "MediaElementAudioSourceOptions": {
        "fragment": "dictionary MediaElementAudioSourceOptions {\n  required HTMLMediaElement mediaElement;\n};",
        "type": "dictionary",
        "name": "MediaElementAudioSourceOptions",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "mediaElement",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "HTMLMediaElement"
            },
            "default": null,
            "required": true
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "MediaStreamAudioDestinationNode": {
        "fragment": "[Exposed=Window]\ninterface MediaStreamAudioDestinationNode : AudioNode {\n  constructor (AudioContext context, optional AudioNodeOptions options = {});\n  readonly attribute MediaStream stream;\n};",
        "type": "interface",
        "name": "MediaStreamAudioDestinationNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioNodeOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "stream",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MediaStream"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface represents an audio destination consisting of a WebRTC [MediaStream] with a single [AudioMediaStreamTrack], which can be used in a similar way to a [MediaStream] obtained from [Navigator.getUserMedia()].\nIt is an [AudioNode] that acts as an audio destination, created using the [AudioContext.createMediaStreamDestination()] method.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      MediaStreamAudioDestinationNode\n    \n  \n\n  \n    \n      Number of inputs\n      [1]\n    \n    \n      Number of outputs\n      [0]\n    \n    \n      Channel count\n      [2]\n    \n    \n      Channel count mode\n      [\"explicit\"]\n    \n    \n      Channel count interpretation\n      [\"speakers\"]\n    \n  \n",
        "mdn": "/en-US/docs/Web/API/MediaStreamAudioDestinationNode"
      },
      "MediaStreamAudioSourceNode": {
        "fragment": "[Exposed=Window]\ninterface MediaStreamAudioSourceNode : AudioNode {\n  constructor (AudioContext context, MediaStreamAudioSourceOptions options);\n  [SameObject] readonly attribute MediaStream mediaStream;\n};",
        "type": "interface",
        "name": "MediaStreamAudioSourceNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "MediaStreamAudioSourceOptions"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "mediaStream",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MediaStream"
            },
            "extAttrs": [
              {
                "type": "extended-attribute",
                "name": "SameObject",
                "rhs": null,
                "arguments": []
              }
            ],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface is a type of [AudioNode] which operates as an audio source whose media is received from a [MediaStream] obtained using the WebRTC or Media Capture and Streams APIs.\nThis media could be from a microphone (through [getUserMedia()]) or from a remote peer on a WebRTC call (using the [RTCPeerConnection]'s audio tracks).\nA  has no inputs and exactly one output, and is created using the [AudioContext.createMediaStreamSource()] method.\nThe  takes the audio from the first [MediaStreamTrack] whose [kind] attribute's value is [audio]. See Track ordering for more information about the order of tracks.\nThe number of channels output by the node matches the number of tracks found in the selected audio track.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      MediaStreamAudioSourceNode\n    \n  \n\n  \n    \n      Number of inputs\n      [0]\n    \n    \n      Number of outputs\n      [1]\n    \n    \n      Channel count\n      \n        defined by the first audio [MediaStreamTrack]\n        passed to the\n        [AudioContext.createMediaStreamSource()]\n        method that created it.\n      \n    \n  \n",
        "mdn": "/en-US/docs/Web/API/MediaStreamAudioSourceNode"
      },
      "MediaStreamAudioSourceOptions": {
        "fragment": "dictionary MediaStreamAudioSourceOptions {\n  required MediaStream mediaStream;\n};",
        "type": "dictionary",
        "name": "MediaStreamAudioSourceOptions",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "mediaStream",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MediaStream"
            },
            "default": null,
            "required": true
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "MediaStreamTrackAudioSourceNode": {
        "fragment": "[Exposed=Window]\ninterface MediaStreamTrackAudioSourceNode : AudioNode {\n  constructor (AudioContext context, MediaStreamTrackAudioSourceOptions options);\n};",
        "type": "interface",
        "name": "MediaStreamTrackAudioSourceNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "MediaStreamTrackAudioSourceOptions"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": []
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface is a type of [AudioNode] which represents a source of audio data taken from a specific [MediaStreamTrack] obtained through the WebRTC or Media Capture and Streams APIs.\nThe audio itself might be input from a microphone or other audio sampling device, or might be received through a [RTCPeerConnection], among other possible options.\nA  has no inputs and exactly one output, and is created using the [AudioContext.createMediaStreamTrackSource()] method. This interface is similar to [MediaStreamAudioSourceNode], except it lets you specifically state the track to use, rather than assuming the first audio track on a stream.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      MediaStreamTrackAudioSourceNode\n    \n  \n\n  \n    \n      Number of inputs\n      [0]\n    \n    \n      Number of outputs\n      [1]\n    \n    \n      Channel count\n      \n        defined by the first audio [MediaStreamTrack]\n        passed to the\n        [AudioContext.createMediaStreamTrackSource()]\n        method that created it.\n      \n    \n  \n",
        "mdn": "/en-US/docs/Web/API/MediaStreamTrackAudioSourceNode"
      },
      "MediaStreamTrackAudioSourceOptions": {
        "fragment": "dictionary MediaStreamTrackAudioSourceOptions {\n  required MediaStreamTrack mediaStreamTrack;\n};",
        "type": "dictionary",
        "name": "MediaStreamTrackAudioSourceOptions",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "mediaStreamTrack",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MediaStreamTrack"
            },
            "default": null,
            "required": true
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "OscillatorType": {
        "fragment": "enum OscillatorType {\n  \"sine\",\n  \"square\",\n  \"sawtooth\",\n  \"triangle\",\n  \"custom\"\n};",
        "type": "enum",
        "name": "OscillatorType",
        "values": [
          {
            "type": "enum-value",
            "value": "sine"
          },
          {
            "type": "enum-value",
            "value": "square"
          },
          {
            "type": "enum-value",
            "value": "sawtooth"
          },
          {
            "type": "enum-value",
            "value": "triangle"
          },
          {
            "type": "enum-value",
            "value": "custom"
          }
        ],
        "extAttrs": []
      },
      "OscillatorNode": {
        "fragment": "[Exposed=Window]\ninterface OscillatorNode : AudioScheduledSourceNode {\n  constructor (BaseAudioContext context, optional OscillatorOptions options = {});\n  attribute OscillatorType type;\n  readonly attribute AudioParam frequency;\n  readonly attribute AudioParam detune;\n  undefined setPeriodicWave (PeriodicWave periodicWave);\n};",
        "type": "interface",
        "name": "OscillatorNode",
        "inheritance": "AudioScheduledSourceNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BaseAudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "OscillatorOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "type",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "OscillatorType"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "frequency",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "detune",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "setPeriodicWave",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "periodicWave",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "PeriodicWave"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface represents a periodic waveform, such as a sine wave. It is an [AudioScheduledSourceNode] audio-processing module that causes a specified frequency of a given wave to be created—in effect, a constant tone.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      AudioScheduledSourceNode\n    \n  \n  \n    \n    \n      OscillatorNode\n    \n  \n\n  \n    \n      Number of inputs\n      [0]\n    \n    \n      Number of outputs\n      [1]\n    \n    \n      Channel count mode\n      [max]\n    \n    \n      Channel count\n      [2] (not used in the default count mode)\n    \n    \n      Channel interpretation\n      [speakers]\n    \n  \n",
        "mdn": "/en-US/docs/Web/API/OscillatorNode"
      },
      "OscillatorOptions": {
        "fragment": "dictionary OscillatorOptions : AudioNodeOptions {\n  OscillatorType type = \"sine\";\n  float frequency = 440;\n  float detune = 0;\n  PeriodicWave periodicWave;\n};",
        "type": "dictionary",
        "name": "OscillatorOptions",
        "inheritance": "AudioNodeOptions",
        "members": [
          {
            "type": "field",
            "name": "type",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "OscillatorType"
            },
            "default": {
              "type": "string",
              "value": "sine"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "frequency",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "440"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "detune",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "periodicWave",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "PeriodicWave"
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "PanningModelType": {
        "fragment": "enum PanningModelType {\n    \"equalpower\",\n    \"HRTF\"\n};",
        "type": "enum",
        "name": "PanningModelType",
        "values": [
          {
            "type": "enum-value",
            "value": "equalpower"
          },
          {
            "type": "enum-value",
            "value": "HRTF"
          }
        ],
        "extAttrs": []
      },
      "DistanceModelType": {
        "fragment": "enum DistanceModelType {\n  \"linear\",\n  \"inverse\",\n  \"exponential\"\n};",
        "type": "enum",
        "name": "DistanceModelType",
        "values": [
          {
            "type": "enum-value",
            "value": "linear"
          },
          {
            "type": "enum-value",
            "value": "inverse"
          },
          {
            "type": "enum-value",
            "value": "exponential"
          }
        ],
        "extAttrs": []
      },
      "PannerNode": {
        "fragment": "[Exposed=Window]\ninterface PannerNode : AudioNode {\n  constructor (BaseAudioContext context, optional PannerOptions options = {});\n  attribute PanningModelType panningModel;\n  readonly attribute AudioParam positionX;\n  readonly attribute AudioParam positionY;\n  readonly attribute AudioParam positionZ;\n  readonly attribute AudioParam orientationX;\n  readonly attribute AudioParam orientationY;\n  readonly attribute AudioParam orientationZ;\n  attribute DistanceModelType distanceModel;\n  attribute double refDistance;\n  attribute double maxDistance;\n  attribute double rolloffFactor;\n  attribute double coneInnerAngle;\n  attribute double coneOuterAngle;\n  attribute double coneOuterGain;\n  undefined setPosition (float x, float y, float z);\n  undefined setOrientation (float x, float y, float z);\n};",
        "type": "interface",
        "name": "PannerNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BaseAudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "PannerOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "panningModel",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "PanningModelType"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "positionX",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "positionY",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "positionZ",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "orientationX",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "orientationY",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "orientationZ",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "distanceModel",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DistanceModelType"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "refDistance",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "maxDistance",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "rolloffFactor",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "coneInnerAngle",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "coneOuterAngle",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "coneOuterGain",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "operation",
            "name": "setPosition",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "x",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "y",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "z",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "setOrientation",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "x",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "y",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "z",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface represents the position and behavior of an audio source signal in space. It is an [AudioNode] audio-processing module describing its position with right-hand Cartesian coordinates, its movement using a velocity vector and its directionality using a directionality cone.\nA  always has exactly one input and one output: the input can be mono or stereo but the output is always stereo (2 channels); you can't have panning effects without at least two audio channels!\n\n  \n\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      PannerNode\n    \n  \n\n  \n    \n      Number of inputs\n      [1]\n    \n    \n      Number of outputs\n      [1]\n    \n    \n      Channel count mode\n      [\"clamped-max\"]\n    \n    \n      Channel count\n      [2]\n    \n    \n      Channel interpretation\n      [\"speakers\"]\n    \n  \n",
        "mdn": "/en-US/docs/Web/API/PannerNode"
      },
      "PannerOptions": {
        "fragment": "dictionary PannerOptions : AudioNodeOptions {\n  PanningModelType panningModel = \"equalpower\";\n  DistanceModelType distanceModel = \"inverse\";\n  float positionX = 0;\n  float positionY = 0;\n  float positionZ = 0;\n  float orientationX = 1;\n  float orientationY = 0;\n  float orientationZ = 0;\n  double refDistance = 1;\n  double maxDistance = 10000;\n  double rolloffFactor = 1;\n  double coneInnerAngle = 360;\n  double coneOuterAngle = 360;\n  double coneOuterGain = 0;\n};",
        "type": "dictionary",
        "name": "PannerOptions",
        "inheritance": "AudioNodeOptions",
        "members": [
          {
            "type": "field",
            "name": "panningModel",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "PanningModelType"
            },
            "default": {
              "type": "string",
              "value": "equalpower"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "distanceModel",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DistanceModelType"
            },
            "default": {
              "type": "string",
              "value": "inverse"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "positionX",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "positionY",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "positionZ",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "orientationX",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "1"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "orientationY",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "orientationZ",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "refDistance",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "1"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "maxDistance",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "10000"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "rolloffFactor",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "1"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "coneInnerAngle",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "360"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "coneOuterAngle",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "360"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "coneOuterGain",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "PeriodicWave": {
        "fragment": "[Exposed=Window]\ninterface PeriodicWave {\n  constructor (BaseAudioContext context, optional PeriodicWaveOptions options = {});\n};",
        "type": "interface",
        "name": "PeriodicWave",
        "inheritance": null,
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BaseAudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "PeriodicWaveOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface defines a periodic waveform that can be used to shape the output of an [OscillatorNode].\n has no inputs or outputs; it is used to define custom oscillators when calling [OscillatorNode.setPeriodicWave()]. The  itself is created/returned by [BaseAudioContext.createPeriodicWave].",
        "mdn": "/en-US/docs/Web/API/PeriodicWave"
      },
      "PeriodicWaveConstraints": {
        "fragment": "dictionary PeriodicWaveConstraints {\n  boolean disableNormalization = false;\n};",
        "type": "dictionary",
        "name": "PeriodicWaveConstraints",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "disableNormalization",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": {
              "type": "boolean",
              "value": false
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "PeriodicWaveOptions": {
        "fragment": "dictionary PeriodicWaveOptions : PeriodicWaveConstraints {\n  sequence<float> real;\n  sequence<float> imag;\n};",
        "type": "dictionary",
        "name": "PeriodicWaveOptions",
        "inheritance": "PeriodicWaveConstraints",
        "members": [
          {
            "type": "field",
            "name": "real",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "sequence",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                }
              ]
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "imag",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "sequence",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                }
              ]
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "ScriptProcessorNode": {
        "fragment": "[Exposed=Window]\ninterface ScriptProcessorNode : AudioNode {\n  attribute EventHandler onaudioprocess;\n  readonly attribute long bufferSize;\n};",
        "type": "interface",
        "name": "ScriptProcessorNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "attribute",
            "name": "onaudioprocess",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "bufferSize",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": true,
        "experimental": false,
        "desc": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\nThe  interface allows the generation, processing, or analyzing of audio using JavaScript.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      ScriptProcessorNode\n    \n  \n\n  Note: This feature was replaced by AudioWorklets and the [AudioWorkletNode] interface.\n\nThe  interface is an [AudioNode] audio-processing module that is linked to two buffers, one containing the input audio data, one containing the processed output audio data. An event, implementing the [AudioProcessingEvent] interface, is sent to the object each time the input buffer contains new data, and the event handler terminates when it has filled the output buffer with data.\n\n  \n\nThe size of the input and output buffer are defined at the creation time, when the [BaseAudioContext.createScriptProcessor] method is called (both are defined by [BaseAudioContext.createScriptProcessor]'s [bufferSize] parameter). The buffer size must be a power of 2 between [256] and [16384], that is [256], [512], [1024], [2048], [4096], [8192] or [16384]. Small numbers lower the latency, but large number may be necessary to avoid audio breakup and glitches.\nIf the buffer size is not defined, which is recommended, the browser will pick one that its heuristic deems appropriate.\n\n  \n    \n      Number of inputs\n      [1]\n    \n    \n      Number of outputs\n      [1]\n    \n    \n      Channel count mode\n      [\"max\"]\n    \n    \n      Channel count\n      [2] (not used in the default count mode)\n    \n    \n      Channel interpretation\n      [\"speakers\"]\n    \n  \n",
        "mdn": "/en-US/docs/Web/API/ScriptProcessorNode"
      },
      "StereoPannerNode": {
        "fragment": "[Exposed=Window]\ninterface StereoPannerNode : AudioNode {\n  constructor (BaseAudioContext context, optional StereoPannerOptions options = {});\n  readonly attribute AudioParam pan;\n};",
        "type": "interface",
        "name": "StereoPannerNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BaseAudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "StereoPannerOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "pan",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParam"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface of the Web Audio API represents a simple stereo panner node that can be used to pan an audio stream left or right. It is an [AudioNode] audio-processing module that positions an incoming audio stream in a stereo image using a low-cost equal-power panning algorithm.\nThe [pan] property takes a unitless value between [-1] (full left pan) and [1] (full right pan). This interface was introduced as a much simpler way to apply a simple panning effect than having to use a full [PannerNode].\n\n  \n\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      StereoPannerNode\n    \n  \n\n  \n    \n      Number of inputs\n      [1]\n    \n    \n      Number of outputs\n      [1]\n    \n    \n      Channel count mode\n      [\"clamped-max\"]\n    \n    \n      Channel count\n      [2]\n    \n    \n      Channel interpretation\n      [\"speakers\"]\n    \n  \n",
        "mdn": "/en-US/docs/Web/API/StereoPannerNode"
      },
      "StereoPannerOptions": {
        "fragment": "dictionary StereoPannerOptions : AudioNodeOptions {\n  float pan = 0;\n};",
        "type": "dictionary",
        "name": "StereoPannerOptions",
        "inheritance": "AudioNodeOptions",
        "members": [
          {
            "type": "field",
            "name": "pan",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "OverSampleType": {
        "fragment": "enum OverSampleType {\n  \"none\",\n  \"2x\",\n  \"4x\"\n};",
        "type": "enum",
        "name": "OverSampleType",
        "values": [
          {
            "type": "enum-value",
            "value": "none"
          },
          {
            "type": "enum-value",
            "value": "2x"
          },
          {
            "type": "enum-value",
            "value": "4x"
          }
        ],
        "extAttrs": []
      },
      "WaveShaperNode": {
        "fragment": "[Exposed=Window]\ninterface WaveShaperNode : AudioNode {\n  constructor (BaseAudioContext context, optional WaveShaperOptions options = {});\n  attribute Float32Array? curve;\n  attribute OverSampleType oversample;\n};",
        "type": "interface",
        "name": "WaveShaperNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BaseAudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "WaveShaperOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "curve",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "Float32Array"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "oversample",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "OverSampleType"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface represents a non-linear distorter.\nIt is an [AudioNode] that uses a curve to apply a wave shaping distortion to the signal. Beside obvious distortion effects, it is often used to add a warm feeling to the signal.\nA  always has exactly one input and one output.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      WaveShaperNode\n    \n  \n\n  \n    \n      Number of inputs\n      [1]\n    \n    \n      Number of outputs\n      [1]\n    \n    \n      Channel count mode\n      [\"max\"]\n    \n    \n      Channel count\n      [2] (not used in the default count mode)\n    \n    \n      Channel interpretation\n      [\"speakers\"]\n    \n  \n",
        "mdn": "/en-US/docs/Web/API/WaveShaperNode"
      },
      "WaveShaperOptions": {
        "fragment": "dictionary WaveShaperOptions : AudioNodeOptions {\n  sequence<float> curve;\n  OverSampleType oversample = \"none\";\n};",
        "type": "dictionary",
        "name": "WaveShaperOptions",
        "inheritance": "AudioNodeOptions",
        "members": [
          {
            "type": "field",
            "name": "curve",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "sequence",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "float"
                }
              ]
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "oversample",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "OverSampleType"
            },
            "default": {
              "type": "string",
              "value": "none"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "AudioWorklet": {
        "fragment": "[Exposed=Window, SecureContext]\ninterface AudioWorklet : Worklet {\n};",
        "type": "interface",
        "name": "AudioWorklet",
        "inheritance": "Worklet",
        "members": [],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe  interface of the Web Audio API is used to supply custom audio processing scripts that execute in a separate thread to provide very low latency audio processing.\nThe worklet's code is run in the [AudioWorkletGlobalScope] global execution context, using a separate Web Audio thread which is shared by the worklet and other audio nodes.\nAccess the audio context's instance of  through the [BaseAudioContext.audioWorklet] property.\n  \n    \n    \n      Worklet\n    \n  \n  \n    \n    \n      AudioWorklet\n    \n  ",
        "mdn": "/en-US/docs/Web/API/AudioWorklet"
      },
      "AudioWorkletProcessorConstructor": {
        "fragment": "callback AudioWorkletProcessorConstructor = AudioWorkletProcessor (object options);",
        "type": "callback",
        "name": "AudioWorkletProcessorConstructor",
        "idlType": {
          "type": "return-type",
          "extAttrs": [],
          "generic": "",
          "nullable": false,
          "union": false,
          "idlType": "AudioWorkletProcessor"
        },
        "arguments": [
          {
            "type": "argument",
            "name": "options",
            "extAttrs": [],
            "idlType": {
              "type": "argument-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "object"
            },
            "default": null,
            "optional": false,
            "variadic": false
          }
        ],
        "extAttrs": []
      },
      "AudioWorkletGlobalScope": {
        "fragment": "[Global=(Worklet, AudioWorklet), Exposed=AudioWorklet]\ninterface AudioWorkletGlobalScope : WorkletGlobalScope {\n  undefined registerProcessor (DOMString name,\n                               AudioWorkletProcessorConstructor processorCtor);\n  readonly attribute unsigned long long currentFrame;\n  readonly attribute double currentTime;\n  readonly attribute float sampleRate;\n};",
        "type": "interface",
        "name": "AudioWorkletGlobalScope",
        "inheritance": "WorkletGlobalScope",
        "members": [
          {
            "type": "operation",
            "name": "registerProcessor",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [
              {
                "type": "argument",
                "name": "name",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "processorCtor",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioWorkletProcessorConstructor"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "attribute",
            "name": "currentFrame",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long long"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "currentTime",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "sampleRate",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Global",
            "rhs": {
              "type": "identifier-list",
              "value": [
                {
                  "value": "Worklet"
                },
                {
                  "value": "AudioWorklet"
                }
              ]
            },
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "AudioWorklet"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface of the Web Audio API represents a global execution context for user-supplied code, which defines custom [AudioWorkletProcessor]-derived classes.\nEach [BaseAudioContext] has a single [AudioWorklet] available under the [audioWorklet] property, which runs its code in a single .\nAs the global execution context is shared across the current [BaseAudioContext], it's possible to define any other variables and perform any actions allowed in worklets — apart from defining [AudioWorkletProcessor]-derived classes.\n  \n    \n    \n      WorkletGlobalScope\n    \n  \n  \n    \n    \n      AudioWorkletGlobalScope\n    \n  ",
        "mdn": "/en-US/docs/Web/API/AudioWorkletGlobalScope"
      },
      "AudioParamMap": {
        "fragment": "[Exposed=Window]\ninterface AudioParamMap {\n  readonly maplike<DOMString, AudioParam>;\n};",
        "type": "interface",
        "name": "AudioParamMap",
        "inheritance": null,
        "members": [
          {
            "type": "maplike",
            "idlType": [
              {
                "type": null,
                "extAttrs": [],
                "generic": "",
                "nullable": false,
                "union": false,
                "idlType": "DOMString"
              },
              {
                "type": null,
                "extAttrs": [],
                "generic": "",
                "nullable": false,
                "union": false,
                "idlType": "AudioParam"
              }
            ],
            "arguments": [],
            "extAttrs": [],
            "readonly": true,
            "async": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": true,
        "desc": "The Web Audio API interface  represents a set of multiple audio parameters, each described as a mapping of a [DOMString] identifying the parameter to the [AudioParam] object representing its value.",
        "mdn": "/en-US/docs/Web/API/AudioParamMap"
      },
      "AudioWorkletNode": {
        "fragment": "[Exposed=Window, SecureContext]\ninterface AudioWorkletNode : AudioNode {\n  constructor (BaseAudioContext context, DOMString name,\n               optional AudioWorkletNodeOptions options = {});\n  readonly attribute AudioParamMap parameters;\n  readonly attribute MessagePort port;\n  attribute EventHandler onprocessorerror;\n};",
        "type": "interface",
        "name": "AudioWorkletNode",
        "inheritance": "AudioNode",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "context",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "BaseAudioContext"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "name",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "options",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "AudioWorkletNodeOptions"
                },
                "default": {
                  "type": "dictionary"
                },
                "optional": true,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "parameters",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AudioParamMap"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "port",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MessagePort"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "onprocessorerror",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "Window"
            },
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": true,
        "desc": "\n  Note: Although the interface is available outside secure contexts, the [BaseAudioContext.audioWorklet] property is not, thus custom [AudioWorkletProcessor]s cannot be defined outside them.\n\nThe  interface of the Web Audio API represents a base class for a user-defined [AudioNode], which can be connected to an audio routing graph along with other nodes. It has an associated [AudioWorkletProcessor], which does the actual audio processing in a Web Audio rendering thread.\n  \n    \n    \n      EventTarget\n    \n  \n  \n    \n    \n      AudioNode\n    \n  \n  \n    \n    \n      AudioWorkletNode\n    \n  ",
        "mdn": "/en-US/docs/Web/API/AudioWorkletNode"
      },
      "AudioWorkletNodeOptions": {
        "fragment": "dictionary AudioWorkletNodeOptions : AudioNodeOptions {\n  unsigned long numberOfInputs = 1;\n  unsigned long numberOfOutputs = 1;\n  sequence<unsigned long> outputChannelCount;\n  record<DOMString, double> parameterData;\n  object processorOptions;\n};",
        "type": "dictionary",
        "name": "AudioWorkletNodeOptions",
        "inheritance": "AudioNodeOptions",
        "members": [
          {
            "type": "field",
            "name": "numberOfInputs",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "default": {
              "type": "number",
              "value": "1"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "numberOfOutputs",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "unsigned long"
            },
            "default": {
              "type": "number",
              "value": "1"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "outputChannelCount",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "sequence",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "unsigned long"
                }
              ]
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "parameterData",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "record",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                {
                  "type": "dictionary-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "double"
                }
              ]
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "processorOptions",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "object"
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "AudioWorkletProcessor": {
        "fragment": "[Exposed=AudioWorklet]\ninterface AudioWorkletProcessor {\n  constructor ();\n  readonly attribute MessagePort port;\n};",
        "type": "interface",
        "name": "AudioWorkletProcessor",
        "inheritance": null,
        "members": [
          {
            "type": "constructor",
            "arguments": [],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "port",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MessagePort"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier",
              "value": "AudioWorklet"
            },
            "arguments": []
          }
        ],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  interface of the Web Audio API represents an audio processing code behind a custom [AudioWorkletNode]. It lives in the [AudioWorkletGlobalScope] and runs on the Web Audio rendering thread. In turn, an [AudioWorkletNode] based on it runs on the main thread.",
        "mdn": "/en-US/docs/Web/API/AudioWorkletProcessor"
      },
      "AudioWorkletProcessCallback": {
        "fragment": "callback AudioWorkletProcessCallback =\n  boolean (FrozenArray<FrozenArray<Float32Array>> inputs,\n           FrozenArray<FrozenArray<Float32Array>> outputs,\n           object parameters);",
        "type": "callback",
        "name": "AudioWorkletProcessCallback",
        "idlType": {
          "type": "return-type",
          "extAttrs": [],
          "generic": "",
          "nullable": false,
          "union": false,
          "idlType": "boolean"
        },
        "arguments": [
          {
            "type": "argument",
            "name": "inputs",
            "extAttrs": [],
            "idlType": {
              "type": "argument-type",
              "extAttrs": [],
              "generic": "FrozenArray",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "FrozenArray",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "argument-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "Float32Array"
                    }
                  ]
                }
              ]
            },
            "default": null,
            "optional": false,
            "variadic": false
          },
          {
            "type": "argument",
            "name": "outputs",
            "extAttrs": [],
            "idlType": {
              "type": "argument-type",
              "extAttrs": [],
              "generic": "FrozenArray",
              "nullable": false,
              "union": false,
              "idlType": [
                {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "FrozenArray",
                  "nullable": false,
                  "union": false,
                  "idlType": [
                    {
                      "type": "argument-type",
                      "extAttrs": [],
                      "generic": "",
                      "nullable": false,
                      "union": false,
                      "idlType": "Float32Array"
                    }
                  ]
                }
              ]
            },
            "default": null,
            "optional": false,
            "variadic": false
          },
          {
            "type": "argument",
            "name": "parameters",
            "extAttrs": [],
            "idlType": {
              "type": "argument-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "object"
            },
            "default": null,
            "optional": false,
            "variadic": false
          }
        ],
        "extAttrs": []
      },
      "AudioParamDescriptor": {
        "fragment": "dictionary AudioParamDescriptor {\n  required DOMString name;\n  float defaultValue = 0;\n  float minValue = -3.4028235e38;\n  float maxValue = 3.4028235e38;\n  AutomationRate automationRate = \"a-rate\";\n};",
        "type": "dictionary",
        "name": "AudioParamDescriptor",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "name",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMString"
            },
            "default": null,
            "required": true
          },
          {
            "type": "field",
            "name": "defaultValue",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "0"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "minValue",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "-3.4028235e38"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "maxValue",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "float"
            },
            "default": {
              "type": "number",
              "value": "3.4028235e38"
            },
            "required": false
          },
          {
            "type": "field",
            "name": "automationRate",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "AutomationRate"
            },
            "default": {
              "type": "string",
              "value": "a-rate"
            },
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false,
        "deprecated": false,
        "experimental": false,
        "desc": "The  dictionary of the Web Audio API specifies properties for [AudioParam] objects.\nIt is used to create custom [AudioParam]s on an [AudioWorkletNode]. If the underlying [AudioWorkletProcessor] has a [parameterDescriptors] static getter, then the returned array of objects based on this dictionary is used internally by [AudioWorkletNode] constructor to populate its [parameters] property accordingly.",
        "mdn": "/en-US/docs/Web/API/AudioParamDescriptor"
      }
    },
    "idlExtendedNames": {},
    "globals": {
      "Worklet": [
        "AudioWorkletGlobalScope"
      ],
      "AudioWorklet": [
        "AudioWorkletGlobalScope"
      ]
    },
    "exposed": {
      "Window": [
        "BaseAudioContext",
        "AudioContext",
        "AudioRenderCapacity",
        "AudioRenderCapacityEvent",
        "OfflineAudioContext",
        "OfflineAudioCompletionEvent",
        "AudioBuffer",
        "AudioNode",
        "AudioParam",
        "AudioScheduledSourceNode",
        "AnalyserNode",
        "AudioBufferSourceNode",
        "AudioDestinationNode",
        "AudioListener",
        "AudioProcessingEvent",
        "BiquadFilterNode",
        "ChannelMergerNode",
        "ChannelSplitterNode",
        "ConstantSourceNode",
        "ConvolverNode",
        "DelayNode",
        "DynamicsCompressorNode",
        "GainNode",
        "IIRFilterNode",
        "MediaElementAudioSourceNode",
        "MediaStreamAudioDestinationNode",
        "MediaStreamAudioSourceNode",
        "MediaStreamTrackAudioSourceNode",
        "OscillatorNode",
        "PannerNode",
        "PeriodicWave",
        "ScriptProcessorNode",
        "StereoPannerNode",
        "WaveShaperNode",
        "AudioWorklet",
        "AudioParamMap",
        "AudioWorkletNode"
      ],
      "AudioWorklet": [
        "AudioWorkletGlobalScope",
        "AudioWorkletProcessor"
      ]
    },
    "dependencies": {
      "BaseAudioContext": [
        "EventTarget",
        "AudioDestinationNode",
        "AudioListener",
        "AudioContextState",
        "AudioWorklet",
        "EventHandler",
        "AnalyserNode",
        "BiquadFilterNode",
        "AudioBuffer",
        "AudioBufferSourceNode",
        "ChannelMergerNode",
        "ChannelSplitterNode",
        "ConstantSourceNode",
        "ConvolverNode",
        "DelayNode",
        "DynamicsCompressorNode",
        "GainNode",
        "IIRFilterNode",
        "OscillatorNode",
        "PannerNode",
        "PeriodicWave",
        "PeriodicWaveConstraints",
        "ScriptProcessorNode",
        "StereoPannerNode",
        "WaveShaperNode",
        "ArrayBuffer",
        "DecodeSuccessCallback",
        "DecodeErrorCallback"
      ],
      "AudioContext": [
        "BaseAudioContext",
        "AudioContextOptions",
        "AudioRenderCapacity",
        "AudioTimestamp",
        "MediaElementAudioSourceNode",
        "HTMLMediaElement",
        "MediaStreamAudioSourceNode",
        "MediaStream",
        "MediaStreamTrackAudioSourceNode",
        "MediaStreamTrack",
        "MediaStreamAudioDestinationNode"
      ],
      "AudioContextOptions": [
        "AudioContextLatencyCategory"
      ],
      "AudioTimestamp": [
        "DOMHighResTimeStamp"
      ],
      "AudioRenderCapacity": [
        "EventTarget",
        "AudioRenderCapacityOptions",
        "EventHandler"
      ],
      "AudioRenderCapacityOptions": [],
      "AudioRenderCapacityEvent": [
        "Event",
        "AudioRenderCapacityEventInit"
      ],
      "AudioRenderCapacityEventInit": [
        "EventInit"
      ],
      "OfflineAudioContext": [
        "BaseAudioContext",
        "OfflineAudioContextOptions",
        "AudioBuffer",
        "EventHandler"
      ],
      "OfflineAudioContextOptions": [],
      "OfflineAudioCompletionEvent": [
        "Event",
        "OfflineAudioCompletionEventInit",
        "AudioBuffer"
      ],
      "OfflineAudioCompletionEventInit": [
        "EventInit",
        "AudioBuffer"
      ],
      "AudioBuffer": [
        "AudioBufferOptions",
        "Float32Array"
      ],
      "AudioBufferOptions": [],
      "AudioNode": [
        "EventTarget",
        "AudioNode",
        "AudioParam",
        "BaseAudioContext",
        "ChannelCountMode",
        "ChannelInterpretation"
      ],
      "AudioNodeOptions": [
        "ChannelCountMode",
        "ChannelInterpretation"
      ],
      "AudioParam": [
        "AutomationRate",
        "AudioParam"
      ],
      "AudioScheduledSourceNode": [
        "AudioNode",
        "EventHandler"
      ],
      "AnalyserNode": [
        "AudioNode",
        "BaseAudioContext",
        "AnalyserOptions",
        "Float32Array",
        "Uint8Array"
      ],
      "AnalyserOptions": [
        "AudioNodeOptions"
      ],
      "AudioBufferSourceNode": [
        "AudioScheduledSourceNode",
        "BaseAudioContext",
        "AudioBufferSourceOptions",
        "AudioBuffer",
        "AudioParam"
      ],
      "AudioBufferSourceOptions": [
        "AudioBuffer"
      ],
      "AudioDestinationNode": [
        "AudioNode"
      ],
      "AudioListener": [
        "AudioParam"
      ],
      "AudioProcessingEvent": [
        "Event",
        "AudioProcessingEventInit",
        "AudioBuffer"
      ],
      "AudioProcessingEventInit": [
        "EventInit",
        "AudioBuffer"
      ],
      "BiquadFilterNode": [
        "AudioNode",
        "BaseAudioContext",
        "BiquadFilterOptions",
        "BiquadFilterType",
        "AudioParam",
        "Float32Array"
      ],
      "BiquadFilterOptions": [
        "AudioNodeOptions",
        "BiquadFilterType"
      ],
      "ChannelMergerNode": [
        "AudioNode",
        "BaseAudioContext",
        "ChannelMergerOptions"
      ],
      "ChannelMergerOptions": [
        "AudioNodeOptions"
      ],
      "ChannelSplitterNode": [
        "AudioNode",
        "BaseAudioContext",
        "ChannelSplitterOptions"
      ],
      "ChannelSplitterOptions": [
        "AudioNodeOptions"
      ],
      "ConstantSourceNode": [
        "AudioScheduledSourceNode",
        "BaseAudioContext",
        "ConstantSourceOptions",
        "AudioParam"
      ],
      "ConstantSourceOptions": [],
      "ConvolverNode": [
        "AudioNode",
        "BaseAudioContext",
        "ConvolverOptions",
        "AudioBuffer"
      ],
      "ConvolverOptions": [
        "AudioNodeOptions",
        "AudioBuffer"
      ],
      "DelayNode": [
        "AudioNode",
        "BaseAudioContext",
        "DelayOptions",
        "AudioParam"
      ],
      "DelayOptions": [
        "AudioNodeOptions"
      ],
      "DynamicsCompressorNode": [
        "AudioNode",
        "BaseAudioContext",
        "DynamicsCompressorOptions",
        "AudioParam"
      ],
      "DynamicsCompressorOptions": [
        "AudioNodeOptions"
      ],
      "GainNode": [
        "AudioNode",
        "BaseAudioContext",
        "GainOptions",
        "AudioParam"
      ],
      "GainOptions": [
        "AudioNodeOptions"
      ],
      "IIRFilterNode": [
        "AudioNode",
        "BaseAudioContext",
        "IIRFilterOptions",
        "Float32Array"
      ],
      "IIRFilterOptions": [
        "AudioNodeOptions"
      ],
      "MediaElementAudioSourceNode": [
        "AudioNode",
        "AudioContext",
        "MediaElementAudioSourceOptions",
        "HTMLMediaElement"
      ],
      "MediaElementAudioSourceOptions": [
        "HTMLMediaElement"
      ],
      "MediaStreamAudioDestinationNode": [
        "AudioNode",
        "AudioContext",
        "AudioNodeOptions",
        "MediaStream"
      ],
      "MediaStreamAudioSourceNode": [
        "AudioNode",
        "AudioContext",
        "MediaStreamAudioSourceOptions",
        "MediaStream"
      ],
      "MediaStreamAudioSourceOptions": [
        "MediaStream"
      ],
      "MediaStreamTrackAudioSourceNode": [
        "AudioNode",
        "AudioContext",
        "MediaStreamTrackAudioSourceOptions"
      ],
      "MediaStreamTrackAudioSourceOptions": [
        "MediaStreamTrack"
      ],
      "OscillatorNode": [
        "AudioScheduledSourceNode",
        "BaseAudioContext",
        "OscillatorOptions",
        "OscillatorType",
        "AudioParam",
        "PeriodicWave"
      ],
      "OscillatorOptions": [
        "AudioNodeOptions",
        "OscillatorType",
        "PeriodicWave"
      ],
      "PannerNode": [
        "AudioNode",
        "BaseAudioContext",
        "PannerOptions",
        "PanningModelType",
        "AudioParam",
        "DistanceModelType"
      ],
      "PannerOptions": [
        "AudioNodeOptions",
        "PanningModelType",
        "DistanceModelType"
      ],
      "PeriodicWave": [
        "BaseAudioContext",
        "PeriodicWaveOptions"
      ],
      "PeriodicWaveConstraints": [],
      "PeriodicWaveOptions": [
        "PeriodicWaveConstraints"
      ],
      "ScriptProcessorNode": [
        "AudioNode",
        "EventHandler"
      ],
      "StereoPannerNode": [
        "AudioNode",
        "BaseAudioContext",
        "StereoPannerOptions",
        "AudioParam"
      ],
      "StereoPannerOptions": [
        "AudioNodeOptions"
      ],
      "WaveShaperNode": [
        "AudioNode",
        "BaseAudioContext",
        "WaveShaperOptions",
        "Float32Array",
        "OverSampleType"
      ],
      "WaveShaperOptions": [
        "AudioNodeOptions",
        "OverSampleType"
      ],
      "AudioWorklet": [
        "Worklet"
      ],
      "AudioWorkletGlobalScope": [
        "WorkletGlobalScope",
        "AudioWorkletProcessorConstructor"
      ],
      "AudioParamMap": [
        "AudioParam"
      ],
      "AudioWorkletNode": [
        "AudioNode",
        "BaseAudioContext",
        "AudioWorkletNodeOptions",
        "AudioParamMap",
        "MessagePort",
        "EventHandler"
      ],
      "AudioWorkletNodeOptions": [
        "AudioNodeOptions"
      ],
      "AudioWorkletProcessor": [
        "MessagePort"
      ],
      "AudioParamDescriptor": [
        "AutomationRate"
      ]
    },
    "externalDependencies": [
      "DOMException",
      "EventTarget",
      "EventHandler",
      "ArrayBuffer",
      "HTMLMediaElement",
      "MediaStream",
      "MediaStreamTrack",
      "DOMHighResTimeStamp",
      "Event",
      "EventInit",
      "Float32Array",
      "Uint8Array",
      "Worklet",
      "WorkletGlobalScope",
      "MessagePort"
    ],
    "hasObsoleteIdl": false
  },
  "path": "./../webIDL/merged/webaudio.json",
  "basename": "webaudio.json",
  "name": "webaudio",
  "libraryName": "webaudio"
}