[
  {
    "name": "AbortController",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *WebGL2RenderingContext* interface provides the OpenGL ES 3.0 rendering context for the drawing surface of an HTML [<canvas>] element.\n\nTo get an object of this interface, call [getContext()] on a [<canvas>] element, supplying \"webgl2\" as the argument:\n\n[var canvas = document.getElementById('myCanvas');\nvar gl = canvas.getContext('webgl2');\n]\n\n\nWebGL 2 is an extension to WebGL 1. The [WebGL2RenderingContext] interface implements all members of the [WebGLRenderingContext] interface. Some methods of the WebGL 1 context can accept additional values when used in a WebGL 2 context. You will find this info noted on the WebGL 1 reference pages.\n\n\nThe WebGL tutorial has more information, examples, and resources on how to get started with WebGL.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AbortSignal",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[AbortSignal]* interface represents a signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an [AbortController] object.",
    "abstract": true,
    "category": "interface",
    "props": {
      "aborted": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A Boolean that indicates whether the request(s) the signal is communicating with is/are aborted ([true]) or not ([false]).",
        "event": false
      }
    }
  },
  {
    "name": "AbsoluteOrientationSensor",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[AbsoluteOrientationSensor]* interface of the Sensor APIs describes the device's physical orientation in relation to the Earth's reference coordinate system.\n\nTo use this sensor, the user must grant permission to the ['accelerometer'], ['gyroscope'], and ['magnetometer'] device sensors through the [Permissions] API.\n\nIf a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. See [Feature-Policy] for implementation instructions.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AbstractRange",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[AbstractRange]* abstract interface is the base class upon which all DOM range types are defined. A *range* is an object that indicates the start and end points of a section of content within the document.\n\nAs an abstract interface, you will not directly instantiate an object of type [AbstractRange]. Instead, you will use the [Range] or [StaticRange] interfaces. To understand the difference between those two interfaces, and how to choose which is appropriate for your needs.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Accelerometer",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[Accelerometer]* interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes. \n\nTo use this sensor, the user must grant permission to the ['accelerometer'], device sensor through the [Permissions] API.\n\nIf a feature policy blocks the use of a feature, it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. See [Feature-Policy] for implementation instructions.",
    "abstract": false,
    "category": "interface",
    "props": {
      "x": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a double containing the acceleration of the device along the device's x axis.",
        "event": false
      },
      "y": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a double containing the acceleration of the device along the device's y axis.",
        "event": false
      },
      "z": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a double containing the acceleration of the device along the device's z axis.",
        "event": false
      }
    }
  },
  {
    "name": "AddressErrors",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[AddressErrors]* dictionary is used by the Payment Request API to report validation errors in a physical address (typically a billing address or a shipping address). Any members which is present indicates that a validation error occurred for the member of the same name in an address described using [PaymentAddress].\n\n[AddressErrors] is the type of the object returned by [shippingAddressErrors] in the [PaymentDetailsUpdate] passed into [PaymentRequestUpdateEvent.updateWith()] by the [shippingaddresschange] event handler if a change to the address resulted in a validation error occurring.\n\nSee the examples below to see how this works.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AesCbcParams",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[AesCbcParams]* dictionary of the Web Crypto API represents the object that should be passed as the [algorithm] parameter into [SubtleCrypto.encrypt()], [SubtleCrypto.decrypt()], [SubtleCrypto.wrapKey()], or [SubtleCrypto.unwrapKey()], when using the AES-CBC algorithm.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AesCtrParams",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[AesCtrParams]* dictionary of the Web Crypto API represents the object that should be passed as the [algorithm] parameter into [SubtleCrypto.encrypt()], [SubtleCrypto.decrypt()], [SubtleCrypto.wrapKey()], or [SubtleCrypto.unwrapKey()], when using the AES-CTR algorithm.\n\nAES is a block cipher, meaning that it splits the message into blocks and encrypts it a block at a time. In CTR mode, every time a block of the message is encrypted, an extra block of data is mixed in. This extra block is called the \"counter block\".\n\nA given counter block value must never be used more than once with the same key:\n\n\n Given a message n blocks long, a different counter block must be used for every block.\n If the same key is used to encrypt more than one message, a different counter block must be used for all blocks across all messages.\n\n\nTypically this is achieved by splitting the initial counter block value into two concatenated parts:\n\n\n A nonce (that is, a number that may only be used once). The nonce part of the block stays the same for every block in the message. Each time a new message is to be encrypted, a new nonce is chosen. Nonces don't have to be secret, but they must not be reused with the same key.\n A counter. This part of the block gets incremented each time a block is encrypted.\n\n\nEssentially: the nonce should ensure that counter blocks are not reused from one message to the next, while the counter should ensure that counter blocks are not reused within a single message.\n\n\n*Note*: See Appendix B of the NIST SP800-38A standard for more information.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AesGcmParams",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[AesGcmParams]* dictionary of the Web Crypto API represents the object that should be passed as the [algorithm] parameter into [SubtleCrypto.encrypt()], [SubtleCrypto.decrypt()], [SubtleCrypto.wrapKey()], or [SubtleCrypto.unwrapKey()], when using the AES-GCM algorithm.\n\nFor details of how to supply appropriate values for this parameter, see the specification for AES-GCM: NIST SP800-38D, in particular section 5.2.1.1 on Input Data.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AesKeyGenParams",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "The *[AesKeyGenParams]* dictionary of the Web Crypto API represents the object that should be passed as the [algorithm] parameter into [SubtleCrypto.generateKey()], when generating an AES key: that is, when the algorithm is identified as any of AES-CBC, AES-CTR, AES-GCM, or AES-KW.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AmbientLightSensor",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[AmbientLightSensor]* interface of the Sensor APIs returns the current light level or illuminance of the ambient light around the hosting device.\n\nTo use this sensor, the user must grant permission to the ['ambient-light-sensor'] device sensor through the [Permissions] API.\n\nIf a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. See [Feature-Policy] for implementation instructions.",
    "abstract": false,
    "category": "interface",
    "props": {
      "illuminance": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the current light level in lux of the ambient light level around the hosting device.",
        "event": false
      }
    }
  },
  {
    "name": "AnalyserNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[AnalyserNode]* interface represents a node able to provide real-time frequency and time-domain analysis information. It is an [AudioNode] that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.\n\nAn [AnalyserNode] has exactly one input and one output. The node works even if the output is not connected.\n\n\n\n\n \n  \n   Number of inputs\n   [1]\n  \n  \n   Number of outputs\n   [1] (but may be left unconnected)\n  \n  \n   Channel count mode\n   [\"max\"]\n  \n  \n   Channel count\n   [2]\n  \n  \n   Channel interpretation\n   [\"speakers\"]\n  \n \n",
    "abstract": false,
    "category": "interface",
    "props": {
      "fftSize": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an unsigned long value representing the size of the FFT (Fast Fourier Transform) to be used to determine the frequency domain.",
        "event": false
      },
      "frequencyBinCount": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an unsigned long value half that of the FFT size. This generally equates to the number of data values you will have to play with for the visualization.",
        "event": false
      },
      "minDecibels": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a double value representing the minimum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the minimum value for the range of results when using [getByteFrequencyData()].",
        "event": false
      },
      "maxDecibels": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a double value representing the maximum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the maximum value for the range of results when using [getByteFrequencyData()].",
        "event": false
      },
      "smoothingTimeConstant": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a double value representing the averaging constant with the last analysis frame — basically, it makes the transition between values over time smoother.",
        "event": false
      }
    }
  },
  {
    "name": "ANGLE_instanced_arrays",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*ANGLE_instanced_arrays*] extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default and the constants and methods are available without the \"[ANGLE]\" suffix.\n\nDespite the name \"ANGLE\", this extension works on any device if the hardware supports it and not just on Windows when using the ANGLE library. \"ANGLE\" just indicates that this extension has been written by the ANGLE library authors.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Animation",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Animation]* interface of the Web Animations API represents a single animation player and provides playback controls and a timeline for an animation node or source.",
    "abstract": false,
    "category": "interface",
    "props": {
      "currentTime": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The current time value of the animation in milliseconds, whether running or paused. If the animation lacks a [timeline], is inactive or hasn't been played yet, its value is [null].",
        "event": false
      },
      "effect": {
        "type": "AnimationEffect",
        "array": false,
        "dartType": "AnimationEffect",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets and sets the [AnimationEffect] associated with this animation. This will usually be a [KeyframeEffect] object.",
        "event": false
      },
      "finished": {
        "type": "Promise<Animation>",
        "array": false,
        "dartType": "Promise<Animation>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the current finished Promise for this animation.",
        "event": false
      },
      "id": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets and sets the [String] used to identify the animation.",
        "event": false
      },
      "pending": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates whether the animation is currently waiting for an asynchronous operation such as initiating playback or pausing a running animation.",
        "event": false
      },
      "playState": {
        "type": "AnimationPlayState",
        "array": false,
        "dartType": "AnimationPlayState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an enumerated value describing the playback state of an animation.",
        "event": false
      },
      "playbackRate": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets or sets the playback rate of the animation.",
        "event": false
      },
      "ready": {
        "type": "Promise<Animation>",
        "array": false,
        "dartType": "Promise<Animation>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the current ready Promise for this animation.",
        "event": false
      },
      "startTime": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets or sets the scheduled time when an animation's playback should begin.",
        "event": false
      },
      "timeline": {
        "type": "AnimationTimeline",
        "array": false,
        "dartType": "AnimationTimeline",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets or sets the [timeline] associated with this animation.",
        "event": false
      },
      "oncancel": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets and sets the event handler for the [cancel] event.",
        "event": false
      },
      "onfinish": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets and sets the event handler for the [finish] event.",
        "event": false
      }
    }
  },
  {
    "name": "AnimationEffect",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [AnimationEffect] interface of the Web Animations API defines current and future animation effects like [KeyframeEffect], which can be passed to [Animation] objects for playing, and [KeyframeEffect] (which is used by CSS Animations and Transitions).",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AnimationEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[AnimationEvent]* interface represents events providing information related to animations.\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "animationName": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] containing the value of the [animation-name] that generated the animation.",
        "event": false
      },
      "elapsedTime": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [float] giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. For an [animationstart] event, [elapsedTime] is [0.0] unless there was a negative value for [animation-delay], in which case the event will be fired with [elapsedTime] containing [(-1 * delay)].",
        "event": false
      },
      "pseudoElement": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString], starting with ['::'], containing the name of the pseudo-element the animation runs on. If the animation doesn't run on a pseudo-element but on the element, an empty string: [''].",
        "event": false
      }
    }
  },
  {
    "name": "AnimationPlaybackEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe AnimationPlaybackEvent interface of the Web Animations API represents animation events.\n\nAs animations play, they report changes to their [playState] through animation events.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AnimationTimeline",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [AnimationTimeline] interface of the Web Animations API represents the timeline of an animation. This interface exists to define timeline features (inherited by [DocumentTimeline] and future timeline types) and is not itself directly used by developers. Anywhere you see [AnimationTimeline], you should use [DocumentTimeline] or any other timeline type instead.",
    "abstract": true,
    "category": "interface",
    "props": {
      "currentTime": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the time value in milliseconds for this timeline or [null] if this timeline is inactive.",
        "event": false
      }
    }
  },
  {
    "name": "Attr",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*Attr*] interface represents one of a DOM element's attributes as an object. In most DOM methods, you will directly retrieve the attribute as a string (e.g., [Element.getAttribute()]), but certain functions (e.g., [Element.getAttributeNode()]) or means of iterating return [Attr] types.\n\n\n\n\n\n*Warning:* Starting in Gecko 7.0 (Firefox 7.0 / Thunderbird 7.0 / SeaMonkey 2.4), a number of deprecated properties and methods output warning messages to the console. You should revise your code accordingly. See Deprecated properties and methods for a complete list.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AudioBuffer",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[AudioBuffer]* interface represents a short audio asset residing in memory, created from an audio file using the [AudioContext.decodeAudioData()] method, or from raw data using [AudioContext.createBuffer()]. Once put into an AudioBuffer, the audio can then be played by being passed into an [AudioBufferSourceNode].\n\nObjects of these types are designed to hold small audio snippets, typically less than 45 s. For longer sounds, objects implementing the [MediaElementAudioSourceNode] are more suitable. The buffer contains data in the following format: non-interleaved IEEE754 32-bit linear PCM with a nominal range between [-1] and [+1], that is, a 32-bit floating point buffer, with each sample between -1.0 and 1.0. If the [AudioBuffer] has multiple channels, they are stored in separate buffers.",
    "abstract": false,
    "category": "interface",
    "props": {
      "sampleRate": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a float representing the sample rate, in samples per second, of the PCM data stored in the buffer.",
        "event": false
      },
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer.",
        "event": false
      },
      "duration": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a double representing the duration, in seconds, of the PCM data stored in the buffer.",
        "event": false
      },
      "numberOfChannels": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer.",
        "event": false
      }
    }
  },
  {
    "name": "AudioBufferSourceNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[AudioBufferSourceNode]* interface is an [AudioScheduledSourceNode] which represents an audio source consisting of in-memory audio data, stored in an [AudioBuffer]. It's especially useful for playing back audio which has particularly stringent timing accuracy requirements, such as for sounds that must match a specific rhythm and can be kept in memory rather than being played from disk or the network. To play sounds which require accurate timing but must be streamed from the network or played from disk, use a [AudioWorkletNode] to implement its playback.\n\n\n\n\n\nAn [AudioBufferSourceNode] has no inputs and exactly one output, which has the same number of channels as the [AudioBuffer] indicated by its [buffer] property. If there's no buffer set—that is, if [buffer] is [null]—the output contains a single channel of silence (every sample is 0).\n\nAn [AudioBufferSourceNode] can only be played once; after each call to [start()], you have to create a new node if you want to play the same sound again. Fortunately, these nodes are very inexpensive to create, and the actual [AudioBuffer]s can be reused for multiple plays of the sound. Indeed, you can use these nodes in a \"fire and forget\" manner: create the node, call [start()] to begin playing the sound, and don't even bother to hold a reference to it. It will automatically be garbage-collected at an appropriate time, which won't be until sometime after the sound has finished playing.\n\nMultiple calls to [stop()] are allowed. The most recent call replaces the previous one, if the [AudioBufferSourceNode] has not already reached the end of the buffer.\n\n\n \n\n\n \n  \n   Number of inputs\n   [0]\n  \n  \n   Number of outputs\n   [1]\n  \n  \n   Channel count\n   defined by the associated [AudioBuffer]\n  \n \n",
    "abstract": false,
    "category": "interface",
    "props": {
      "buffer": {
        "type": "AudioBuffer",
        "array": false,
        "dartType": "AudioBuffer",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [AudioBuffer] that defines the audio asset to be played, or when set to the value [null], defines a single channel of silence (in which every sample is 0.0).",
        "event": false
      },
      "detune": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a k-rate [AudioParam] representing detuning of playback in cents. This value is compounded with [playbackRate] to determine the speed at which the sound is played. Its default value is [0] (meaning no detuning), and its nominal range is -∞ to ∞.",
        "event": false
      },
      "loop": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A Boolean attribute indicating if the audio asset must be replayed when the end of the [AudioBuffer] is reached. Its default value is [false].",
        "event": false
      },
      "loopStart": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A floating-point value indicating the time, in seconds, at which playback of the [AudioBuffer] must begin when [loop] is [true]. Its default value is [0] (meaning that at the beginning of each loop, playback begins at the start of the audio buffer).",
        "event": false
      },
      "loopEnd": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A floating-point number indicating the time, in seconds, at which playback of the [AudioBuffer] stops and loops back to the time indicated by [loopStart], if [loop] is [true]. The default value is [0].",
        "event": false
      },
      "playbackRate": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An a-rate [AudioParam] that defines the speed factor at which the audio asset will be played, where a value of 1.0 is the sound's natural sampling rate. Since no pitch correction is applied on the output, this can be used to change the pitch of the sample. This value is compounded with [detune] to determine the final playback rate.",
        "event": false
      }
    }
  },
  {
    "name": "AudioConfiguration",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[AudioConfiguration]* dictionary of the Media Capabilities API defines the audio file being tested when calling [MediaCapabilities.encodingInfo()] or [MediaCapabilities.decodingInfo()] to query whether a specific audio configuration is supported, smooth, and/or power efficient.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AudioContext",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [AudioContext] interface represents an audio-processing graph built from audio modules linked together, each represented by an [AudioNode]. An audio context controls both the creation of the nodes it contains and the execution of the audio processing, or decoding. You need to create an [AudioContext] before you do anything else, as everything happens inside a context. It's recommended to create one AudioContext and reuse it instead of initializing a new one each time, and it's OK to use a single [AudioContext] for several different audio sources and pipeline concurrently.\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "baseLatency": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the number of seconds of processing latency incurred by the [AudioContext] passing the audio from the [AudioDestinationNode] to the audio subsystem.",
        "event": false
      },
      "outputLatency": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an estimation of the output latency of the current audio context.",
        "event": false
      }
    }
  },
  {
    "name": "AudioContextOptions",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*AudioContextOptions*] dictionary is used to specify configuration options when constructing a new [AudioContext] object to represent a graph of web audio nodes. It is only used when calling the [AudioContext()] constructor.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AudioDestinationNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [AudioDestinationNode] interface represents the end destination of an audio graph in a given context — usually the speakers of your device. It can also be the node that will \"record\" the audio data when used with an [OfflineAudioContext].\n\n[AudioDestinationNode] has no output (as it is the output, no more [AudioNode] can be linked after it in the audio graph) and one input. The number of channels in the input must be between [0] and the [maxChannelCount] value or an exception is raised.\n\nThe [AudioDestinationNode] of a given [AudioContext] can be retrieved using the [AudioContext.destination] property.\n\n\n \n  \n   Number of inputs\n   [1]\n  \n  \n   Number of outputs\n   [0]\n  \n  \n   Channel count mode\n   [\"explicit\"]\n  \n  \n   Channel count\n   [2]\n  \n  \n   Channel interpretation\n   [\"speakers\"]\n  \n \n",
    "abstract": true,
    "category": "interface",
    "props": {
      "maxChannelCount": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [unsigned long] defining the maximum number of channels that the physical device can handle.",
        "event": false
      }
    }
  },
  {
    "name": "AudioListener",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [AudioListener] interface represents the position and orientation of the unique person listening to the audio scene, and is used in audio spatialization. All [PannerNode]s spatialize in relation to the [AudioListener] stored in the [BaseAudioContext.listener] attribute.\n\nIt is important to note that there is only one listener per context and that it isn't an [AudioNode].\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "positionX": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the horizontal position of the listener in a right-hand cartesian coordinate system. The default is 0.",
        "event": false
      },
      "positionY": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the vertical position of the listener in a right-hand cartesian coordinate system. The default is 0.",
        "event": false
      },
      "positionZ": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the longitudinal (back and forth) position of the listener in a right-hand cartesian coordinate system. The default is 0.",
        "event": false
      },
      "forwardX": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the horizontal position of the listener's forward direction in the same cartesian coordinate system as the position ([positionX], [positionY], and [positionZ]) values. The forward and up values are linearly independent of each other. The default is 0.",
        "event": false
      },
      "forwardY": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the vertical position of the listener's forward direction in the same cartesian coordinate system as the position ([positionX], [positionY], and [positionZ]) values. The forward and up values are linearly independent of each other. The default is 0.",
        "event": false
      },
      "forwardZ": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the longitudinal (back and forth) position of the listener's forward direction in the same cartesian coordinate system as the position ([positionX], [positionY], and [positionZ]) values. The forward and up values are linearly independent of each other. The default is -1.",
        "event": false
      },
      "upX": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the horizontal position of the top of the listener's head in the same cartesian coordinate system as the position ([positionX], [positionY], and [positionZ]) values. The forward and up values are linearly independent of each other. The default is 0.",
        "event": false
      },
      "upY": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the vertical position of the top of the listener's head in the same cartesian coordinate system as the position ([positionX], [positionY], and [positionZ]) values. The forward and up values are linearly independent of each other. The default is 1.",
        "event": false
      },
      "upZ": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the longitudinal (back and forth) position of the top of the listener's head in the same cartesian coordinate system as the position ([positionX], [positionY], and [positionZ]) values. The forward and up values are linearly independent of each other. The default is 0.",
        "event": false
      }
    }
  },
  {
    "name": "AudioNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[AudioNode]* interface is a generic interface for representing an audio processing module.\n\nExamples include:\n\n\n an audio source (e.g. an HTML [<audio>] or [<video>] element, an [OscillatorNode], etc.),\n the audio destination,\n intermediate processing module (e.g. a filter like [BiquadFilterNode] or [ConvolverNode]), or\n volume control (like [GainNode])\n\n\n\n\n\n\n*Note*: An [AudioNode] can be target of events, therefore it implements the [EventTarget] interface.",
    "abstract": true,
    "category": "interface",
    "props": {
      "context": {
        "type": "BaseAudioContext",
        "array": false,
        "dartType": "BaseAudioContext",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the associated [BaseAudioContext], that is the object representing the processing graph the node is participating in.",
        "event": false
      },
      "numberOfInputs": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the number of inputs feeding the node. Source nodes are defined as nodes having a [numberOfInputs] property with a value of [0].",
        "event": false
      },
      "numberOfOutputs": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the number of outputs coming out of the node. Destination nodes — like [AudioDestinationNode] — have a value of [0] for this attribute.",
        "event": false
      },
      "channelCount": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. Its usage and precise definition depend on the value of [AudioNode.channelCountMode].",
        "event": false
      },
      "channelCountMode": {
        "type": "ChannelCountMode",
        "array": false,
        "dartType": "ChannelCountMode",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs.",
        "event": false
      },
      "channelInterpretation": {
        "type": "ChannelInterpretation",
        "array": false,
        "dartType": "ChannelInterpretation",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.\n The possible values are [\"speakers\"] or [\"discrete\"].",
        "event": false
      }
    }
  },
  {
    "name": "AudioNodeOptions",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[AudioNodeOptions]* dictionary\n    of the Web Audio API specifies options\n    that can be used when creating new [AudioNode] objects.\n\n[AudioNodeOptions] is inherited from by the option objects of the different\n  types of audio node constructors. See for example\n  [AnalyserNode.AnalyserNode] or [GainNode.GainNode].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AudioParam",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe Web Audio API's [AudioParam] interface represents an audio-related parameter, usually a parameter of an [AudioNode] (such as [GainNode.gain]). An [AudioParam] can be set to a specific value or a change in value, and can be scheduled to happen at a specific time and following a specific pattern.\n\nThere are two kinds of [AudioParam], a-rate and k-rate parameters:\n\n\n An a-rate [AudioParam] takes the current audio parameter value for each sample frame of the audio signal.\n A k-rate [AudioParam] uses the same initial audio parameter value for the whole block processed, that is 128 sample frames. In other words, the same value applies to every frame in the audio as it's processed by the node.\n\n\nEach [AudioNode] defines which of its parameters are a-rate or k-rate in the spec.\n\nEach [AudioParam] has a list of events, initially empty, that define when and how values change. When this list is not empty, changes using the [AudioParam.value] attributes are ignored. This list of events allows us to schedule changes that have to happen at very precise times, using arbitrary timelime-based automation curves. The time used is the one defined in [AudioContext.currentTime].",
    "abstract": true,
    "category": "interface",
    "props": {
      "defaultValue": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the initial volume of the attribute as defined by the specific [AudioNode] creating the [AudioParam].",
        "event": false
      },
      "maxValue": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the maximum possible value for the parameter's nominal (effective) range. ",
        "event": false
      },
      "minValue": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the minimum possible value for the parameter's nominal (effective) range. ",
        "event": false
      },
      "value": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the parameter's current value as of the current time; initially set to the value of [defaultValue].",
        "event": false
      }
    }
  },
  {
    "name": "AudioParamDescriptor",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*AudioParamDescriptor*] dictionary of the Web Audio API specifies properties for [AudioParam] objects. It is used to create custom [AudioParam]s on an [AudioWorkletNode]. If the underlying [AudioWorkletProcessor] has a [parameterDescriptors] static getter, then the returned array of objects based on this dictionary is used internally by [AudioWorkletNode] constructor to populate its [parameters] property accordingly.\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AudioProcessingEvent",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe Web Audio API [AudioProcessingEvent] represents events that occur when a [ScriptProcessorNode] input buffer is ready to be processed.\n\n\n  *Note*: As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and is soon to be replaced by AudioWorklet.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AudioScheduledSourceNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [AudioScheduledSourceNode] interface—part of the Web Audio API—is a parent interface for several types of audio source node interfaces which share the ability to be started and stopped, optionally at specified times. Specifically, this interface defines the [start()] and [stop()] methods, as well as the [onended] event handler.\n\n\nYou can't create an [AudioScheduledSourceNode] object directly. Instead, use the interface which extends it, such as [AudioBufferSourceNode], [OscillatorNode], and [ConstantSourceNode].\n\n\nUnless stated otherwise, nodes based upon [AudioScheduledSourceNode] output silence when not playing (that is, before [start()] is called and after [stop()] is called). Silence is represented, as always, by a stream of samples with the value zero (0).",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AudioTrack",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[AudioTrack]* interface represents a single audio track from one of the HTML media elements, [<audio>] or [<video>]. The most common use for accessing an [AudioTrack] object is to toggle its [enabled] property in order to mute and unmute the track.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AudioTrackList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[AudioTrackList]* interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate [AudioTrack] object in the list.\n\nRetrieve an instance of this object with [HTMLMediaElement.audioTracks]. The individual tracks can be accessed using array syntax.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AudioWorklet",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[AudioWorklet]* interface of the Web Audio API is used to supply custom audio processing scripts that execute in a separate thread to provide very low latency audio processing. The worklet's code is run in the [AudioWorkletGlobalScope] global execution context, using a separate Web Audio thread which is shared by the worklet and other audio nodes.\n\nAccess the audio context's instance of [AudioWorklet] through the [BaseAudioContext.audioWorklet] property.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AudioWorkletGlobalScope",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[AudioWorkletGlobalScope]* interface of the Web Audio API represents a global execution context for user-supplied code, which defines custom [AudioWorkletProcessor]-derived classes. Each [BaseAudioContext] has a single [AudioWorklet] available under the [audioWorklet] property, which runs its code in a single [AudioWorkletGlobalScope].\n\nAs the global execution context is shared across the current [BaseAudioContext], it's possible to define any other variables and perform any actions allowed in worklets — apart from defining [AudioWorkletProcessor]-derived classes.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AudioWorkletNode",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nAlthough the interface is available outside secure contexts, the [BaseAudioContext.audioWorklet] property is not, thus custom [AudioWorkletProcessor]s cannot be defined outside them.\n\nThe *[AudioWorkletNode]* interface of the Web Audio API represents a base class for a user-defined [AudioNode], which can be connected to an audio routing graph along with other nodes. It has an associated [AudioWorkletProcessor], which does the actual audio processing in a Web Audio rendering thread.",
    "abstract": false,
    "category": "interface",
    "props": {
      "port": {
        "type": "MessagePort",
        "array": false,
        "dartType": "MessagePort",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [MessagePort] used for bidirectional communication between the node and its associated [AudioWorkletProcessor]. The other end is available under the [port] property of the processor.",
        "event": false
      },
      "parameters": {
        "type": "AudioParamMap",
        "array": false,
        "dartType": "AudioParamMap",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [AudioParamMap] — a collection of [AudioParam] objects. They are instantiated during the creation of the underlying [AudioWorkletProcessor]. If the [AudioWorkletProcessor] has a static [parameterDescriptors] getter, the [AudioParamDescriptor] array returned from it is used to create [AudioParam] objects on the [AudioWorkletNode]. With this mechanism it is possible to make your own [AudioParam] objects accessible from your [AudioWorkletNode]. You can then use their values in the associated [AudioWorkletProcessor].",
        "event": false
      },
      "onprocessorerror": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Fired when an error is thrown in associated [AudioWorkletProcessor]. Once fired, the processor and consequently the node will output silence throughout its lifetime.",
        "event": false
      }
    }
  },
  {
    "name": "AudioWorkletNodeOptions",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*AudioWorkletNodeOptions*] dictionary of the Web Audio API is used to specify configuration options when constructing a new [AudioWorkletNode] object for custom audio processing. It is only used when calling the [AudioWorkletNode()] constructor. During internal instantiation of the underlying [AudioWorkletProcessor], the structured clone algorithm is applied to the options object and the result is passed into [AudioWorkletProcessor]'s constructor.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AudioWorkletProcessor",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[AudioWorkletProcessor]* interface of the Web Audio API represents an audio processing code behind a custom [AudioWorkletNode]. It lives in the [AudioWorkletGlobalScope] and runs on the Web Audio rendering thread. In turn, an [AudioWorkletNode] based on it runs on the main thread.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "AuthenticatorAssertionResponse",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [*AuthenticatorAssertionResponse*] interface of the Web Authentication API is returned by [CredentialsContainer.get()] when a [PublicKeyCredential] is passed, and provides proof to a service that it has a key pair and that the authentication request is valid and approved.\n\nThis interface inherites from [AuthenticatorResponse].\n\n\n*Note:* This interface is restricted to top-level contexts. Use from within an [<iframe>] element will not have any effect.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "authenticatorData": {
        "type": "ArrayBuffer",
        "array": false,
        "dartType": "ArrayBuffer",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [ArrayBuffer] containing information from the authenticator such as the Relying Party ID Hash (rpIdHash), a signature counter, test of user presence and user verification flags, and any extensions processed by the authenticator.",
        "event": false
      },
      "signature": {
        "type": "ArrayBuffer",
        "array": false,
        "dartType": "ArrayBuffer",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An assertion signature over [AuthenticatorAssertionResponse.authenticatorData] and [AuthenticatorResponse.clientDataJSON]. The assertion signature is created with the private key of keypair that was created during the [navigator.credentials.create()] call and verified using the public key of that same keypair.",
        "event": false
      },
      "userHandle": {
        "type": "ArrayBuffer",
        "array": false,
        "dartType": "ArrayBuffer",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [ArrayBuffer] containing an opaque user identifier.",
        "event": false
      }
    }
  },
  {
    "name": "AuthenticatorAttestationResponse",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[AuthenticatorAttestationResponse]* interface of the Web Authentication API is returned by [CredentialsContainer.create()] when a [PublicKeyCredential] is passed, and provides a cryptographic root of trust for the new key pair that has been generated. This response should be sent to the relying party's server to complete the creation of the credential.\n\nThis interface inherites from [AuthenticatorResponse].\n\n\n*Note:* This interface is restricted to top-level contexts. Use from within an [<iframe>] element will not have any effect.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "attestationObject": {
        "type": "ArrayBuffer",
        "array": false,
        "dartType": "ArrayBuffer",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [ArrayBuffer] containing authenticator data and an attestation statement for a newly-created key pair.",
        "event": false
      }
    }
  },
  {
    "name": "AuthenticatorResponse",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [*AuthenticatorResponse*] interface of the Web Authentication API is the base interface for interfaces that provide a cryptographic root of trust for a key pair. The child interfaces include information from the browser such as the challenge origin and either may be returned from [PublicKeyCredential.response].",
    "abstract": true,
    "category": "interface",
    "props": {
      "clientDataJSON": {
        "type": "ArrayBuffer",
        "array": false,
        "dartType": "ArrayBuffer",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A JSON string in an [ArrayBuffer], representing the client data that was passed to [CredentialsContainer.create()] or [CredentialsContainer.get()].",
        "event": false
      }
    }
  },
  {
    "name": "BackgroundFetchEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[BackgroundFetchEvent]* interface of the Background Fetch API is the event type for background fetch events dispatched on the [service worker global scope].\n\nIt is the event type passed to [onbackgroundfetchabort] and [onbackgroundfetchclick].",
    "abstract": false,
    "category": "interface",
    "props": {
      "registration": {
        "type": "BackgroundFetchRegistration",
        "array": false,
        "dartType": "BackgroundFetchRegistration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [BackgroundFetchRegistration] that the event was initialized to.",
        "event": false
      }
    }
  },
  {
    "name": "BackgroundFetchManager",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[BackgroundFetchManager]* interface of the Background Fetch API is a map where the keys are background fetch IDs and the values are [BackgroundFetchRegistration] objects.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "BackgroundFetchRecord",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[BackgroundFetchRecord]* interface of the Background Fetch API represents an individual request and response.\n\nA [BackgroundFetchRecord] is created by the [BackgroundFetchManager.fetch()] method, therefore there is no constructor for this interface.\n\nThere will be one [BackgroundFetchRecord] for each resource requested by [fetch()].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "BackgroundFetchRegistration",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[BackgroundFetchRegistration]* interface of the Background Fetch API represents an individual background fetch.\n\nA [BackgroundFetchRegistration] instance is returned by the [BackgroundFetchManager.fetch()] or [BackgroundFetchManager.get()] methods, and therefore there has no constructor.",
    "abstract": true,
    "category": "interface",
    "props": {
      "id": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [string] containing the background fetch's ID.",
        "event": false
      },
      "uploadTotal": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [number] containing the total number of bytes to be uploaded.",
        "event": false
      },
      "uploaded": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [number] containing the size in bytes successfully sent, initially [0].",
        "event": false
      },
      "downloadTotal": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [number] containing the total size in bytes of this download. This is the value set when the background fetch was registered, or [0].",
        "event": false
      },
      "downloaded": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [number] containing the size in bytes that has been downloaded, initially [0].",
        "event": false
      },
      "result": {
        "type": "BackgroundFetchResult",
        "array": false,
        "dartType": "BackgroundFetchResult",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an empty string initially, on completion either the string [\"success\"] or [\"failure\"].",
        "event": false
      },
      "failureReason": {
        "type": "BackgroundFetchFailureReason",
        "array": false,
        "dartType": "BackgroundFetchFailureReason",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "One of the following strings:\n    \n      [\"\"]\n      The background fetch has not completed, or was successful.\n      [\"aborted\"]\n      The operation was cancelled by the user, or [abort()] was called.\n      [\"bad-status\"]\n      A response had a not-ok status (a status outside the range 200-299).\n      [\"fetch-error\"]\n      A fetch failed for other reasons, for example CORS, or a network failure.\n      [\"quota-exceeded\"]\n      Storage quota was reached during the operation.\n      [\"download-total-exceeded\"]\n      The provided [downloadTotal] was exceeded. This value was set when the background fetch was registered.\n    \n  ",
        "event": false
      },
      "recordsAvailable": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [boolean] indicating whether the [recordsAvailable] flag is set.",
        "event": false
      },
      "onprogress": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Fired when there is a change to any of the following properties:\n    \n      [uploaded]\n      [downloaded]\n      [result]\n      [failureReason]\n    \n  ",
        "event": false
      }
    }
  },
  {
    "name": "BackgroundFetchUpdateUIEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[BackgroundFetchUpdateUIEvent]* interface of the Background Fetch API is an event type passed to [ServiceWorkerGlobalScope.onbackgroundfetchsuccess] and [ServiceWorkerGlobalScope.onbackgroundfetchfail], and provides a method for updating the title and icon of the app to inform a user of the success or failure of a background fetch. ",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "BaseAudioContext",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [BaseAudioContext] interface of the Web Audio API acts as a base definition for online and offline audio-processing graphs, as represented by [AudioContext] and [OfflineAudioContext] respectively. You wouldn't use [BaseAudioContext] directly — you'd use its features via one of these two inheriting interfaces.\n\nA [BaseAudioContext] can be a target of events, therefore it implements the [EventTarget] interface.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "audioWorklet": {
        "type": "AudioWorklet",
        "array": false,
        "dartType": "AudioWorklet",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [AudioWorklet] object, which can be used to create and manage [AudioNode]s in which JavaScript code implementing the [AudioWorkletProcessor] interface are run in the background to process audio data.",
        "event": false
      },
      "currentTime": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a double representing an ever-increasing hardware time in seconds used for scheduling. It starts at [0].",
        "event": false
      },
      "destination": {
        "type": "AudioDestinationNode",
        "array": false,
        "dartType": "AudioDestinationNode",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [AudioDestinationNode] representing the final destination of all audio in the context. It can be thought of as the audio-rendering device.",
        "event": false
      },
      "listener": {
        "type": "AudioListener",
        "array": false,
        "dartType": "AudioListener",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [AudioListener] object, used for 3D spatialization.",
        "event": false
      },
      "sampleRate": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a float representing the sample rate (in samples per second) used by all nodes in this context. The sample-rate of an [AudioContext] cannot be changed.",
        "event": false
      },
      "state": {
        "type": "AudioContextState",
        "array": false,
        "dartType": "AudioContextState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the current state of the [AudioContext].",
        "event": false
      },
      "onstatechange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An event handler that runs when an event of type [statechange] has fired. This occurs when the [AudioContext]'s state changes, due to the calling of one of the state change methods ([AudioContext.suspend], [AudioContext.resume], or [AudioContext.close]).",
        "event": false
      }
    }
  },
  {
    "name": "BasicCardRequest",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[BasicCardRequest]* dictionary is a JavaScript object-structure that can be used in the Payment Request API. The properties of [BasicCardRequest] are defined in the Basic Card Payment spec).",
    "abstract": true,
    "category": "interface",
    "props": {
      "supportedNetworks": {
        "type": "DOMString",
        "array": true,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An optional array of [DOMString]s representing the card networks that the retailer supports (e.g. \"[amex\"], \"[mastercard\"]); see Card network identifiers for a complete list. If the property is missing, it implies that all networks are supported.",
        "event": false,
        "default": "[]"
      }
    }
  },
  {
    "name": "BasicCardResponse",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[BasicCardResponse]* dictionary (related to the Payment Request API, although defined in the Basic Card Payment spec) defines an object structure for payment response details such as the number/expiry date of the card used to make the payment, and the billing address.",
    "abstract": true,
    "category": "interface",
    "props": {
      "cardNumber": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the number of the card used to make the payment.",
        "event": false
      },
      "cardholderName": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the cardholder name of the card used to make the payment.",
        "event": false,
        "default": "\"\""
      },
      "cardSecurityCode": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the security code of the card used to make the payment.",
        "event": false,
        "default": "\"\""
      },
      "expiryMonth": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the expiry month of the card used to make the payment.",
        "event": false,
        "default": "\"\""
      },
      "expiryYear": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the expiry year of the card used to make the payment.",
        "event": false,
        "default": "\"\""
      },
      "billingAddress": {
        "type": "PaymentAddress",
        "array": false,
        "dartType": "PaymentAddress",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the billing address of the card used to make the payment.",
        "event": false,
        "default": "null"
      }
    }
  },
  {
    "name": "BatteryManager",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe [BatteryManager] interface of the Battery Status API provides information about the system's battery charge level. The [navigator.getBattery()] method returns a promise that resolves with a [BatteryManager] interface.",
    "abstract": true,
    "category": "interface",
    "props": {
      "charging": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A Boolean value indicating whether the battery is currently being charged.",
        "event": false
      },
      "chargingTime": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A number representing the remaining time in seconds until the battery is fully charged, or 0 if the battery is already fully charged.",
        "event": false
      },
      "dischargingTime": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A number representing the remaining time in seconds until the battery is completely discharged and the system suspends.",
        "event": false
      },
      "level": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A number representing the system's battery charge level scaled to a value between 0.0 and 1.0.",
        "event": false
      },
      "onchargingchange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A handler for the [chargingchange] event; This event is sent when the battery charging state is updated.",
        "event": false
      },
      "onchargingtimechange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A handler for the [chargingtimechange] event; This event is sent when the battery charging time is updated",
        "event": false
      },
      "ondischargingtimechange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A handler for the [dischargingtimechange] event; This event is sent when the battery discharging time is updated.",
        "event": false
      },
      "onlevelchange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A handler for the [levelchange] event; This event is sent when the battery level is updated.",
        "event": false
      }
    }
  },
  {
    "name": "BeforeUnloadEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[beforeunload]* event is fired when the window, the document and its resources are about to be unloaded.\n\nWhen a non-empty string is assigned to the [returnValue] Event property, a dialog box appears, asking the users for confirmation to leave the page (see example below). When no value is provided, the event is processed silently. Some implementations only show the dialog box if the frame or any embedded frame receives a user gesture or user interaction. See Browser compatibility for more information.\n\n\n\n\n\n\n \n  \n   Bubbles\n   No\n  \n  \n   Cancelable\n   Yes\n  \n  \n   Target objects\n   defaultView\n  \n  \n   Interface\n   [Event]\n  \n \n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "BiquadFilterNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\nThe [BiquadFilterNode] interface represents a simple low-order filter, and is created using the [BaseAudioContext/createBiquadFilter] method. It is an [AudioNode] that can represent different kinds of filters, tone control devices, and graphic equalizers. A [BiquadFilterNode] always has exactly one input and one output.\n\n\n\n \n  \n   Number of inputs\n   [1]\n  \n  \n   Number of outputs\n   [1]\n  \n  \n   Channel count mode\n   [\"max\"]\n  \n  \n   Channel count\n   [2] (not used in the default count mode)\n  \n  \n   Channel interpretation\n   [\"speakers\"]\n  \n \n",
    "abstract": false,
    "category": "interface",
    "props": {
      "frequency": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an a-rate [AudioParam], a double representing a frequency in the current filtering algorithm measured in hertz (Hz).",
        "event": false
      },
      "detune": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an a-rate [AudioParam] representing detuning of the frequency in cents.",
        "event": false
      },
      "Q": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an a-rate [AudioParam], a double representing a Q factor, or quality factor.",
        "event": false
      },
      "gain": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an a-rate [AudioParam], a double representing the gain used in the current filtering algorithm.",
        "event": false
      },
      "type": {
        "type": "BiquadFilterType",
        "array": false,
        "dartType": "BiquadFilterType",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a string value defining the kind of filtering algorithm the node is implementing.\n\n \n  The meaning of the different parameters depending of the type of the filter (detune has the same meaning regardless, so isn't listed below)\n  \n   \n    [type]\n    Description\n    [frequency]\n    [Q]\n    [gain]\n   \n  \n  \n   \n    [lowpass]\n    Standard second-order resonant lowpass filter with 12dB/octave rolloff. Frequencies below the cutoff pass through; frequencies above it are attenuated.\n    The cutoff frequency.\n    Indicates how peaked the frequency is around the cutoff. The greater the value is, the greater is the peak.\n    Not used\n   \n   \n    [highpass]\n    Standard second-order resonant highpass filter with 12dB/octave rolloff. Frequencies below the cutoff are attenuated; frequencies above it pass through.\n    The cutoff frequency.\n    Indicates how peaked the frequency is around the cutoff. The greater the value, the greater the peak.\n    Not used\n   \n   \n    [bandpass]\n    Standard second-order bandpass filter. Frequencies outside the given range of frequencies are attenuated; the frequencies inside it pass through.\n    The center of the range of frequencies.\n    Controls the width of the frequency band. The greater the [Q] value, the smaller the frequency band.\n    Not used\n   \n   \n    [lowshelf]\n    Standard second-order lowshelf filter. Frequencies lower than the frequency get a boost, or an attenuation; frequencies over it are unchanged.\n    The upper limit of the frequencies getting a boost or an attenuation.\n    Not used\n    The boost, in dB, to be applied; if negative, it will be an attenuation.\n   \n   \n    [highshelf]\n    Standard second-order highshelf filter. Frequencies higher than the frequency get a boost or an attenuation; frequencies lower than it are unchanged.\n    The lower limit of the frequencies getting a boost or an attenuation.\n    Not used\n    The boost, in dB, to be applied; if negative, it will be an attenuation.\n   \n   \n    [peaking]\n    Frequencies inside the range get a boost or an attenuation; frequencies outside it are unchanged.\n    The middle of the frequency range getting a boost or an attenuation.\n    Controls the width of the frequency band. The greater the [Q] value, the smaller the frequency band.\n    The boost, in dB, to be applied; if negative, it will be an attenuation.\n   \n   \n    [notch]\n    Standard notch filter, also called a band-stop or band-rejection filter. It is the opposite of a bandpass filter: frequencies outside the give range of frequencies pass through; frequencies inside it are attenuated.\n    The center of the range of frequencies.\n    Controls the width of the frequency band. The greater the [Q] value, the smaller the frequency band.\n    Not used\n   \n   \n    [allpass]\n    Standard second-order allpass filter. It lets all frequencies through, but changes the phase-relationship between the various frequencies.\n    The frequency with the maximal group delay, that is, the frequency where the center of the phase transition occurs.\n    Controls how sharp the transition is at the medium frequency. The larger this parameter is, the sharper and larger the transition will be.\n    Not used\n   \n  \n \n ",
        "event": false
      }
    }
  },
  {
    "name": "Blob",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Blob]* object represents a blob, which is a file-like object of immutable, raw data; they can be read as text or binary data, or converted into a [ReadableStream] so its methods can be used for processing the data.\n\nBlobs can represent data that isn't necessarily in a JavaScript-native format. The [File] interface is based on [Blob], inheriting blob functionality and expanding it to support files on the user's system.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "BlobEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[BlobEvent]* interface represents events associated with a [Blob]. These blobs are typically, but not necessarily,  associated with media content.",
    "abstract": false,
    "category": "interface",
    "props": {
      "data": {
        "type": "Blob",
        "array": false,
        "dartType": "Blob",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Blob] representing the data associated with the event. The event was fired on the [EventTarget] because of something happening on that specific [Blob].",
        "event": false
      },
      "timecode": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] indicating the difference between the timestamp of the first chunk in data and the timestamp of the first chunk in the first BlobEvent produced by this recorder. Note that the timecode in the first produced BlobEvent does not need to be zero.",
        "event": false
      }
    }
  },
  {
    "name": "Bluetooth",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[Bluetooth]* interface of the Web Bluetooth API returns a\n  [Promise] to a [BluetoothDevice] object with the specified\n  options.",
    "abstract": true,
    "category": "interface",
    "props": {
      "referringDevice": {
        "type": "BluetoothDevice",
        "array": false,
        "dartType": "BluetoothDevice",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the device, if any, from which the user opened the current\n    page. For example, an Eddystone beacon might advertise a URL, which the user agent\n    allows the user to open. A BluetoothDevice representing the beacon would be available\n    through [navigator.bluetooth.referringDevice].",
        "event": false
      }
    }
  },
  {
    "name": "BluetoothDevice",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe BluetoothDevice interface of the Web Bluetooth\n    API represents a Bluetooth device inside a particular script execution\n  environment.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "id": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] that uniquely identifies a device.",
        "event": false
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] that provices a human-readable name for the device.",
        "event": false
      },
      "gatt": {
        "type": "BluetoothRemoteGATTServer",
        "array": false,
        "dartType": "BluetoothRemoteGATTServer",
        "nullable": true,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "A reference to the device's [BluetoothRemoteGATTServer].",
        "event": false
      },
      "watchingAdvertisements": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "If advertisments were activated using\n    [BluetoothDevice.watchAdvertisements()].",
        "event": false
      }
    }
  },
  {
    "name": "BluetoothRemoteGATTCharacteristic",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [BluetoothRemoteGattCharacteristic] interface of the Web Bluetooth API represents a GATT Characteristic, which is a basic data element that provides further information about a peripheral’s service.",
    "abstract": true,
    "category": "interface",
    "props": {
      "service": {
        "type": "BluetoothRemoteGATTService",
        "array": false,
        "dartType": "BluetoothRemoteGATTService",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [BluetoothRemoteGATTService] this characteristic belongs to.",
        "event": false
      },
      "uuid": {
        "type": "UUID",
        "array": false,
        "dartType": "UUID",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] containing the UUID of the characteristic, for example ['00002a37-0000-1000-8000-00805f9b34fb'] for the Heart Rate Measurement characteristic.",
        "event": false
      },
      "properties": {
        "type": "BluetoothCharacteristicProperties",
        "array": false,
        "dartType": "BluetoothCharacteristicProperties",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the properties of this characteristic.",
        "event": false
      },
      "value": {
        "type": "DataView",
        "array": false,
        "dartType": "DataView",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The currently cached characteristic value. This value gets updated when the value of the characteristic is read or updated via a notification or indication.",
        "event": false
      }
    }
  },
  {
    "name": "BluetoothRemoteGATTDescriptor",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [BluetoothRemoteGATTDescriptor] interface of the Web Bluetooth API provides a GATT Descriptor,\n  which provides further information about a characteristic’s value.\n\n\n  This page describes the W3C Community Group Web Bluetooth API. For the Firefox OS\n    Bluetooth API, see [BluetoothGattDescriptor]\n      (Firefox OS).\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "characteristic": {
        "type": "BluetoothRemoteGATTCharacteristic",
        "array": false,
        "dartType": "BluetoothRemoteGATTCharacteristic",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [BluetoothRemoteGATTCharacteristic] this descriptor belongs\n    to.",
        "event": false
      },
      "uuid": {
        "type": "UUID",
        "array": false,
        "dartType": "UUID",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the UUID of the characteristic descriptor, for\n    example '[00002902-0000-1000-8000-00805f9b34fb]' for theClient\n    Characteristic Configuration descriptor.",
        "event": false
      },
      "value": {
        "type": "DataView",
        "array": false,
        "dartType": "DataView",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the currently cached descriptor value. This value gets updated when the\n    value of the descriptor is read.",
        "event": false
      }
    }
  },
  {
    "name": "BluetoothRemoteGATTServer",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [*BluetoothRemoteGATTServer*] interface of the Web Bluetooth API represents a GATT\n  Server on a remote device.\n\n\n  This page describes the W3C Community Group Web Bluetooth API. For the Firefox OS\n    Bluetooth API, see [BluetoothGattServer]\n      (Firefox OS).\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "connected": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A boolean value that returns true while this script execution environment is\n    connected to [this.device]. It can be false while the user agent is\n    physically connected.",
        "event": false
      },
      "device": {
        "type": "BluetoothDevice",
        "array": false,
        "dartType": "BluetoothDevice",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A reference to the [BluetoothDevice] running the server.",
        "event": false
      }
    }
  },
  {
    "name": "BluetoothRemoteGATTService",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n  \n    This page describes the W3C Community Group BluetoothRemoteGATTService, formerly\n      called BluethoothGATTService. For the Firefox OS interface of the same name,\n      see [BluetoothGattService].\n    \n  \n\n\nThe [BluetoothRemoteGATTService] interface of the Web Bluetooth API represents a\n  service provided by a GATT server, including a device, a list of referenced services,\n  and a list of the characteristics of this service.",
    "abstract": true,
    "category": "interface",
    "props": {
      "device": {
        "type": "BluetoothDevice",
        "array": false,
        "dartType": "BluetoothDevice",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns information about a Bluetooth device through an instance of\n    [BluetoothDevice].",
        "event": false
      },
      "isPrimary": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] Indicating whether this is a primary or secondary\n    service. ",
        "event": false
      },
      "uuid": {
        "type": "UUID",
        "array": false,
        "dartType": "UUID",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] representing the UUID of this service.",
        "event": false
      }
    }
  },
  {
    "name": "Body",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Body]* mixin of the Fetch API represents the body of the response/request, allowing you to declare what its content type is and how it should be handled.\n\n[Body] is implemented by both [Request] and [Response]. This provides these objects with an associated body (a stream), a used flag (initially unset), and a MIME type (initially the empty byte sequence).",
    "abstract": true,
    "category": "interface",
    "props": {
      "body": {
        "type": "ReadableStream",
        "array": false,
        "dartType": "ReadableStream",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A simple getter used to expose a [ReadableStream] of the body contents.",
        "event": false
      },
      "bodyUsed": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] that indicates whether the body has been read.",
        "event": false
      }
    }
  },
  {
    "name": "BroadcastChannel",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*BroadcastChannel*] interface represents a named channel that any browsing context of a given origin can subscribe to. It allows communication between different documents (in different windows, tabs, frames or iframes) of the same origin. Messages are broadcasted via a [message] event fired at all [BroadcastChannel] objects listening to the channel.\n\n\n  *Note:* This feature is available in Web Workers\n\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString], the name of the channel.",
        "event": false
      },
      "onmessage": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [event handler] property that specifies the function to execute when a [message] event is fired on this object.",
        "event": true
      },
      "onmessageerror": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [event handler] called when a [MessageEvent] of type [MessageError] is fired—that is, when it receives a message that cannot be deserialized.",
        "event": true
      }
    }
  },
  {
    "name": "ByteLengthQueuingStrategy",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[ByteLengthQueuingStrategy]* interface of the Streams API provides a built-in byte length queuing strategy that can be used when constructing streams.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Cache",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Cache]* interface provides a persistent storage mechanism for [[Request]] / [[Response]] object pairs that are cached in long lived memory. How long a Cache lives is browser dependent, but a single origin's scripts can typically rely on the presence of a previously populated Cache. Note that the [Cache] interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.\n\nAn origin can have multiple, named [Cache] objects. You are responsible for implementing how your script (e.g. in a [ServiceWorker]) handles [Cache] updates. Items in a [Cache] do not get updated unless explicitly requested; they don’t expire unless deleted. Use [CacheStorage.open()] to open a specific named [Cache] object and then call any of the [Cache] methods to maintain the [Cache].\n\nYou are also responsible for periodically purging cache entries. Each browser has a hard limit on the amount of cache storage that a given origin can use. Cache quota usage estimates are available via the [StorageEstimate] API. The browser does its best to manage disk space, but it may delete the Cache storage for an origin. The browser will generally delete all of the data for an origin or none of the data for an origin. Make sure to version caches by name and use the caches only from the version of the script that they can safely operate on. See Deleting old caches for more information.\n\n\n  Note\n  The key matching algorithm depends on the VARY header in the value. So matching a new key requires looking at both key and value for entries in the Cache.\n\n\n\n  Note\n  The caching API doesn't honor HTTP caching headers.\n\n\n\n  *Note:* This feature is available in Web Workers\n\nSecure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CacheStorage",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CacheStorage]* interface represents the storage for [Cache] objects.\n\nThe interface:\n\n\n Provides a master directory of all the named caches that can be accessed by a [ServiceWorker] or other type of worker or [window] scope (you’re not limited to only using it with service workers, even though the Service Workers spec defines it).\n  \n    Note\n    Chrome and Safari only expose `CacheStorage` to the windowed context over HTTPS. [WorkerGlobalScope.caches] will be undefined unless an SSL certificate is configured.\n  \n \n Maintains a mapping of string names to corresponding [Cache] objects.\n\n\nUse [CacheStorage.open()] to obtain a [Cache] instance.\n\nUse [CacheStorage.match()] to check if a given [Request] is a key in any of the [Cache] objects that the [CacheStorage] object tracks.\n\nYou can access [CacheStorage] through the global [caches] property.\n\n\n  Note\n  CacheStorage always rejects with a [SecurityError] on untrusted origins (i.e. those that aren't using HTTPS, although this definition will likely become more complex in the future.) When testing on Firefox, you can get around this by checking the *Enable Service Workers over HTTP (when toolbox is open)* option in the Firefox Devtools options/gear menu.\n\n\n\n  Note\n  [CacheStorage.match()] is a convenience method. Equivalent functionality to match a cache entry can be implemented by returning an array of cache names from [CacheStorage.keys()], opening each cache with [CacheStorage.open()], and matching the one you want with [Cache.match()].\n\n\n\n  *Note:* This feature is available in Web Workers\n\nSecure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CanvasCaptureMediaStreamTrack",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CanvasCaptureMediaStreamTrack]* interface represents the video track contained in a [MediaStream] being generated from a [<canvas>] following a call to [HTMLCanvasElement.captureStream()].\n\nPart of the Media Capture and Streams API.",
    "abstract": true,
    "category": "interface",
    "props": {
      "canvas": {
        "type": "HTMLCanvasElement",
        "array": false,
        "dartType": "HTMLCanvasElement",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [HTMLCanvasElement] object whose surface is captured in real-time.",
        "event": false
      }
    }
  },
  {
    "name": "CanvasGradient",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "The [*CanvasGradient*] interface represents an opaque object describing a gradient. It is returned by the methods [CanvasRenderingContext2D.createLinearGradient()], [CanvasRenderingContext2D.createConicGradient()] or [CanvasRenderingContext2D.createRadialGradient()].\n\nIt can be used as a [fillStyle] or [strokeStyle].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CanvasPattern",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*CanvasPattern*] interface represents an opaque object describing a pattern, based on an image, a canvas, or a video, created by the [CanvasRenderingContext2D.createPattern()] method.\n\nIt can be used as a [fillStyle] or [strokeStyle].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CanvasRenderingContext2D",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*CanvasRenderingContext2D*] interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a [<canvas>] element. It is used for drawing shapes, text, images, and other objects.\n\nSee the interface's properties and methods in the sidebar and below. The Canvas tutorial has more explanation, examples, and resources, as well.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CaretPosition",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n \n\nThe [CaretPosition] interface represents the caret position, an indicator for the text insertion point. You can get a [CaretPosition] using the [Document.caretPositionFromPoint()] method.",
    "abstract": true,
    "category": "interface",
    "props": {
      "offsetNode": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Node] containing the found node at the caret's position.",
        "event": false
      },
      "offset": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [long] representing the character offset in the caret position node.",
        "event": false
      }
    }
  },
  {
    "name": "CDATASection",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*CDATASection*] interface represents a CDATA section\n  that can be used within XML to include extended portions of unescaped text. The symbols\n  [<] and [&] don’t need escaping as they normally do when\n  inside a CDATA section.\n\nIn XML, a CDATA section looks like:\n\n[<![CDATA[ ... ]]>\n]\n\nFor example:\n\n[<foo>Here is a CDATA section: <![CDATA[ < > & ]]> with all kinds of unescaped text.</foo>\n]\n\nThe only sequence which is not allowed within a CDATA section is the closing sequence\n  of a CDATA section itself, []]>]:\n\n[<![CDATA[ ]]> will cause an error ]]>\n]\n\nNote that CDATA sections should not be used within HTML; they only work in XML.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "ChannelMergerNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [ChannelMergerNode] interface, often used in conjunction with its opposite, [ChannelSplitterNode], reunites different mono inputs into a single output. Each input is used to fill a channel of the output. This is useful for accessing each channels separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.\n\n\n\nIf [ChannelMergerNode] has one single output, but as many inputs as there are channels to merge; the number of inputs is defined as a parameter of its constructor and the call to [AudioContext.createChannelMerger()]. In the case that no value is given, it will default to [6].\n\nUsing a [ChannelMergerNode], it is possible to create outputs with more channels than the rendering hardware is able to process. In that case, when the signal is sent to the [AudioContext.listener] object, supernumerary channels will be ignored.\n\n\n \n  \n   Number of inputs\n   variable; default to [6].\n  \n  \n   Number of outputs\n   [1]\n  \n  \n   Channel count mode\n   [\"max\"]\n  \n  \n   Channel count\n   [2 ](not used in the default count mode)\n  \n  \n   Channel interpretation\n   [\"speakers\"]\n  \n \n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "ChannelSplitterNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [ChannelSplitterNode] interface, often used in conjunction with its opposite, [ChannelMergerNode], separates the different channels of an audio source into a set of mono outputs. This is useful for accessing each channel separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.\n\n\n\nIf your [ChannelSplitterNode] always has one single input, the amount of outputs is defined by a parameter on its constructor and the call to [AudioContext.createChannelSplitter()]. In the case that no value is given, it will default to [6]. If there are fewer channels in the input than there are outputs, supernumerary outputs are silent.\n\n\n \n  \n   Number of inputs\n   [1]\n  \n  \n   Number of outputs\n   variable; default to [6].\n  \n  \n   Channel count mode\n   [\"explicit]\" Older implementations, as per earlier versions of the spec use [\"max\"].\n  \n  \n   Channel count\n   Fixed to the number of outputs. Older implementations, as per earlier versions of the spec use [2 ](not used in the default count mode).\n  \n  \n   Channel interpretation\n   [\"discrete\"]\n  \n \n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CharacterData",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*CharacterData*] abstract interface represents a [Node] object that contains characters. This is an abstract interface, meaning there aren't any objects of type [CharacterData]: it is implemented by other interfaces like [Text], [Comment], or [ProcessingInstruction], which aren't abstract.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "data": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the textual data contained in this object.",
        "event": false
      },
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [unsigned long] representing the size of the string contained in [CharacterData.data].",
        "event": false
      }
    }
  },
  {
    "name": "ChildNode",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*ChildNode*] mixin contains methods and properties that are common to all types of [Node] objects that can have a parent. It's implemented by [Element], [DocumentType], and [CharacterData] objects.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Client",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [Client] interface represents an executable context such as a [Worker], or a [SharedWorker]. [Window] clients are represented by the more-specific [WindowClient]. You can get [Client]/[WindowClient] objects from methods such as [Clients.matchAll()] and [Clients.get()].",
    "abstract": true,
    "category": "interface",
    "props": {
      "id": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The universally unique identifier of the client as a string.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The client's type as a string. It can be \"[window\"], \"[worker\"], or \"[sharedworker\"].",
        "event": false
      },
      "url": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The URL of the client as a string.",
        "event": false
      }
    }
  },
  {
    "name": "Clients",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [Clients] interface provides access to [Client] objects. Access it via [[self].clients] within a service worker.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Clipboard",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Clipboard]* interface implements the Clipboard API, providing—if the user grants permission—both read and write access to the contents of the system clipboard. The Clipboard API can be used to implement cut, copy, and paste features within a web application.\n\nThe system clipboard is exposed through the global [Navigator.clipboard] property.\n\nCalls to the methods of the [Clipboard] object will not succeed if the user hasn't granted the needed permissions using the Permissions API and the [\"clipboard-read\"] or [\"clipboard-write\"] permission as appropriate.\n\n\n*Note:* In reality, at this time browser requirements for access to the clipboard vary significantly. Please see the section Clipboard availability for details.\n\n\nAll of the Clipboard API methods operate asynchronously; they return a [Promise] which is resolved once the clipboard access has been completed. The promise is rejected if clipboard access is denied.\n\n\nThe *clipboard *is a data buffer that is used for short-term, data storage and/or data transfers, this can be between documents or applications\n  It is usually implemented as an anonymous, temporary data buffer, sometimes called the paste buffer, that can be accessed from most or all programs within the environment via defined programming interfaces.\n\nA typical application accesses clipboard functionality by mapping user input such as keybindings, menu selections, etc. to these interfaces.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "ClipboardEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": " \n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[ClipboardEvent]* interface represents events providing information related to modification of the clipboard, that is [cut], [copy], and [paste] events.",
    "abstract": false,
    "category": "interface",
    "props": {
      "clipboardData": {
        "type": "DataTransfer",
        "array": false,
        "dartType": "DataTransfer",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DataTransfer] object containing the data affected by the user-initiated [cut], [copy], or [paste] operation, along with its MIME type.",
        "event": false
      }
    }
  },
  {
    "name": "ClipboardItem",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ClipboardItem]* interface of the [Clipboard API] represents a single item format, used when reading or writing data via the [Clipboard API]. That is [clipboard.read()] and [clipboard.write()] respectively.\n\nThe benefit of having the *[ClipboardItem]* interface to represent data, is that it enables developers to cope with the varying scope of file types and data easily.\n\nAccess to the contents of the clipboard is gated behind the Permissions API: The [clipboard-write] permission is granted automatically to pages when they are in the active tab. The [clipboard-read] permission must be requested, which you can do by trying to read data from the clipboard.\n\n\n*Note*: To work with text see the [Clipboard.readText()] and [Clipboard.writeText()] methods of the [Clipboard] interface.\n\n\n\n*Note*: You can only pass in one clipboard item at a time.\n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CloseEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nA [CloseEvent] is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the [WebSocket] object's [onclose] attribute.",
    "abstract": false,
    "category": "interface",
    "props": {
      "code": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [unsigned short] containing the close code sent by the server. The following values are permitted status codes. The following definitions are sourced from the IANA website [Ref]. Note that the 1xxx codes are only WebSocket-internal and not for the same meaning by the transported data (like when the application-layer protocol is invalid). The only permitted codes to be specified in Firefox are 1000 and 3000 to 4999 [Source, Bug].\n \n  \n   \n    Status code\n    Name\n    Description\n   \n   \n    [0]–[999]\n    \n    *Reserved and not used.*\n   \n   \n    [1000]\n    Normal Closure\n    Normal closure; the connection successfully completed whatever purpose for which it was created.\n   \n   \n    [1001]\n    Going Away\n    The endpoint is going away, either because of a server failure or because the browser is navigating away from the page that opened the connection.\n   \n   \n    [1002]\n    Protocol Error\n    The endpoint is terminating the connection due to a protocol error.\n   \n   \n    [1003]\n    Unsupported Data\n    The connection is being terminated because the endpoint received data of a type it cannot accept (for example, a text-only endpoint received binary data).\n   \n   \n    [1004]\n    \n    *Reserved.* A meaning might be defined in the future.\n   \n   \n    [1005]\n    No Status Received\n    *Reserved.*  Indicates that no status code was provided even though one was expected.\n   \n   \n    [1006]\n    Abnormal Closure\n    *Reserved.* Used to indicate that a connection was closed abnormally (that is, with no close frame being sent) when a status code is expected.\n   \n   \n    [1007]\n    Invalid frame payload data\n    The endpoint is terminating the connection because a message was received that contained inconsistent data (e.g., non-UTF-8 data within a text message).\n   \n   \n    [1008]\n    Policy Violation\n    The endpoint is terminating the connection because it received a message that violates its policy. This is a generic status code, used when codes 1003 and 1009 are not suitable.\n   \n   \n    [1009]\n    Message too big\n    The endpoint is terminating the connection because a data frame was received that is too large.\n   \n   \n    [1010]\n    Missing Extension\n    The client is terminating the connection because it expected the server to negotiate one or more extension, but the server didn't.\n   \n   \n    [1011]\n    Internal Error\n    The server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request.\n   \n   \n    [1012]\n    Service Restart\n    The server is terminating the connection because it is restarting. [Ref]\n   \n   \n    [1013]\n    Try Again Later\n    The server is terminating the connection due to a temporary condition, e.g. it is overloaded and is casting off some of its clients. [Ref]\n   \n   \n    [1014]\n    Bad Gateway\n    The server was acting as a gateway or proxy and received an invalid response from the upstream server. This is similar to 502 HTTP Status Code.\n   \n   \n    [1015]\n    TLS Handshake\n    *Reserved.* Indicates that the connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified).\n   \n   \n    [1016]–[1999]\n    \n    *Reserved for future use by the WebSocket standard.*\n   \n   \n    [2000]–[2999]\n    \n    *Reserved for use by WebSocket extensions.*\n   \n   \n    [3000]–[3999]\n    \n    Available for use by libraries and frameworks. *May not* be used by applications. Available for registration at the IANA via first-come, first-serve.\n   \n   \n    [4000]–[4999]\n    \n    Available for use by applications.\n   \n  \n \n ",
        "event": false
      },
      "reason": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] indicating the reason the server closed the connection. This is specific to the particular server and sub-protocol.",
        "event": false
      },
      "wasClean": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] that Indicates whether or not the connection was cleanly closed.",
        "event": false
      }
    }
  },
  {
    "name": "Comment",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*Comment*] interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view. Comments are represented in HTML and XML as content between '[<!--]' and '[-->]'. In XML, the character sequence '[--]' cannot be used within a comment.\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CompositionEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe DOM *[CompositionEvent]* represents events that occur due to the user indirectly entering text.\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "data": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the characters generated by the input method that raised the event; its varies depending on the type of event that generated the [CompositionEvent] object.",
        "event": false
      }
    }
  },
  {
    "name": "CompressionStream",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CompressionStream]* interface of the Compression Streams API is an API for compressing a stream of data.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "console",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[console]* object provides access to the browser's debugging console (e.g. the Web Console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.\n\nThe [console] object can be accessed from any global object. [Window] on browsing scopes and [WorkerGlobalScope] as specific variants in workers via the property console. It's exposed as [Window.console], and can be referenced as [console]. For example:\n\n[console.log(\"Failed to open the specified link\")]\n\nThis page documents the Methods available on the [console] object and gives a few Usage examples.\n\n\n  *Note:* This feature is available in Web Workers\n\n\n\n*Note*: The actual [console] interface is defined as all lower case (i.e. not [Console]), for historical reasons.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "ConstantSourceNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [ConstantSourceNode] interface—part of the Web Audio API—represents an audio source (based upon [AudioScheduledSourceNode]) whose output is single unchanging value. This makes it useful for cases in which you need a constant value coming in from an audio source. In addition, it can be used like a constructible [AudioParam] by automating the value of its [offset] or by connecting another node to it; see Controlling multiple parameters with ConstantSourceNode.\n\nA [ConstantSourceNode] has no inputs and exactly one monaural (one-channel) output. The output's value is always the same as the value of the [offset] parameter.\n\n\n \n  \n   Number of inputs\n   [0]\n  \n  \n   Number of outputs\n   [1]\n  \n \n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "ConstrainDOMString",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ConstrainDOMString]* dictionary is used to specify a constraint for a property whose value is a string. It allows you to specify one or more [exact] string values from which one must be the parameter's value, or a set of [ideal] values which should be used if possible. You can also specify a single string (or an array of strings) which the user agent will do its best to match once all more stringent constraints have been applied.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "ConvolverNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [ConvolverNode] interface is an [AudioNode] that performs a Linear Convolution on a given [AudioBuffer], often used to achieve a reverb effect. A [ConvolverNode] always has exactly one input and one output.\n\n\n*Note*: For more information on the theory behind Linear Convolution, see the Convolution article on Wikipedia.\n\n\n\n\t\n\t\t\n\t\t\tNumber of inputs\n\t\t\t[1]\n\t\t\n\t\t\n\t\t\tNumber of outputs\n\t\t\t[1]\n\t\t\n\t\t\n\t\t\tChannel count mode\n\t\t\t[\"clamped-max\"]\n\t\t\n\t\t\n\t\t\tChannel count\n\t\t\t[1], [2], or [4]\n\t\t\n\t\t\n\t\t\tChannel interpretation\n\t\t\t[\"speakers\"]\n\t\t\n\t\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "buffer": {
        "type": "AudioBuffer",
        "array": false,
        "dartType": "AudioBuffer",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A mono, stereo, or 4-channel [AudioBuffer] containing the (possibly multichannel) impulse response used by the [ConvolverNode] to create the reverb effect.",
        "event": false
      },
      "normalize": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the [buffer] attribute is set, or not.",
        "event": false
      }
    }
  },
  {
    "name": "CookieChangeEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[CookieChangeEvent]* interface of the [Cookie Store API] is the event type passed to [CookieStore.onchange()] when any cookie changes have occurred. A cookie change consists of a cookie and a type (either \"changed\" or \"deleted\").\n\nCookie changes that will cause the [CookieChangeEvent] to be dispatched are:\n\n\n  A cookie is newly created and not immediately removed. In this case [type] is \"changed\".\n  A cookie is newly created and immediately removed. In this case [type] is \"deleted\"\n  A cookie is removed. In this case [type] is \"deleted\".\n\n\n\n  Note\n  A cookie that is replaced due to the insertion of another cookie with the same name, domain, and path, is ignored and does not trigger a change event.\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "changed": {
        "type": "FrozenArray<CookieListItem>",
        "array": false,
        "dartType": "FrozenArray<CookieListItem>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an array containing one or more changed cookies.",
        "event": false
      },
      "deleted": {
        "type": "FrozenArray<CookieListItem>",
        "array": false,
        "dartType": "FrozenArray<CookieListItem>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an array containing one or more deleted cookies.",
        "event": false
      }
    }
  },
  {
    "name": "CookieStore",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[CookieStore]* interface of the [Cookie Store API] provides methods for getting and setting cookies asynchronously from either a page or a service worker.\n\nThe [CookieStore] is accessed via attributes in the global scope in a [Window] or [ServiceWorkerGlobalScope] context. Therefore there is no constructor.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CookieStoreManager",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[CookieStoreManager]* interface of the [Cookie Store] API allows service workers to subscribe to events for cookie changes. By using the [subscribe()] method a particular service worker registration can indicate that it is interested in change events.\n\nA [CookieStoreManager] has an associated [ServiceWorkerRegistration]. Each service worker registration has a cookie change subscription list, which is a list of cookie change subscriptions each containing a name and url. The methods in this interface allow the service worker to add and remove subscriptions from this list, and to get a list of all subscriptions.\n\nTo get a [CookieStoreManager], call [ServiceWorkerRegistration.cookies].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CountQueuingStrategy",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[CountQueuingStrategy]* interface of the Streams API provides a built-in chunk counting queuing strategy that can be used when constructing streams.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CrashReportBody",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [CrashReportBody] interface of the Reporting API represents the body of a crash report (the return value of its [Report.body] property).\n\nA crash report is generated when a document becomes unusable due to the browser (or one of its processes) crashing. For security reasons, no details of the crash are communicated in the body except for a general crash reason.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Credential",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\nSecure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[Credential]* interface of the Credential Management API provides information about an entity (usually a user) as a prerequisite to a trust decision.\n\n[Credential] objects may be of 3 different types:\n\n\n [PasswordCredential]\n [PublicKeyCredential]\n [FederatedCredential]\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "id": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] containing the credential's identifier. This might be any one of a GUID, username, or email address.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] containing the credential's type. Valid values are [password], [federated] and [public-key]. (For [PasswordCredential], [FederatedCredential] and [PublicKeyCredential])",
        "event": false
      }
    }
  },
  {
    "name": "CredentialsContainer",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\nSecure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[CredentialsContainer]* interface of the Credential Management API exposes methods to request credentials and notify the user agent when events such as successful sign in or sign out happen. This interface is accessible from [Navigator.credentials].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Crypto",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*Crypto*] interface represents basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.\n\n\n  *Note:* This feature is available in Web Workers\n\n\nThe Web Crypto API is accessed through the [Window.crypto] property, which is a [Crypto] object.",
    "abstract": true,
    "category": "interface",
    "props": {
      "subtle": {
        "type": "SubtleCrypto",
        "array": false,
        "dartType": "SubtleCrypto",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [SubtleCrypto] object providing access to common cryptographic primitives, like hashing, signing, encryption, or decryption.",
        "event": false
      }
    }
  },
  {
    "name": "CryptoKey",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[CryptoKey]* interface of the Web Crypto API represents a cryptographic key obtained from one of the [SubtleCrypto] methods [generateKey()], [deriveKey()], [importKey()], or [unwrapKey()].\n\nFor security reasons, the [CryptoKey] interface can only be used in a secure context.",
    "abstract": true,
    "category": "interface",
    "props": {
      "type": {
        "type": "KeyType",
        "array": false,
        "dartType": "KeyType",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "String which may take one of the following values:\n\n \n  [\"secret\"]: This key is a secret key for use with a symmetric algorithm.\n  [\"private\"]: This key is the private half of an asymmetric algorithm's [CryptoKeyPair].\n  [\"public\"]: This key is the public half of an asymmetric algorithm's [CryptoKeyPair].\n \n ",
        "event": false
      },
      "extractable": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "[Boolean] indicating whether or not the key may be extracted using [SubtleCrypto.exportKey()] or [SubtleCrypto.wrapKey()].\n\n \n  [true]: The key may be extracted.\n  [false] The key may not be extracted. [exportKey()] or [wrapKey()] will throw an exception if used to extract this key.\n \n ",
        "event": false
      },
      "algorithm": {
        "type": "object",
        "array": false,
        "dartType": "object",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An object describing the algorithm for which this key can be used and any associated extra parameters.\n\n \n  [AesKeyGenParams] if the algorithm is any of the AES variants.\n  [RsaHashedKeyGenParams] if the algorithm is any of the RSA variants.\n  [EcKeyGenParams] if the algorithm is any of the EC variants.\n  [HmacKeyGenParams] if the algorithm is HMAC.\n \n ",
        "event": false
      },
      "usages": {
        "type": "object",
        "array": false,
        "dartType": "object",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [Array] of strings, indicating what can be done with the key. Possible values for array elements are:\n\n \n  [\"encrypt\"]: The key may be used to [encrypt] messages.\n  [\"decrypt\"]: The key may be used to [decrypt] messages.\n  [\"sign\"]: The key may be used to [sign] messages.\n  [\"verify\"]: The key may be used to [verify] signatures.\n  [\"deriveKey\"]: The key may be used in [deriving a new key].\n  [\"deriveBits\"]: The key may be used in [deriving bits].\n  [\"wrapKey\"]: The key may be used to [wrap a key].\n  [\"unwrapKey\"]: The key may be used to [unwrap a key].\n \n ",
        "event": false
      }
    }
  },
  {
    "name": "CryptoKeyPair",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CryptoKeyPair]* dictionary of the Web Crypto API represents a key pair for an asymmetric cryptography algorithm, also known as a public-key algorithm.\n\nA [CryptoKeyPair] object can be obtained using [SubtleCrypto.generateKey()], when the selected algorithm is one of the asymmetric algorithms: RSASSA-PKCS1-v1_5, RSA-PSS, RSA-OAEP, ECDSA, or ECDH.\n\nIt contains two properties, which are both [CryptoKey] objects: a [privateKey] property containing the private key and a [publicKey] property containing the public key.",
    "abstract": true,
    "category": "interface",
    "props": {
      "privateKey": {
        "type": "CryptoKey",
        "array": false,
        "dartType": "CryptoKey",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [CryptoKey] object representing the private key. For encryption and decryption algorithms, this key is used to decrypt. For signing and verification algorithms it is used to sign.",
        "event": false
      },
      "publicKey": {
        "type": "CryptoKey",
        "array": false,
        "dartType": "CryptoKey",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [CryptoKey] object representing the public key. For encryption and decryption algorithms, this key is used to encrypt. For signing and verification algorithms it is used to verify signatures.",
        "event": false
      }
    }
  },
  {
    "name": "CSS",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*CSS*] interface holds useful CSS-related methods. No objects with this interface are implemented: it contains only static methods and is therefore a utilitarian interface.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CSSAnimation",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[CSSAnimation]* interface of the Web Animations API represents an [Animation] object.",
    "abstract": true,
    "category": "interface",
    "props": {
      "animationName": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the animation name as a [CSSOMString].",
        "event": false
      }
    }
  },
  {
    "name": "CSSConditionRule",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nAn object implementing the *[CSSConditionRule]* interface represents a single condition CSS [at-rule], which consists of a condition and a statement block.\n\nTwo objects derive from [CSSConditionRule]: [CSSMediaRule] and [CSSSupportsRule].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "conditionText": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the text of the condition of the rule.",
        "event": false
      }
    }
  },
  {
    "name": "CSSCounterStyleRule",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CSSCounterStyleRule]* interface represents an [@counter-style] at-rule.",
    "abstract": true,
    "category": "interface",
    "props": {
      "name": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] object that contains the serialization of the [<counter-style-name>] defined for the associated rule.",
        "event": false
      },
      "system": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] object that contains the serialization of the [system] descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
        "event": false
      },
      "symbols": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] object that contains the serialization of the [symbols] descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
        "event": false
      },
      "additiveSymbols": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] object that contains the serialization of the [additive-symbols] descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
        "event": false
      },
      "negative": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] object that contains the serialization of the [negative] descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
        "event": false
      },
      "prefix": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] object that contains the serialization of the [prefix] descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
        "event": false
      },
      "suffix": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] object that contains the serialization of the [suffix] descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
        "event": false
      },
      "range": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] object that contains the serialization of the [range] descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
        "event": false
      },
      "pad": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] object that contains the serialization of the [pad] descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
        "event": false
      },
      "speakAs": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] object that contains the serialization of the [speak-as] descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
        "event": false
      },
      "fallback": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] object that contains the serialization of the [fallback] descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.",
        "event": false
      }
    }
  },
  {
    "name": "CSSFontFaceRule",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CSSFontFaceRule]* interface represents an [@font-face] [at-rule].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "style": {
        "type": "CSSStyleDeclaration",
        "array": false,
        "dartType": "CSSStyleDeclaration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [CSSStyleDeclaration].",
        "event": false
      }
    }
  },
  {
    "name": "CSSGroupingRule",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CSSGroupingRule]* interface of the [CSS Object Model] represents any CSS [at-rule] that contains other rules nested within it.\n\nObjects deriving from it:\n\n\n [CSSConditionRule] and its children: [CSSMediaRule] and [CSSSupportsRule].\n [CSSPageRule]\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CSSImageValue",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[CSSImageValue]* interface of the CSS Typed Object Model API represents values for properties that take an image, for example [background-image], [list-style-image], or [border-image-source]. The CSSImageValue object represents an [<image>] that involves an URL, such as [url()] or [image()], but not [linear-gradient() ]or [element()] .",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CSSImportRule",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CSSImportRule]* interface represents an [@import] [at-rule].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "href": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the url specified by the [@import] rule.",
        "event": false
      },
      "media": {
        "type": "MediaList",
        "array": false,
        "dartType": "MediaList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the value of the [media] attribute of the associated stylesheet.",
        "event": false
      }
    }
  },
  {
    "name": "CSSKeyframeRule",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CSSKeyframeRule]* interface describes an object representing a set of styles for a given keyframe. It corresponds to the contents of a single keyframe of a [@keyframes] [at-rule].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "keyText": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the key of the keyframe, like ['10%'], ['75%']. The [from] keyword maps to ['0%'] and the [to] keyword maps to ['100%'].",
        "event": false
      },
      "style": {
        "type": "CSSStyleDeclaration",
        "array": false,
        "dartType": "CSSStyleDeclaration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [CSSStyleDeclaration] of the CSS style associated with the keyframe.",
        "event": false
      }
    }
  },
  {
    "name": "CSSKeyframesRule",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CSSKeyframesRule]* interface describes an object representing a complete set of keyframes for a CSS animation. It corresponds to the contents of a whole [@keyframes] [at-rule].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "name": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the name of the keyframes, used by the [animation-name] property.",
        "event": false
      },
      "cssRules": {
        "type": "CSSRuleList",
        "array": false,
        "dartType": "CSSRuleList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [CSSRuleList] of the keyframes in the list.",
        "event": false
      }
    }
  },
  {
    "name": "CSSKeywordValue",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[CSSKeywordValue]* interface of the CSS Typed Object Model API creates an object to represent CSS keywords and other identifiers.  The interface instance name is a stringifier meaning that when used anywhere a string is expected it will return the value of [CSSKeyword.value].",
    "abstract": false,
    "category": "interface",
    "props": {
      "value": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns or sets the value of the [CSSKeywordValue].",
        "event": false
      }
    }
  },
  {
    "name": "CSSMediaRule",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CSSMediaRule]* interface represents a single CSS [@media] rule.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "media": {
        "type": "MediaList",
        "array": false,
        "dartType": "MediaList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [MediaList] representing the intended destination medium for style information.",
        "event": false
      }
    }
  },
  {
    "name": "CSSNamespaceRule",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CSSNamespaceRule]* interface describes an object representing a single CSS [@namespace] [at-rule].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "prefix": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] with the name of the prefix associated to this namespace. If there is no such prefix, returns an empty string.",
        "event": false
      }
    }
  },
  {
    "name": "CSSNumericValue",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[CSSNumericValue]* interface of the CSS Typed Object Model API represents operations that all numeric values can perform.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CSSPageRule",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n*[CSSPageRule]* represents a single CSS [@page] rule. \n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "selectorText": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the text of the page selector associated with the at-rule.",
        "event": false
      },
      "style": {
        "type": "CSSStyleDeclaration",
        "array": false,
        "dartType": "CSSStyleDeclaration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the declaration block associated with the at-rule.",
        "event": false
      }
    }
  },
  {
    "name": "CSSPositionValue",
    "experimental": true,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[CSSPositionValue]* interface of the CSS Typed Object Model API represents values for properties that take a position, for example [object-position]. ",
    "abstract": false,
    "category": "interface",
    "props": {
      "x": {
        "type": "CSSNumericValue",
        "array": false,
        "dartType": "CSSNumericValue",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the item's position along the web page's horizontal axis.",
        "event": false
      },
      "y": {
        "type": "CSSNumericValue",
        "array": false,
        "dartType": "CSSNumericValue",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the item's position along the vertical axis.",
        "event": false
      }
    }
  },
  {
    "name": "CSSPrimitiveValue",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe [*CSSPrimitiveValue*] interface derives from the [CSSValue] interface and represents the current computed value of a CSS property.\n\nThis interface represents a single CSS value. It may be used to determine the value of a specific style property currently set in a block or to set a specific style property explicitly within the block. An instance of this interface might be obtained from the [getPropertyCSSValue()] method of the [CSSStyleDeclaration] interface. A [CSSPrimitiveValue] object only occurs in a context of a CSS property.\n\nConversions are allowed between absolute values (from millimeters to centimeters, from degrees to radians, and so on) but not between relative values. (For example, a pixel value cannot be converted to a centimeter value.) Percentage values can't be converted since they are relative to the parent value (or another property value). There is one exception for color percentage values: since a color percentage value is relative to the range 0-255, a color percentage value can be converted to a number (see also the [RGBColor] interface).\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "primitiveType": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [unsigned short] representing the type of the value. Possible values are:\n \n  \n   \n    Constant\n    Description\n   \n   \n    [CSS_ATTR]\n    The value is an [attr()] function. The value can be obtained by using the [getStringValue()] method.\n   \n   \n    [CSS_CM]\n    The value is a [<length>] in centimeters. The value can be obtained by using the [getFloatValue()] method.\n   \n   \n    [CSS_COUNTER]\n    The value is a counter or counters function. The value can be obtained by using the [getCounterValue()] method.\n   \n   \n    [CSS_DEG]\n    The value is an [<angle>] in degrees. The value can be obtained by using the [getFloatValue()] method.\n   \n   \n    [CSS_DIMENSION]\n    The value is a [<number>] with an unknown dimension. The value can be obtained by using the [getFloatValue()] method.\n   \n   \n    [CSS_EMS]\n    The value is a [<length>] in em units. The value can be obtained by using the [getFloatValue()] method.\n   \n   \n    [CSS_EXS]\n    The value is a [<length>] in ex units. The value can be obtained by using the [getFloatValue()] method.\n   \n   \n    [CSS_GRAD]\n    The value is an [<angle>] in grads. The value can be obtained by using the [getFloatValue()] method.\n   \n   \n    [CSS_HZ]\n    The value is a [<frequency>] in Hertz. The value can be obtained by using the getFloatValue method.\n   \n   \n    [CSS_IDENT]\n    The value is an identifier. The value can be obtained by using the [getStringValue()] method.\n   \n   \n    [CSS_IN]\n    The value is a [<length>] in inches. The value can be obtained by using the [getFloatValue()] method.\n   \n   \n    [CSS_KHZ]\n    The value is a [<frequency>] in Kilohertz. The value can be obtained by using the [getFloatValue()] method.\n   \n   \n    [CSS_MM]\n    The value is a [<length>] in millimeters. The value can be obtained by using the [getFloatValue()] method.\n   \n   \n    [CSS_MS]\n    The value is a [<time>] in milliseconds. The value can be obtained by using the [getFloatValue()] method.\n   \n   \n    [CSS_NUMBER]\n    The value is a simple [<number>]. The value can be obtained by using the [getFloatValue()] method.\n   \n   \n    [CSS_PC]\n    The value is a [<length>] in picas. The value can be obtained by using the [getFloatValue()] method.\n   \n   \n    [CSS_PERCENTAGE]\n    The value is a [<percentage>]. The value can be obtained by using the [getFloatValue()] method.\n   \n   \n    [CSS_PT]\n    The value is a [<length>] in points. The value can be obtained by using the [getFloatValue()] method.\n   \n   \n    [CSS_PX]\n    The value is a [<length>] in pixels. The value can be obtained by using the [getFloatValue()] method.\n   \n   \n    [CSS_RAD]\n    The value is an [<angle>] in radians. The value can be obtained by using the [getFloatValue()] method.\n   \n   \n    [CSS_RECT]\n    The value is a [rect()] function. The value can be obtained by using the [getRectValue()] method.\n   \n   \n    [CSS_RGBCOLOR]\n    The value is an [<color>]. The value can be obtained by using the [getRGBColorValue()] method.\n   \n   \n    [CSS_S]\n    The value is a [<time>] in seconds. The value can be obtained by using the [getFloatValue()] method.\n   \n   \n    [CSS_STRING]\n    The value is a [<string>]. The value can be obtained by using the [getStringValue()] method.\n   \n   \n    [CSS_UNKNOWN]\n    The value is not a recognized CSS2 value. The value can only be obtained by using the [cssText] attribute.\n   \n   \n    [CSS_URI]\n    The value is a [url()]. The value can be obtained by using the [getStringValue()] method.\n   \n  \n \n ",
        "event": false
      }
    }
  },
  {
    "name": "CSSPropertyRule",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CSSPropertyRule]* interface of the CSS_Properties_and_Values_API represents a single CSS [@property] rule.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "inherits": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the inherit flag of the custom property.",
        "event": false
      },
      "name": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the name of the custom property.",
        "event": false
      },
      "syntax": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the literal syntax of the custom property.",
        "event": false
      }
    }
  },
  {
    "name": "CSSPseudoElement",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[CSSPseudoElement]* interface represents a pseudo-element that may be the target of an event or animated using the Web Animations API. Instances of this interface may be obtained by calling [Element.pseudo()].",
    "abstract": true,
    "category": "interface",
    "props": {
      "element": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the originating/parent [Element] of the pseudo-element.",
        "event": false
      },
      "type": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the pseudo-element selector as a [CSSOMString].",
        "event": false
      }
    }
  },
  {
    "name": "CSSRule",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CSSRule]* interface represents a single CSS rule. There are several types of rules which inherit properties from [CSSRule].\n\n\n  \n    [CSSStyleRule]\n    [CSSImportRule]\n    [CSSMediaRule]\n    [CSSFontFaceRule]\n    [CSSPageRule]\n    [CSSNamespaceRule]\n    [CSSKeyframesRule]\n    [CSSKeyframeRule]\n    [CSSCounterStyleRule]\n    [CSSDocumentRule]\n    [CSSSupportsRule]\n    [CSSFontFeatureValuesRule]\n    [CSSViewportRule]\n  \n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CSSRuleList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nA [CSSRuleList] is an (indirect-modify only) array-like object containing an ordered collection of [CSSRule] objects.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CSSStyleDeclaration",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CSSStyleDeclaration]* interface represents an object that is a CSS declaration block, and exposes style information and various style-related methods and properties.\n\nA [CSSStyleDeclaration] object can be exposed using three different APIs:\n\n\n Via [ElementCSSInlineStyle.style], which deals with the inline styles of a single element (e.g., [<div style=\"...\">]).\n Via the [CSSStyleSheet] API. For example, [document.styleSheets[0].cssRules[0].style] returns a [CSSStyleDeclaration] object on the first CSS rule in the document's first stylesheet.\n Via [Window.getComputedStyle()], which exposes the [CSSStyleDeclaration] object as a *read-only* interface.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CSSStyleRule",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CSSStyleRule]* interface represents a single CSS style rule.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "styleMap": {
        "type": "StylePropertyMap",
        "array": false,
        "dartType": "StylePropertyMap",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [StylePropertyMap] object which provides access to the rule's property-value pairs.",
        "event": false
      }
    }
  },
  {
    "name": "CSSStyleSheet",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CSSStyleSheet]* interface represents a single CSS stylesheet, and lets you inspect and modify the list of rules contained in the stylesheet. It inherits properties and methods from its parent, [StyleSheet].\n\nA stylesheet consists of a collection of [CSSRule] objects representing each of the rules in the stylesheet. The rules are contained in a [CSSRuleList], which can be obtained from the stylesheet's [cssRules] property.\n\nFor example, one rule might be a [CSSStyleRule] object containing a style such as:\n\n[h1, h2 {\n  font-size: 16pt;\n}\n]\n\nAnother rule might be an at-rule such as [@import] or [@media], and so forth.\n\nSee the Notes section for the various ways a [CSSStyleSheet] object can be obtained.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CSSStyleValue",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[CSSStyleValue]* interface of the CSS Typed Object Model API is the base class of all CSS values accessible through the Typed OM API. An instance of this class may be used anywhere a string is expected.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CSSSupportsRule",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CSSSupportsRule]* interface represents a single CSS [@supports] [at-rule].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CSSTransformComponent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CSSTransformComponent]* interface of the of the CSS_Object_Model#css_typed_object_model is part of the [CSSTransformValue] interface.",
    "abstract": true,
    "category": "interface",
    "props": {
      "is2D": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a boolean indicting whether the transform is 2D or 3D. ",
        "event": false
      }
    }
  },
  {
    "name": "CSSTransition",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[CSSTransition]* interface of the Web Animations API represents an [Animation] object used for a CSS Transition.",
    "abstract": true,
    "category": "interface",
    "props": {
      "transitionProperty": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the transition CSS property name as a [CSSOMString].",
        "event": false
      }
    }
  },
  {
    "name": "CSSUnparsedValue",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[CSSUnparsedValue]* interface of the CSS_Object_Model#css_typed_object_model represents property values that reference custom properties. It consists of a list of string fragments and variable references.\n\nCustom properties are represented by [CSSUnparsedValue] and [var()] references are represented using [CSSVariableReferenceValue].",
    "abstract": false,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the number of items in the [CSSUnparsedValue] object.",
        "event": false
      }
    }
  },
  {
    "name": "CSSValue",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe [*CSSValue*] interface represents the current computed value of a CSS property.",
    "abstract": true,
    "category": "interface",
    "props": {
      "cssText": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] representing the current value.",
        "event": false
      },
      "cssValueType": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [unsigned short] representing a code defining the type of the value. Possible values are:\n \n  \n   \n    Constant\n    Description\n   \n   \n    [CSS_CUSTOM]\n    The value is a custom value.\n   \n   \n    [CSS_INHERIT]\n    The value is inherited and the [cssText] contains [\"inherit\"].\n   \n   \n    [CSS_PRIMITIVE_VALUE]\n    The value is a primitive value and an instance of the [CSSPrimitiveValue] interface can be obtained by using binding-specific casting methods on this instance of the [CSSValue] interface.\n   \n   \n    [CSS_VALUE_LIST]\n    The value is a [CSSValue] list and an instance of the [CSSValueList] interface can be obtained by using binding-specific casting methods on this instance of the [CSSValue] interface.\n   \n  \n \n ",
        "event": false
      }
    }
  },
  {
    "name": "CSSValueList",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe [*CSSValueList*] interface derives from the [CSSValue] interface and provides the abstraction of an ordered collection of CSS values.\n\nSome properties allow an empty list in their syntax. In that case, these properties take the [none] identifier. So, an empty list means that the property has the value [none].\n\nThe items in the [CSSValueList] are accessible via an integral index, starting from 0.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [unsigned long] representing the number of [CSSValues] in the list.",
        "event": false
      }
    }
  },
  {
    "name": "CustomElementRegistry",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[CustomElementRegistry]* interface provides methods for registering custom elements and querying registered elements. To get an instance of it, use the [window.customElements] property.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "CustomEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\nThe *[CustomEvent]* interface represents events initialized by an application for any purpose.\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "detail": {
        "type": "any",
        "array": false,
        "dartType": "any",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Any data passed when initializing the event.",
        "event": false
      }
    }
  },
  {
    "name": "DataTransfer",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*DataTransfer*] object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.\n\nThis object is available from the [dataTransfer] property of all [drag events].",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "DataTransferItem",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*DataTransferItem*] object represents one drag data item. During a drag operation, each [drag event] has a [dataTransfer] property which contains a [list] of drag data items. Each item in the list is a [DataTransferItem] object.\n\nThis interface has no constructor.",
    "abstract": true,
    "category": "interface",
    "props": {
      "kind": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The kind of drag data item, [string] or [file].",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The drag data item's type, typically a MIME type.",
        "event": false
      }
    }
  },
  {
    "name": "DataTransferItemList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*DataTransferItemList*] object is a list of [DataTransferItem] objects representing items being dragged. During a drag operation, each [DragEvent] has a [dataTransfer] property and that property is a [DataTransferItemList].\n\nThis interface has no constructor.",
    "abstract": true,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [unsigned long] that is the number of drag items in the list.",
        "event": false
      }
    }
  },
  {
    "name": "DecompressionStream",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[DecompressionStream]* interface of the Compression Streams API is an API for decompressing a stream of data.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "DedicatedWorkerGlobalScope",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[DedicatedWorkerGlobalScope]* object (the [Worker] global scope) is accessible through the [self] keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers.",
    "abstract": true,
    "category": "interface",
    "props": {
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The name that the [Worker] was (optionally) given when it was created using the [Worker()] constructor. This is mainly useful for debugging purposes.",
        "event": false
      },
      "onmessage": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [message] event is raised. These events are of type [MessageEvent] and will be called when the worker receives a message from the document that started it (i.e. from the [Worker.postMessage] method.)",
        "event": true
      },
      "onmessageerror": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [messageerror] event is raised.",
        "event": true
      }
    }
  },
  {
    "name": "DelayNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[DelayNode]* interface represents a delay-line; an [AudioNode] audio-processing module that causes a delay between the arrival of an input data and its propagation to the output. A [DelayNode] always has exactly one input and one output, both with the same amount of channels.\n\n\n\nWhen creating a graph that has a cycle, it is mandatory to have at least one [DelayNode] in the cycle, or the nodes taking part in the cycle will be muted.\n\n\n\t\n\t\t\n\t\t\tNumber of inputs\n\t\t\t[1]\n\t\t\n\t\t\n\t\t\tNumber of outputs\n\t\t\t[1]\n\t\t\n\t\t\n\t\t\tChannel count mode\n\t\t\t[\"max\"]\n\t\t\n\t\t\n\t\t\tChannel count\n\t\t\t[2] (not used in the default count mode)\n\t\t\n\t\t\n\t\t\tChannel interpretation\n\t\t\t[\"speakers\"]\n\t\t\n\t\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "delayTime": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an a-rate [AudioParam] representing the amount of delay to apply, specified in seconds.",
        "event": false
      }
    }
  },
  {
    "name": "DeprecationReportBody",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [DeprecationReportBody] interface of the Reporting API represents the body of a deprecation report (the return value of its [Report.body] property).\n\nA deprecation report is generated when a deprecated feature (e.g. a deprecated API method) is used on a document being observed by a [ReportingObserver].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "DeviceMotionEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [DeviceMotionEvent] provides web developers with information about the speed of changes for the device's position and orientation.\n\n\n*Warning:* Currently, Firefox and Chrome do not handle the coordinates the same way. Take care about this while using them.\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "acceleration": {
        "type": "DeviceMotionEventAcceleration",
        "array": false,
        "dartType": "DeviceMotionEventAcceleration",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An object giving the acceleration of the device on the three axis X, Y and Z. Acceleration is expressed in m/s2.",
        "event": false
      },
      "accelerationIncludingGravity": {
        "type": "DeviceMotionEventAcceleration",
        "array": false,
        "dartType": "DeviceMotionEventAcceleration",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An object giving the acceleration of the device on the three axis X, Y and Z with the effect of gravity. Acceleration is expressed in m/s2.",
        "event": false
      },
      "rotationRate": {
        "type": "DeviceMotionEventRotationRate",
        "array": false,
        "dartType": "DeviceMotionEventRotationRate",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An object giving the rate of change of the device's orientation on the three orientation axis alpha, beta and gamma. Rotation rate is expressed in degrees per seconds.",
        "event": false
      },
      "interval": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A number representing the interval of time, in milliseconds, at which data is obtained from the device.",
        "event": false
      }
    }
  },
  {
    "name": "DeviceMotionEventAcceleration",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nA *[DeviceMotionEventAcceleration]* object provides information about the amount of acceleration the device is experiencing along all three axes.",
    "abstract": true,
    "category": "interface",
    "props": {
      "x": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The amount of acceleration along the X axis. *Read only.*",
        "event": false
      },
      "y": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The amount of acceleration along the Y axis. *Read only.*",
        "event": false
      },
      "z": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The amount of acceleration along the Z axis. *Read only.*",
        "event": false
      }
    }
  },
  {
    "name": "DeviceMotionEventRotationRate",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": " \n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nA [DeviceMotionEventRotationRate] object provides information about the rate at which the device is rotating around all three axes.",
    "abstract": true,
    "category": "interface",
    "props": {
      "alpha": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The amount of rotation around the Z axis, in degrees per second.",
        "event": false
      },
      "beta": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The amount of rotation around the X axis, in degrees per second.",
        "event": false
      },
      "gamma": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The amount of rotation around the Y axis, in degrees per second.",
        "event": false
      }
    }
  },
  {
    "name": "DeviceOrientationEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [DeviceOrientationEvent] provides web developers with information from the physical orientation of the device running the web page.",
    "abstract": false,
    "category": "interface",
    "props": {
      "absolute": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A boolean that indicates whether or not the device is providing orientation data absolutely.",
        "event": false
      },
      "alpha": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A number representing the motion of the device around the z axis, express in degrees with values ranging from 0 (inclusive) to 360 (exclusive).",
        "event": false
      },
      "beta": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A number representing the motion of the device around the x axis, express in degrees with values ranging from -180 (inclusive) to 180 (exclusive). This represents a front to back motion of the device.",
        "event": false
      },
      "gamma": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A number representing the motion of the device around the y axis, express in degrees with values ranging from -90 (inclusive) to 90 (exclusive). This represents a left to right motion of the device.",
        "event": false
      }
    }
  },
  {
    "name": "DisplayMediaStreamConstraints",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*DisplayMediaStreamConstraints*] dictionary is used to specify whether or not to include video and/or audio tracks in the [MediaStream] to be returned by [getDisplayMedia()], as well as what type of processing must be applied to the tracks. Processing information is specified using [MediaTrackConstraints] objects providing options which are applied to the track after the media data is received but before it is made available on the [MediaStream].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Document",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Document]* interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree. The DOM tree includes elements such as [<body>] and [<table>], among many others. It provides functionality globally to the document, like how to obtain the page's URL and create new elements in the document.\n\n\n\n\n\nThe [Document] interface describes the common properties and methods for any kind of document. Depending on the document's type (e.g. HTML, XML, SVG, …), a larger API is available: HTML documents, served with the [\"text/html\"] content type, also implement the [HTMLDocument] interface, whereas XML and SVG documents implement the [XMLDocument] interface.",
    "abstract": false,
    "category": "interface",
    "props": {
      "body": {
        "type": "HTMLElement",
        "array": false,
        "dartType": "HTMLElement",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [<body>] or [<frameset>] node of the current document.",
        "event": false
      },
      "characterSet": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the character set being used by the document.",
        "event": false
      },
      "childElementCount": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the number of child elements of the current document.",
        "event": false
      },
      "children": {
        "type": "HTMLCollection",
        "array": false,
        "dartType": "HTMLCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the child elements of the current document.",
        "event": false
      },
      "compatMode": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates whether the document is rendered in quirks or strict mode.",
        "event": false
      },
      "contentType": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the Content-Type from the MIME Header of the current document.",
        "event": false
      },
      "doctype": {
        "type": "DocumentType",
        "array": false,
        "dartType": "DocumentType",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the Document Type Definition (DTD) of the current document.",
        "event": false
      },
      "documentElement": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [Element] that is a direct child of the document. For HTML documents, this is normally the [HTMLHtmlElement] object representing the document's [<html>] element.",
        "event": false
      },
      "documentURI": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the document location as a string.",
        "event": false
      },
      "embeds": {
        "type": "HTMLCollection",
        "array": false,
        "dartType": "HTMLCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a list of the embedded [<embed>] elements within the current document.",
        "event": false
      },
      "firstElementChild": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the first child element of the current document.",
        "event": false
      },
      "forms": {
        "type": "HTMLCollection",
        "array": false,
        "dartType": "HTMLCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a list of the [<form>] elements within the current document.",
        "event": false
      },
      "head": {
        "type": "HTMLHeadElement",
        "array": false,
        "dartType": "HTMLHeadElement",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [<head>] element of the current document.",
        "event": false
      },
      "hidden": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a Boolean value indicating if the page is considered hidden or not.",
        "event": false
      },
      "images": {
        "type": "HTMLCollection",
        "array": false,
        "dartType": "HTMLCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a list of the images in the current document.",
        "event": false
      },
      "implementation": {
        "type": "DOMImplementation",
        "array": false,
        "dartType": "DOMImplementation",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the DOM implementation associated with the current document.",
        "event": false
      },
      "lastElementChild": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the last child element of the current document.",
        "event": false
      },
      "links": {
        "type": "HTMLCollection",
        "array": false,
        "dartType": "HTMLCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a list of all the hyperlinks in the document.",
        "event": false
      },
      "pictureInPictureEnabled": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns true if the picture-in-picture feature is enabled.",
        "event": false
      },
      "plugins": {
        "type": "HTMLCollection",
        "array": false,
        "dartType": "HTMLCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a list of the available plugins.",
        "event": false
      },
      "scripts": {
        "type": "HTMLCollection",
        "array": false,
        "dartType": "HTMLCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns all the [<script>] elements on the document.",
        "event": false
      },
      "scrollingElement": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the [Element] that scrolls the document.",
        "event": false
      },
      "styleSheets": {
        "type": "StyleSheetList",
        "array": false,
        "dartType": "StyleSheetList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [StyleSheetList] of [CSSStyleSheet] objects for stylesheets explicitly linked into, or embedded in a document.",
        "event": false
      },
      "timeline": {
        "type": "DocumentTimeline",
        "array": false,
        "dartType": "DocumentTimeline",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns timeline as a special instance of [DocumentTimeline] that is automatically created on page load.",
        "event": false
      },
      "visibilityState": {
        "type": "VisibilityState",
        "array": false,
        "dartType": "VisibilityState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [string] denoting the visibility state of the document. Possible values are [visible], [hidden], [prerender], and [unloaded].",
        "event": false
      },
      "oncopy": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": false,
        "desc": "Represents the event handling code for the [copy] event.",
        "event": false
      },
      "oncut": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": false,
        "desc": "Represents the event handling code for the [cut] event.",
        "event": false
      },
      "onfullscreenchange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [fullscreenchange] event is raised.",
        "event": true
      },
      "onfullscreenerror": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [fullscreenerror] event is raised.",
        "event": true
      },
      "onpaste": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": false,
        "desc": "Represents the event handling code for the [paste] event.",
        "event": false
      },
      "onreadystatechange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the event handling code for the [readystatechange] event.",
        "event": false
      },
      "onvisibilitychange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [visibilitychange] event is raised.",
        "event": true
      }
    }
  },
  {
    "name": "DocumentFragment",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[DocumentFragment]* interface represents a minimal document object that has no parent. It is used as a lightweight version of [Document] that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is due to the fact that the document fragment isn't part of the active document tree structure. Changes made to the fragment don't affect the document (even on reflow) or incur any performance impact when changes are made.\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "childElementCount": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the amount of child [elements] the [DocumentFragment] has.",
        "event": false
      },
      "children": {
        "type": "HTMLCollection",
        "array": false,
        "dartType": "HTMLCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a live [HTMLCollection] containing all objects of type [Element] that are children of the [DocumentFragment] object.",
        "event": false
      },
      "firstElementChild": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [Element] that is the first child of the [DocumentFragment] object, or [null] if there is none.",
        "event": false
      },
      "lastElementChild": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [Element] that is the last child of the [DocumentFragment] object, or [null] if there is none.",
        "event": false
      }
    }
  },
  {
    "name": "DocumentTimeline",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[DocumentTimeline]* interface of the Web Animations API represents animation timelines, including the default document timeline (accessed via [Document.timeline]).",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "DocumentType",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[DocumentType]* interface represents a [Node] containing a doctype.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "entities": {
        "type": "NamedNodeMap",
        "array": false,
        "dartType": "NamedNodeMap",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "A [NamedNodeMap] of entities declared in the DTD. Every node in this map implements the [Entity] interface.",
        "event": false
      },
      "internalSubset": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "A [DOMString] of the internal subset, or [null] if there is none. Eg [\"<!ELEMENT foo (bar)>\"].",
        "event": false
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString], eg [\"html\"] for [<!DOCTYPE HTML>].",
        "event": false
      },
      "notations": {
        "type": "NamedNodeMap",
        "array": false,
        "dartType": "NamedNodeMap",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "A [NamedNodeMap] with notations declared in the DTD. Every node in this map implements the [Notation] interface.",
        "event": false
      },
      "publicId": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString], eg [\"-//W3C//DTD HTML 4.01//EN\"], empty string for HTML5.",
        "event": false
      },
      "systemId": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString], eg [\"http://www.w3.org/TR/html4/strict.dtd\"], empty string for HTML5.",
        "event": false
      }
    }
  },
  {
    "name": "DOMError",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[DOMError]* interface describes an error object that contains an error name.",
    "abstract": true,
    "category": "interface",
    "props": {
      "message": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] representing a message or description associated with the given error type name.",
        "event": false
      }
    }
  },
  {
    "name": "DOMException",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*DOMException*] interface represents an abnormal event (called an *exception*) that occurs as a result of calling a method or accessing a property of a web API. This is basically how error conditions are described in web APIs.\n\nEach exception has a *name*, which is a short \"PascalCase\"-style string identifying the error or abnormal condition.",
    "abstract": false,
    "category": "interface",
    "props": {
      "code": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Returns a [short] that contains one of the error code constants, or [0] if none match. This field is used for historical reasons. New DOM exceptions don't use this anymore: they put this info in the [DOMException.name] attribute.",
        "event": false
      },
      "message": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] representing a message or description associated with the given error name.",
        "event": false
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] that contains one of the strings associated with an error name.",
        "event": false
      }
    }
  },
  {
    "name": "DOMImplementation",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*DOMImplementation*] interface represents an object providing methods which are not dependent on any particular document. Such an object is returned by the [Document.implementation] property.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "DOMLocator",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\n\nNOTE: This is not implemented in Mozilla\n\n\nIndicates a location such as where an error occurred. Returned by [DOMError.location].",
    "abstract": true,
    "category": "interface",
    "props": {
      "lineNumber": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a positive integer or -1.",
        "event": false
      },
      "columnNumber": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a positive integer or -1.",
        "event": false
      },
      "byteOffset": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a positive integer or -1.",
        "event": false
      },
      "utf16Offset": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a positive integer or -1.",
        "event": false
      },
      "relatedNode": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a positive integer or -1.",
        "event": false
      },
      "uri": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a positive integer or -1.",
        "event": false
      }
    }
  },
  {
    "name": "DOMMatrix",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*DOMMatrix*] interface represents 4×4 matrices, suitable for 2D and 3D operations including rotation and translation. It is a mutable version of the [DOMMatrixReadOnly] interface.\n\n[*WebKitCSSMatrix*] is an alias to [*DOMMatrix*].\n\nThis interface should be available inside web workers, though some implementations don't allow it yet.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "DOMMatrixReadOnly",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*DOMMatrixReadOnly*] interface represents a read-only 4×4 matrix, suitable for 2D and 3D operations. The [DOMMatrix] interrface—which is based upon [DOMMatrixReadOnly]—adds mutability, allowing you to alter the matrix after creating it. A 4×4 matrix is suitable to describe any rotation and translation in 3D.\n\nThis interface should be available inside web workers, though some implementations doesn't allow it yet.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "DOMParser",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[DOMParser]* interface provides\n    the ability to parse XML or HTML source code from a\n    string into a DOM [Document].\n\nYou can perform the opposite operation—converting a DOM tree into XML or HTML\n  source—using the [XMLSerializer] interface.\n\nIn the case of an HTML document, you can also replace portions of the DOM with new DOM\n  trees built from HTML by setting the value of the [Element.innerHTML] and\n  [outerHTML] properties. These properties can also be\n  read to fetch HTML fragments corresponding to the corresponding DOM subtree.\n\nNote that [XMLHttpRequest] can parse XML and HTML directly\n  from a URL-addressable resource, returning a [Document] in its\n  [response] property.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "DOMPoint",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nA *[DOMPoint]* object represents a 2D or 3D point in a coordinate system; it includes values for the coordinates in up to three dimensions, as well as an optional perspective value. [DOMPoint] is based on [DOMPointReadOnly] but allows its properties' values to be changed.\n\nIn general, a positive [x] component represents a position to the right of the origin, a positive [y] component is downward from the origin, and a positive [z] component extends outward from the screen (in other words, toward the user).",
    "abstract": false,
    "category": "interface",
    "props": {
      "x": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [x] coordinate of the [DOMPoint].",
        "event": false
      },
      "y": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [y] coordinate of the [DOMPoint].",
        "event": false
      },
      "z": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [z] coordinate of the [DOMPoint].",
        "event": false
      },
      "w": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The perspective value of the [DOMPoint].",
        "event": false
      }
    }
  },
  {
    "name": "DOMPointInit",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*DOMPointInit*] dictionary is used to provide the values of the coordinates and perspective when creating and JSONifying a [DOMPoint] or [DOMPointReadOnly] object.\n\nIt's used as an input parameter to the [DOMPoint]/[DOMPointReadOnly] method [fromPoint()]. It's used as the return value when calling [toJSON()].",
    "abstract": true,
    "category": "interface",
    "props": {
      "x": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An unrestricted floating-point value indicating the [x]-coordinate of the point in space. This is generally the horizontal coordinate, with positive values being to the right and negative values to the left. The default value is [0].",
        "event": false,
        "default": "0"
      },
      "y": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An unrestricted floating-point number providing the point's [y]-coordinate. This is the vertical coordinate, and barring any transforms applied to the coordinate system, positive values are downward and negative values upward toward the top of the screen. The default is [0].",
        "event": false,
        "default": "0"
      },
      "z": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An unrestricted floating-point value which gives the point's [z]-coordinate, which is (assuming no transformations that alter the situation) the depth coordinate; positive values are closer to the user and negative values retreat back into the screen. The default value is [0].",
        "event": false,
        "default": "0"
      },
      "w": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The point's [w] perspective value, given as an unrestricted floating-point number. The default is [1].",
        "event": false,
        "default": "1"
      }
    }
  },
  {
    "name": "DOMPointReadOnly",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[DOMPointReadOnly]* interface specifies the coordinate and perspective fields used by [DOMPoint] to define a 2D or 3D point in a coordinate system.\n\n\n  *Note:* This feature is available in Web Workers\n\n\nThere are two ways to create a new [DOMPointReadOnly] instance. First, you can use its constructor, passing in the values of the parameters for each dimension and, optionally, the perspective:\n\n[/* 2D */\nconst point = new DOMPointReadOnly(50, 50);\n\n/* 3D */\nconst point = new DOMPointReadOnly(50, 50, 25);\n\n/* 3D with perspective */\nconst point = new DOMPointReadOnly(100, 100, 100, 1.0);]\n\nThe other option is to use the static [DOMPointReadOnly.fromPoint()] method:\n\n[const point = DOMPointReadOnly.fromPoint({x: 100, y: 100, z: 50; w: 1.0});]",
    "abstract": false,
    "category": "interface",
    "props": {
      "x": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The point's horizontal coordinate, [x].",
        "event": false
      },
      "y": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The point's vertical coordinate, [y].",
        "event": false
      },
      "z": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The point's depth coordinate, [z].",
        "event": false
      },
      "w": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The point's perspective value, [w].",
        "event": false
      }
    }
  },
  {
    "name": "DOMQuad",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nA [DOMQuad] is a collection of four [DOMPoint]s defining the corners of an arbitrary quadrilateral. Returning [DOMQuad]s lets [getBoxQuads()] return accurate information even when arbitrary 2D or 3D transforms are present. It has a handy [bounds] attribute returning a [DOMRectReadOnly] for those cases where you just want an axis-aligned bounding rectangle.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "DOMRectReadOnly",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[DOMRectReadOnly]* interface specifies the standard properties used by [DOMRect] to define a rectangle whose properties are immutable.",
    "abstract": false,
    "category": "interface",
    "props": {
      "x": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The x coordinate of the [DOMRect]'s origin.",
        "event": false
      },
      "y": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The y coordinate of the [DOMRect]'s origin.",
        "event": false
      },
      "width": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The width of the [DOMRect].",
        "event": false
      },
      "height": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The height of the [DOMRect].",
        "event": false
      },
      "top": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the top coordinate value of the [DOMRect] (usually the same as [y].)",
        "event": false
      },
      "right": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the right coordinate value of the [DOMRect] (usually the same as [x + width]).",
        "event": false
      },
      "bottom": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the bottom coordinate value of the [DOMRect] (usually the same as [y + height]).",
        "event": false
      },
      "left": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the left coordinate value of the [DOMRect] (usually the same as [x]).",
        "event": false
      }
    }
  },
  {
    "name": "DOMStringList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nA type returned by some APIs which contains a list of DOMString (strings).",
    "abstract": true,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the length of the list.",
        "event": false
      }
    }
  },
  {
    "name": "DOMStringMap",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[DOMStringMap]* interface is used for the [HTMLOrForeignElement.dataset] attribute, to represent data for custom attributes added to elements.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "DOMTokenList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*DOMTokenList*] interface represents a set of space-separated tokens. Such a set is returned by [Element.classList], [HTMLLinkElement.relList], [HTMLAnchorElement.relList], [HTMLAreaElement.relList], [HTMLIframeElement.sandbox], or [HTMLOutputElement.htmlFor]. It is indexed beginning with [0] as with JavaScript [Array] objects. [DOMTokenList] is always case-sensitive.",
    "abstract": true,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [integer] representing the number of objects stored in the object.",
        "event": false
      },
      "value": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A stringifier property that returns the value of the list as a [DOMString].",
        "event": false
      }
    }
  },
  {
    "name": "DoubleRange",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[DoubleRange]* dictionary is used to define a range of permitted double-precision floating-point values for a property, with either or both a maximum and minimum value specified. The [ConstrainDouble] dictionary is based on this, augmenting it to support exact and ideal values as well.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "DragEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[DragEvent]* interface is a [DOM event] that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.\n\nThis interface inherits properties from [MouseEvent] and [Event].",
    "abstract": true,
    "category": "interface",
    "props": {
      "dataTransfer": {
        "type": "DataTransfer",
        "array": false,
        "dartType": "DataTransfer",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The data that is transferred during a drag and drop interaction.",
        "event": false
      }
    }
  },
  {
    "name": "DynamicsCompressorNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\nThe [DynamicsCompressorNode] interface provides a compression effect, which lowers the volume of the loudest parts of the signal in order to help prevent clipping and distortion that can occur when multiple sounds are played and multiplexed together at once. This is often used in musical production and game audio. [DynamicsCompressorNode] is an [AudioNode] that has exactly one input and one output; it is created using the [BaseAudioContext.createDynamicsCompressor] method.\n\n\n\n \n  \n   Number of inputs\n   [1]\n  \n  \n   Number of outputs\n   [1]\n  \n  \n   Channel count mode\n   [\"clamped-max\"]\n  \n  \n   Channel count\n   [2]\n  \n  \n   Channel interpretation\n   [\"speakers\"]\n  \n \n",
    "abstract": false,
    "category": "interface",
    "props": {
      "threshold": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a k-rate [AudioParam] representing the decibel value above which the compression will start taking effect.",
        "event": false
      },
      "knee": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a k-rate [AudioParam] containing a decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion.",
        "event": false
      },
      "ratio": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a k-rate [AudioParam] representing the amount of change, in dB, needed in the input for a 1 dB change in the output.",
        "event": false
      },
      "reduction": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [float] representing the amount of gain reduction currently applied by the compressor to the signal.",
        "event": false
      },
      "attack": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a k-rate [AudioParam] representing the amount of time, in seconds, required to reduce the gain by 10 dB.",
        "event": false
      },
      "release": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a k-rate [AudioParam] representing the amount of time, in seconds, required to increase the gain by 10 dB.",
        "event": false
      }
    }
  },
  {
    "name": "EcdhKeyDeriveParams",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[EcdhKeyDeriveParams]* dictionary of the Web Crypto API represents the object that should be passed as the [algorithm] parameter into [SubtleCrypto.deriveKey()],  when using the ECDH algorithm.\n\nECDH enables two people who each have a key pair consisting of a public and a private key to derive a shared secret. They exchange public keys and use the combination of their private key and the other entity's public key to derive a secret key that they — and noone else — share.\n\nThe parameters for ECDH [deriveKey()] therefore include the other entity's public key, which is combined with this entity's private key to derive the shared secret.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "EcdsaParams",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*EcdsaParams*] dictionary of the Web Crypto API represents the object that should be passed as the [algorithm] parameter into [SubtleCrypto.sign()] or [SubtleCrypto.verify()] when using the ECDSA algorithm.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "EcKeyGenParams",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[EcKeyGenParams]* dictionary of the Web Crypto API represents the object that should be passed as the [algorithm] parameter into [SubtleCrypto.generateKey()], when generating any elliptic-curve-based key pair: that is, when the algorithm is identified as either of ECDSA or ECDH.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "EcKeyImportParams",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "The *[EcKeyImportParams]* dictionary of the Web Crypto API represents the object that should be passed as the [algorithm] parameter into [SubtleCrypto.importKey()] or [SubtleCrypto.unwrapKey()], when generating any elliptic-curve-based key pair: that is, when the algorithm is identified as either of ECDSA or ECDH.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "EffectTiming",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[EffectTiming]* dictionary, part of the Web Animations API, is used by [Element.animate()], [KeyframeEffectReadOnly()], and [KeyframeEffect()] to describe timing properties for animation effects. These properties are all optional, although without setting a [duration] the animation will not play.\n\nIn other words, these properties describe how the user agent should go about making the transition from keyframe to keyframe, and how to behave when the animation begins and ends.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Element",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n*[Element]* is the most general base class from which all element objects (i.e. objects that represent elements) in a [Document] inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from [Element]. For example, the [HTMLElement] interface is the base interface for HTML elements, while the [SVGElement] interface is the basis for all SVG elements. Most functionality is specified further down the class hierarchy.\n\nLanguages outside the realm of the Web platform, like XUL through the [XULElement] interface, also implement [Element].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "assignedSlot": {
        "type": "HTMLSlotElement",
        "array": false,
        "dartType": "HTMLSlotElement",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [HTMLSlotElement] representing the [<slot>] the node is inserted in.",
        "event": false
      },
      "attributes": {
        "type": "NamedNodeMap",
        "array": false,
        "dartType": "NamedNodeMap",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [NamedNodeMap] object containing the assigned attributes of the corresponding HTML element.",
        "event": false
      },
      "childElementCount": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the number of child elements of this element.",
        "event": false
      },
      "children": {
        "type": "HTMLCollection",
        "array": false,
        "dartType": "HTMLCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the child elements of this element.",
        "event": false
      },
      "classList": {
        "type": "DOMTokenList",
        "array": false,
        "dartType": "DOMTokenList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMTokenList] containing the list of class attributes.",
        "event": false
      },
      "className": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the class of the element.",
        "event": false
      },
      "clientHeight": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Number] representing the inner height of the element.",
        "event": false
      },
      "clientLeft": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Number] representing the width of the left border of the element.",
        "event": false
      },
      "clientTop": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Number] representing the width of the top border of the element.",
        "event": false
      },
      "clientWidth": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Number] representing the inner width of the element.",
        "event": false
      },
      "firstElementChild": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the first child element of this element.",
        "event": false
      },
      "id": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the id of the element.",
        "event": false
      },
      "innerHTML": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the markup of the element's content.",
        "event": false
      },
      "lastElementChild": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the last child element of this element.",
        "event": false
      },
      "localName": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] representing the local part of the qualified name of the element.",
        "event": false
      },
      "namespaceURI": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The namespace URI of the element, or [null] if it is no namespace.\n \n *Note:* In Firefox 3.5 and earlier, HTML elements are in no namespace. In later versions, HTML elements are in the [http://www.w3.org/1999/xhtml] namespace in both HTML and XML trees. \n \n ",
        "event": false
      },
      "nextElementSibling": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [Element], the element immediately following the given one in the tree, or [null] if there's no sibling node.",
        "event": false
      },
      "outerHTML": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the markup of the element including its content. When used as a setter, replaces the element with nodes parsed from the given string.",
        "event": false
      },
      "part": {
        "type": "DOMTokenList",
        "array": false,
        "dartType": "DOMTokenList",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the part identifier(s) of the element (i.e. set using the [part] attribute), returned as a [DOMTokenList].",
        "event": false
      },
      "prefix": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] representing the namespace prefix of the element, or [null] if no prefix is specified.",
        "event": false
      },
      "previousElementSibling": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Element], the element immediately preceding the given one in the tree, or [null] if there is no sibling element.",
        "event": false
      },
      "scrollHeight": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Number] representing the scroll view height of an element.",
        "event": false
      },
      "scrollLeft": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Number] representing the left scroll offset of the element.",
        "event": false
      },
      "scrollTop": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Number] representing number of pixels the top of the document is scrolled vertically.",
        "event": false
      },
      "scrollWidth": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Number] representing the scroll view width of the element.",
        "event": false
      },
      "shadowRoot": {
        "type": "ShadowRoot",
        "array": false,
        "dartType": "ShadowRoot",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the open shadow root that is hosted by the element, or null if no open shadow root is present.",
        "event": false
      },
      "slot": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the name of the shadow DOM slot the element is inserted in.",
        "event": false
      },
      "tagName": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [String] with the name of the tag for the given element.",
        "event": false
      }
    }
  },
  {
    "name": "ElementCSSInlineStyle",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ElementCSSInlineStyle]* mixin describes CSSOM-specific features common to the [HTMLElement], [SVGElement] and [MathMLElement] interfaces. Each of these interfaces can, of course, add more features in addition to the ones listed below.\n\n\n*Note*: [ElementCSSInlineStyle] is a mixin and not an interface; you can't actually create an object of type [ElementCSSInlineStyle].\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "ErrorEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ErrorEvent]* interface represents events providing information related to errors in scripts or in files.\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "message": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] containing a human-readable error message describing the problem.",
        "event": false
      },
      "filename": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] containing the name of the script file in which the error occurred.",
        "event": false
      },
      "lineno": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [integer] containing the line number of the script file on which the error occurred.",
        "event": false
      },
      "colno": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [integer] containing the column number of the script file on which the error occurred.",
        "event": false
      },
      "error": {
        "type": "SpeechRecognitionErrorCode",
        "array": false,
        "dartType": "SpeechRecognitionErrorCode",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Is a JavaScript [Object] that is concerned by the event.",
        "event": false
      }
    }
  },
  {
    "name": "Event",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*Event*] interface represents an event which takes place in the DOM.\n\nAn event can be triggered by the user action e.g. clicking the mouse button or tapping keyboard, or generated by APIs to represent the progress of an asynchronous task. It can also be triggered programmatically, such as by calling the [HTMLElement.click()] method of an element, or by defining the event, then sending it to a specified target using [EventTarget.dispatchEvent()].\n\nThere are many types of events, some of which use other interfaces based on the main [Event] interface. [Event] itself contains the properties and methods which are common to all events.\n\nMany DOM elements can be set up to accept (or \"listen\" for) these events, and execute code in response to process (or \"handle\") them. Event-handlers are usually connected (or \"attached\") to various HTML elements (such as [<button>], [<div>], [<span>], etc.) using [EventTarget.addEventListener()], and this generally replaces using the old HTML event handler attributes. Further, when properly added, such handlers can also be disconnected if needed using [removeEventListener()].\n\n\n*Note:* One element can have several such handlers, even for the exact same event—particularly if separate, independent code modules attach them, each for its own independent purposes. (For example, a webpage with an advertising-module and statistics-module both monitoring video-watching.)\n\n\nWhen there are many nested elements, each with its own handler(s), event processing can become very complicated—especially where a parent element receives the very same event as its child elements because \"spatially\" they overlap so the event technically occurs in both, and the processing order of such events depends on the Event bubbling and capture settings of each handler triggered.",
    "abstract": false,
    "category": "interface",
    "props": {
      "bubbles": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A boolean indicating whether or not the event bubbles up through the DOM.",
        "event": false
      },
      "cancelBubble": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A historical alias to [Event.stopPropagation()]. Setting its value to [true] before returning from an event handler prevents propagation of the event.",
        "event": false
      },
      "cancelable": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A boolean indicating whether the event is cancelable.",
        "event": false
      },
      "composed": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A boolean indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.",
        "event": false
      },
      "currentTarget": {
        "type": "EventTarget",
        "array": false,
        "dartType": "EventTarget",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A reference to the currently registered target for the event. This is the object to which the event is currently slated to be sent. It's possible this has been changed along the way through retargeting.",
        "event": false
      },
      "defaultPrevented": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates whether or not the call to [event.preventDefault()] canceled the event.",
        "event": false
      },
      "eventPhase": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates which phase of the event flow is being processed.",
        "event": false
      },
      "returnValue": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "A historical property introduced by Internet Explorer and eventually adopted into the DOM specification in order to ensure existing sites continue to work. Ideally, you should try to use [Event.preventDefault()] and [Event.defaultPrevented] instead, but you can use [returnValue] if you choose to do so.",
        "event": false
      },
      "srcElement": {
        "type": "EventTarget",
        "array": false,
        "dartType": "EventTarget",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": false,
        "desc": "A non-standard alias (from old versions of Microsoft Internet Explorer) for [Event.target]. Some other browsers are starting to support it for web compatibility purposes.",
        "event": false
      },
      "target": {
        "type": "EventTarget",
        "array": false,
        "dartType": "EventTarget",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A reference to the target to which the event was originally dispatched.",
        "event": false
      },
      "timeStamp": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The time at which the event was created (in milliseconds). By specification, this value is time since epoch—but in reality, browsers' definitions vary. In addition, work is underway to change this to be a [DOMHighResTimeStamp] instead.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The name of the event. Case-insensitive.",
        "event": false
      },
      "isTrusted": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates whether or not the event was initiated by the browser (after a user click, for instance) or by a script (using an event creation method, like [Event.initEvent]).",
        "event": false
      }
    }
  },
  {
    "name": "EventListener",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[EventListener]* interface represents an object that can handle an event dispatched by an [EventTarget] object.\n\n\n*Note:* Due to the need for compatibility with legacy content, [EventListener] accepts both a function and an object with a [handleEvent()] property function. This is shown in the example below.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "EventSource",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[EventSource]* interface is web content's interface to server-sent events. An [EventSource] instance opens a persistent connection to an HTTP server, which sends events in [text/event-stream] format. The connection remains open until closed by calling [EventSource.close()].\n\nOnce the connection is opened, incoming messages from the server are delivered to your code in the form of events. If there is an event field in the incoming message, the triggered event is the same as the event field value. If no event field is present, then a generic [message] event is fired.\n\nUnlike WebSockets, server-sent events are unidirectional; that is, data messages are delivered in one direction, from the server to the client (such as a user's web browser). That makes them an excellent choice when there's no need to send data from the client to the server in message form. For example, [EventSource] is a useful approach for handling things like social media status updates, news feeds, or delivering data into a client-side storage mechanism like IndexedDB or web storage.\n\n\nWhen *not used over HTTP/2*, SSE suffers from a limitation to the maximum number of open connections, which can be specially painful when opening various tabs as the limit is per browser and set to a very low number (6). The issue has been marked as \"Won't fix\" in Chrome and Firefox. This limit is per browser + domain, so that means that you can open 6 SSE connections across all of the tabs to [www.example1.com] and another 6 SSE connections to [www.example2.com.] (from Stackoverflow). When using HTTP/2, the maximum number of simultaneous HTTP streams is negotiated between the server and the client (defaults to 100).\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "readyState": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A number representing the state of the connection. Possible values are [CONNECTING] ([0]), [OPEN] ([1]), or [CLOSED] ([2]).",
        "event": false
      },
      "url": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] representing the URL of the source.",
        "event": false
      },
      "withCredentials": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] indicating whether the [EventSource] object was instantiated with cross-origin (CORS) credentials set ([true]), or not ([false], the default).",
        "event": false
      },
      "onerror": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] called when an error occurs and the [error] event is dispatched on an [EventSource] object.",
        "event": true
      },
      "onmessage": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] called when a [message] event is received, that is when a message is coming from the source.",
        "event": true
      },
      "onopen": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] called when an [open] event is received, that is when the connection was just opened.",
        "event": true
      }
    }
  },
  {
    "name": "EventTarget",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n*[EventTarget]* is a DOM interface implemented by objects that can receive events and may have listeners for them.\n\n[Element], [Document], and [Window] are the most common event targets, but other objects can be event targets, too. For example [XMLHttpRequest], [AudioNode], [AudioContext], and others.\n\nMany event targets (including elements, documents, and windows) also support setting event handlers via [onevent] properties and attributes.\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "EXT_blend_minmax",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*EXT_blend_minmax*] extension is part of the WebGL API and extends blending capabilities by adding two new blend equations: the minimum or maximum color components of the source and destination colors.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default. The constants in WebGL2 are [gl.MIN] and [gl.MAX].\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "EXT_color_buffer_float",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*EXT_color_buffer_float*] extension is part of WebGL and adds the ability to render a variety of floating point formats.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is available to WebGL 2 contexts only.\n\nFor WebGL 1, see the [EXT_color_buffer_half_float] and [WEBGL_color_buffer_float] extensions.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "EXT_color_buffer_half_float",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*EXT_color_buffer_half_float*] extension is part of the WebGL API and adds the ability to render to 16-bit floating-point color buffers.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is available to both, WebGL1 and WebGL2 contexts. On WebGL 2, it's an alternative to using the [EXT_color_buffer_float] extension on platforms that support 16-bit floating point render targets but not 32-bit floating point render targets.\n\nThe [OES_texture_half_float] extension implicitly enables this extension.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "EXT_disjoint_timer_query",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *EXT_disjoint_timer_query* extension is part of the WebGL API and provides a way to measure the duration of a set of GL commands, without stalling the rendering pipeline.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension should be available in WebGL1 contexts only. [EXT_disjoint_timer_query_webgl2] is available in WebGL 2 contexts .\n\nIn WebGL 2, the [getQueryObject] was renamed to [getQueryParameter].\n In WebGL 2, other queries (such as occlusion queries and primitive queries) are possible using [WebGLQuery] objects.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "EXT_float_blend",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe WebGL API's [EXT_float_blend] extension allows blending and draw buffers with 32-bit floating-point components.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is available to both, WebGL1 and WebGL2 contexts. However, to use it, you need to enable the use of 32-bit floating-point draw buffers by  enabling the extension [WEBGL_color_buffer_float] (for WebGL1) or [EXT_color_buffer_float] (for WebGL2). Doing so automatically enables [EXT_float_blend] as well.\n\n\nWith this extension enabled, calling [drawArrays()] or [drawElements()] with blending enabled and a draw buffer with 32-bit floating-point components will no longer result in an [INVALID_OPERATION] error.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "EXT_frag_depth",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*EXT_frag_depth*] extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default. It requires GLSL [#version 300 es].\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "EXT_shader_texture_lod",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*EXT_shader_texture_lod*] extension is part of the WebGL API and adds additional texture functions to the OpenGL ES Shading Language which provide the shader writer with explicit control of LOD (Level of detail).\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default. It requires GLSL [#version 300 es].\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "EXT_sRGB",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*EXT_sRGB*] extension is part of the WebGL API and adds sRGB support to textures and framebuffer objects.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default. The constants in WebGL2 are: [gl.SRGB], [gl.SRGB8], [gl.SRGB8_ALPHA8] and [gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING].\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "EXT_texture_compression_bptc",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [EXT_texture_compression_bptc] extension is part of the WebGL API and exposes 4 BPTC compressed texture formats. These compression formats are called BC7 and BC6H in Microsoft's DirectX API.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* Support depends on the system's graphics driver. There is no support on Windows.\n\nThis extension is available to both, WebGL1 and WebGL2 contexts.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "EXT_texture_compression_rgtc",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [EXT_texture_compression_rgtc] extension is part of the WebGL API and exposes 4 RGTC compressed texture formats. RGTC is a block-based texture compression format suited for unsigned and signed red and red-green textures (*R*ed-*G*reen *T*exture *C*ompression).\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* Support depends on the system's graphics driver. There is no support on Windows.\n\nThis extension is available to both, WebGL1 and WebGL2 contexts.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "EXT_texture_filter_anisotropic",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*EXT_texture_filter_anisotropic*] extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).\n\nAF improves the quality of mipmapped texture access when viewing a textured primitive at an oblique angle. Using just mipmapping, these lookups have a tendency to average to grey.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is available to both, WebGL1 and WebGL2 contexts.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "ExtendableCookieChangeEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[ExtendableCookieChangeEvent]* interface of the [Cookie Store API] is the event type passed to [ServiceWorkerRegistration.oncookiechange()] when any cookie changes have occurred. A cookie change event consists of a cookie and a type (either \"changed\" or \"deleted\".)\n\nCookie changes that cause the [ExtendableCookieChangeEvent] to be dispatched are:\n\n\n  A cookie is newly created and not immediately removed. In this case [type] is \"changed\".\n  A cookie is newly created and immediately removed. In this case [type] is \"deleted\"\n  A cookie is removed. In this case [type] is \"deleted\".\n\n\n\n  Note\n  A cookie that is replaced due to the insertion of another cookie with the same name, domain, and path, is ignored and does not trigger a change event.\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "changed": {
        "type": "FrozenArray<CookieListItem>",
        "array": false,
        "dartType": "FrozenArray<CookieListItem>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an array containing the changed cookies.",
        "event": false
      },
      "deleted": {
        "type": "FrozenArray<CookieListItem>",
        "array": false,
        "dartType": "FrozenArray<CookieListItem>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an array containing the deleted cookies.",
        "event": false
      }
    }
  },
  {
    "name": "ExtendableEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ExtendableEvent]* interface extends the lifetime of the [install] and [activate] events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like [FetchEvent]) are not dispatched until it upgrades database schemas and deletes the outdated cache entries.\n\nIf [waitUntil()] is called outside of the [ExtendableEvent] handler, the browser should throw an [InvalidStateError]; note also that multiple calls will stack up, and the resulting promises will be added to the list of extend lifetime promises.\n\n\n*Note*: The behavior described in the above paragraph was fixed in Firefox 43 (see bug 1180274.)\n\n\nThis interface inherits from the [Event] interface.\n\n\n\n\n\n\n*Note*: This interface is only available when the global scope is a [ServiceWorkerGlobalScope]. It is not available when it is a [Window], or the scope of another kind of worker.\n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "ExtendableMessageEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ExtendableMessageEvent]* interface of the Service Worker API represents the event object of a [message] event fired on a service worker (when a message is received on the [ServiceWorkerGlobalScope] from another context) — extends the lifetime of such events.\n\nThis interface inherits from the [ExtendableEvent] interface.",
    "abstract": false,
    "category": "interface",
    "props": {
      "data": {
        "type": "any",
        "array": false,
        "dartType": "any",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the event's data. It can be any data type.",
        "event": false
      },
      "origin": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the origin of the [Client] that sent the message.",
        "event": false
      },
      "lastEventId": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents, in server-sent events, the last event ID of the event source. This is an empty string.",
        "event": false
      },
      "source": {
        "type": "MessagePort)",
        "array": false,
        "dartType": "MessagePort)",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the [Client] object that sent the message.",
        "event": false
      },
      "ports": {
        "type": "FrozenArray<MessagePort>",
        "array": false,
        "dartType": "FrozenArray<MessagePort>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the array containing the [MessagePort] objects representing the ports of the associated message channel.",
        "event": false
      }
    }
  },
  {
    "name": "FederatedCredential",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[FederatedCredential]* interface of the Credential Management API provides information about credentials from a federated identity provider. A federated identity provider is an entity that a website trusts to correctly authenticate a user, and that provides an API for that purpose. OpenID Connect is an example of a federated identity provider framework.\n\nIn browsers that support it, an instance of this interface may be passed in the [credential] member of the [init] object for global [WindowOrWorkerGlobalScope.fetch].",
    "abstract": false,
    "category": "interface",
    "props": {
      "provider": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [USVString] containing a credential's federated identity provider.",
        "event": false
      },
      "protocol": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] containing a credential's federated identity protocol.",
        "event": false
      }
    }
  },
  {
    "name": "FetchEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThis is the event type for [fetch] events dispatched on the service worker global scope. It contains information about the fetch, including the request and how the receiver will treat the response. It provides the [event.respondWith()] method, which allows us to provide a response to this fetch.",
    "abstract": false,
    "category": "interface",
    "props": {
      "clientId": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [id] of the same-origin [client] that initiated the fetch.",
        "event": false
      },
      "preloadResponse": {
        "type": "Promise<any>",
        "array": false,
        "dartType": "Promise<any>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Promise] for a [Response], or [undefined] if this fetch is not a navigation, or navigation preload is not enabled.",
        "event": false
      },
      "replacesClientId": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [id] of the [client] that is being replaced during a page navigation.",
        "event": false
      },
      "resultingClientId": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [id] of the [client] that replaces the previous client during a page navigation.",
        "event": false
      },
      "request": {
        "type": "Request",
        "array": false,
        "dartType": "Request",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [Request] the browser intends to make.",
        "event": false
      }
    }
  },
  {
    "name": "File",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[File]* interface provides information about files and allows JavaScript in a web page to access their content.\n\n[File] objects are generally retrieved from a [FileList] object returned as a result of a user selecting files using the [<input>] element, from a drag and drop operation's [DataTransfer] object, or from the [mozGetAsFile()] API on an [HTMLCanvasElement].\n\nA [File] object is a specific kind of a [Blob], and can be used in any context that a Blob can. In particular, [FileReader], [URL.createObjectURL()], [createImageBitmap()], and [XMLHttpRequest.send()] accept both [Blob]s and [File]s.\n\nSee Using files from web applications for more information and examples.\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "FileList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nAn object of this type is returned by the [files] property of the HTML [<input>] element; this lets you access the list of files selected with the [<input type=\"file\">] element. It's also used for a list of files dropped into web content when using the drag and drop API; see the [DataTransfer] object for details on this usage.\n\n\n*Note:* Prior to Gecko 1.9.2, the input element only supported a single file being selected at a time, meaning that the FileList would contain only one file. Starting with Gecko 1.9.2, if the input element's multiple attribute is true, the FileList may contain multiple files.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "FileReader",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[FileReader]* object lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using [File] or [Blob] objects to specify the file or data to read.\n\nFile objects may be obtained from a [FileList] object returned as a result of a user selecting files using the [<input>] element, from a drag and drop operation's [DataTransfer] object, or from the [mozGetAsFile()] API on an [HTMLCanvasElement].\n\n[FileReader] can only access the contents of files that the user has explicitly selected, either using an HTML [<input type=\"file\">] element or by drag and drop. It cannot be used to read a file by pathname from the user's file system. To read files on the client's file system by pathname, use the File System Access API. To read server-side files, use standard Ajax solutions, with CORS permission if reading cross-domain.\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "error": {
        "type": "DOMException",
        "array": false,
        "dartType": "DOMException",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMException] representing the error that occurred while reading the file.",
        "event": false
      },
      "readyState": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A number indicating the state of the [FileReader]. This is one of the following:\n \n  \n   \n    [EMPTY]\n    [0]\n    No data has been loaded yet.\n   \n   \n    [LOADING]\n    [1]\n    Data is currently being loaded.\n   \n   \n    [DONE]\n    [2]\n    The entire read request has been completed.\n   \n  \n \n ",
        "event": false
      },
      "result": {
        "type": "ArrayBuffer)",
        "array": false,
        "dartType": "ArrayBuffer)",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The file's contents. This property is only valid after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation.",
        "event": false
      },
      "onabort": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A handler for the [abort] event. This event is triggered each time the reading operation is aborted.",
        "event": false
      },
      "onerror": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A handler for the [error] event. This event is triggered each time the reading operation encounter an error.",
        "event": false
      },
      "onload": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A handler for the [load] event. This event is triggered each time the reading operation is successfully completed.",
        "event": false
      },
      "onloadstart": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A handler for the [loadstart] event. This event is triggered each time the reading is starting.",
        "event": false
      },
      "onloadend": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A handler for the [loadend] event. This event is triggered each time the reading operation is completed (either in success or failure).",
        "event": false
      },
      "onprogress": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A handler for the [progress] event. This event is triggered while reading a [Blob] content.",
        "event": false
      }
    }
  },
  {
    "name": "FileReaderSync",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [FileReaderSync] interface allows to read [File] or [Blob] objects synchronously.\n\n\n  *Note:* This feature is available in Web Workers\n\n\n\nThis interface is *only available* in workers as it enables synchronous I/O that could potentially block.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "FileSystem",
    "experimental": false,
    "deprecated": false,
    "standard": false,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe File and Directory Entries API interface *[FileSystem]* is used to represent a file system. These objects can be obtained from the [filesystem] property on any file system entry. Some browsers offer additional APIs to create and manage file systems, such as Chrome's [requestFileSystem()] method.\n\nThis interface will not grant you access to the users filesystem. Instead you will have a \"virtual drive\" within the browser sandbox. If you want to gain access to the users filesystem you need to invoke the user by eg. installing a Chrome extension. The relevant Chrome API can be found here.",
    "abstract": true,
    "category": "interface",
    "props": {
      "name": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [USVString] representing the file system's name. This name is unique among the entire list of exposed file systems.",
        "event": false
      },
      "root": {
        "type": "FileSystemDirectoryEntry",
        "array": false,
        "dartType": "FileSystemDirectoryEntry",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [FileSystemDirectoryEntry] object which represents the file system's root directory. Through this object, you can gain access to all files and directories in the file system.",
        "event": false
      }
    }
  },
  {
    "name": "FileSystemDirectoryEntry",
    "experimental": false,
    "deprecated": false,
    "standard": false,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[FileSystemDirectoryEntry]* interface of the File and Directory Entries API represents a directory in a file system. It provides methods which make it possible to access and manipulate the files in a directory, as well as to access the entries within the directory.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "FileSystemDirectoryReader",
    "experimental": false,
    "deprecated": true,
    "standard": false,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n        Non-standard\n        This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n      \n\nThe [FileSystemDirectoryReader] interface of the File and Directory Entries API lets you access the [FileEntry]-based objects (generally [FileSystemFileEntry] or [FileSystemDirectoryEntry]) representing each entry in a directory.\n\n\nBecause this is a non-standard API, whose specification is not currently on a standards track, it's important to keep in mind that not all browsers implement it, and those that do may implement only small portions of it. Check the Browser compatibility section for details.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "FileSystemEntry",
    "experimental": false,
    "deprecated": false,
    "standard": false,
    "inheritance": [],
    "desc": " \n        Non-standard\n        This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n      \n\nThe *[FileSystemEntry]* interface of the File and Directory Entries API represents a single entry in a file system. The entry can be a file or a directory (directories are represented by the [FileSystemDirectoryEntry] interface). It includes methods for working with files—including copying, moving, removing, and reading files—as well as information about a file it points to—including the file name and its path from the root to the entry.\n\n\nBecause this is a non-standard API, whose specification is not currently on a standards track, it's important to keep in mind that not all browsers implement it, and those that do may implement only small portions of it. Check the Browser compatibility section for details.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "FileSystemFileEntry",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[FileSystemFileEntry]* interface of the File System API represents a file in a file system. It offers properties describing the file's attributes, as well as the [file()] method, which creates a [File] object that can be used to read the file.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "FileSystemFileHandle",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[FileSystemFileHandle]* interface of the [File System Access API] represents a handle to a file system entry. The interface is accessed thought the [window.showOpenFilePicker()] method.\n\nNote that read and write operations depend on file-access permissions that do not persist after a page refresh if no other tabs for that origin remain open. The [queryPermission] method of the [FileSystemHandle] interface can be used to verify permission state before accessing a file.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "FileSystemFlags",
    "experimental": true,
    "deprecated": false,
    "standard": false,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[FileSystemFlags]* dictionary defines a set of values which are used when specifying option flags when calling certain methods in the File and Directory Entries API. Methods which accept an options parameter of this type may specify zero or more of these flags as fields in an object, like this:\n\n[dataDirectoryEntry.getDirectory(\"Workspace\", { create: true }, function(entry) {\n});]\n\nHere, we see that the [create] property is provided, with a value of [true], indicating that the directory should be created if it's not already there.\n\n\nNote that these option flags currently don't have any useful meaning when used in the scope of Web content, where security precautions prevent the creation of new files or the replacement of existing ones.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "FileSystemHandle",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[FileSystemHandle]* interface of the [File System Access API] is an object which represents a file or directory entry. Multiple handles can represent the same entry. For the most part you do not work with [FileSystemHandle] directly but rather its child interfaces [FileSystemFileHandle] and [FileSystemDirectoryHandle].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "FocusEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[FocusEvent]* interface represents focus-related events, including [focus], [blur], [focusin], and [focusout].\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "relatedTarget": {
        "type": "EventTarget",
        "array": false,
        "dartType": "EventTarget",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [EventTarget] representing a secondary target for this event. In some cases (such as when tabbing in or out a page), this property may be set to [null] for security reasons.",
        "event": false
      }
    }
  },
  {
    "name": "FontFace",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [*FontFace*] interface represents a single usable font face. It allows control of the source of the font face, being a URL to an external resource, or a buffer; it also allows control of when the font face is loaded and its current status.",
    "abstract": false,
    "category": "interface",
    "props": {
      "display": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [CSSOMString] that determines how a font face is displayed based on whether and when it is downloaded and ready to use.",
        "event": false,
        "default": "\"auto\""
      },
      "family": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [CSSOMString] that retrieves or sets the family of the font. It is equivalent to the [font-family] descriptor.",
        "event": false
      },
      "featureSettings": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [CSSOMString] that retrieves or sets infrequently used font features that are not available from a font's variant properties. It is equivalent to the [font-feature-settings] descriptor.",
        "event": false,
        "default": "\"normal\""
      },
      "loaded": {
        "type": "Promise<boolean>",
        "array": false,
        "dartType": "Promise<boolean>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Promise] that resolves with the current [FontFace] object when the font specified in the object's constructor is done loading or rejects with a [SyntaxError].",
        "event": false
      },
      "status": {
        "type": "FontFaceLoadStatus",
        "array": false,
        "dartType": "FontFaceLoadStatus",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an enumerated value indicating the status of the font, one of  [\"unloaded\"], [\"loading\"], [\"loaded\"], or [\"error\"].",
        "event": false
      },
      "stretch": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [CSSOMString] that retrieves or sets how the font stretches. It is equivalent to the [font-stretch] descriptor.",
        "event": false,
        "default": "\"normal\""
      },
      "style": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [CSSOMString] that retrieves or sets the style of the font. It is equivalent to the [font-style] descriptor.",
        "event": false,
        "default": "\"normal\""
      },
      "unicodeRange": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [CSSOMString] that retrieves or sets the range of unicode codepoints encompassing the font. It is equivalent to the [unicode-range] descriptor.",
        "event": false,
        "default": "\"U+0-10FFFF\""
      },
      "variant": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [CSSOMString] that retrieves or sets the variant of the font. It is equivalent to the [font-variant] descriptor.",
        "event": false,
        "default": "\"normal\""
      },
      "weight": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [CSSOMString] that contains the weight of the font. It is equivalent to the [font-weight] descriptor.",
        "event": false,
        "default": "\"normal\""
      }
    }
  },
  {
    "name": "FontFaceSet",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[FontFaceSet]* interface of the CSS Font Loading API manages the loading of font-faces and querying of their download status.It is available as document.fonts.",
    "abstract": true,
    "category": "interface",
    "props": {
      "status": {
        "type": "FontFaceLoadStatus",
        "array": false,
        "dartType": "FontFaceLoadStatus",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates the font-face's loading status. It will be one of ['loading'] or ['loaded'].",
        "event": false
      },
      "ready": {
        "type": "Promise<FontFaceSet>",
        "array": false,
        "dartType": "Promise<FontFaceSet>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "[Promise] which resolves once font loading and layout operations have completed.",
        "event": false
      }
    }
  },
  {
    "name": "FontFaceSetLoadEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[FontFaceSetLoadEvent]* interface of the CSS Font Loading API  is fired whenever a [FontFaceSet] loads.",
    "abstract": false,
    "category": "interface",
    "props": {
      "fontfaces": {
        "type": "FrozenArray<FontFace>",
        "array": false,
        "dartType": "FrozenArray<FontFace>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an array of [FontFace] instances each of which represents a single usable font.",
        "event": false
      }
    }
  },
  {
    "name": "FormData",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[FormData]* interface provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the [XMLHttpRequest.send()] method. It uses the same format a form would use if the encoding type were set to [\"multipart/form-data\"].\n\nYou can also pass it directly to the [URLSearchParams] constructor if you want to generate query parameters in the way a [<form>] would do if it were using simple [GET] submission.\n\nAn object implementing [FormData] can directly be used in a [for...of] structure, instead of [entries()]: [for (var p of myFormData)] is equivalent to [for (var p of myFormData.entries())].\n\n\n*Note*: This feature is available in Web Workers.\n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "FormDataEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[FormDataEvent]* interface represents a [formdata] event — such an event is fired on an [HTMLFormElement] object after the entry list representing the form's data is constructed. This happens when the form is submitted, but can also be triggered by the invocation of a [FormData()] constructor.\n\nThis allows a [FormData] object to be quickly obtained in response to a [formdata] event firing, rather than needing to put it together yourself when you wish to submit form data via a method like [XMLHttpRequest] (see Using FormData objects).",
    "abstract": false,
    "category": "interface",
    "props": {
      "formData": {
        "type": "FormData",
        "array": false,
        "dartType": "FormData",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the [FormData] object representing the data contained in the form when the event was fired.",
        "event": false
      }
    }
  },
  {
    "name": "FullscreenOptions",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[FullscreenOptions]* dictionary is used to provide configuration options when calling [requestFullscreen()] on an element to place that element into full-screen mode.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "GainNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [GainNode] interface represents a change in volume. It is an [AudioNode] audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A [GainNode] always has exactly one input and one output, both with the same number of channels.\n\nThe gain is a unitless value, changing with time, that is multiplied to each corresponding sample of all input channels. If modified, the new gain is instantly applied, causing unaesthetic 'clicks' in the resulting audio. To prevent this from happening, never change the value directly but use the exponential interpolation methods on the [AudioParam] interface.\n\n\n\n\n \n  \n   Number of inputs\n   [1]\n  \n  \n   Number of outputs\n   [1]\n  \n  \n   Channel count mode\n   [\"max\"]\n  \n  \n   Channel count\n   [2] (not used in the default count mode)\n  \n  \n   Channel interpretation\n   [\"speakers\"]\n  \n \n",
    "abstract": false,
    "category": "interface",
    "props": {
      "gain": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an a-rate [AudioParam] representing the amount of gain to apply. You have to set [AudioParam.value] or use the methods of [AudioParam] to change the effect of gain.",
        "event": false
      }
    }
  },
  {
    "name": "Gamepad",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Gamepad]* interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.\n\nA Gamepad object can be returned in one of two ways: via the [gamepad] property of the [gamepadconnected] and [gamepaddisconnected] events, or by grabbing any position in the array returned by the [Navigator.getGamepads()] method.",
    "abstract": true,
    "category": "interface",
    "props": {
      "axes": {
        "type": "FrozenArray<double>",
        "array": false,
        "dartType": "FrozenArray<double>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An array representing the controls with axes present on the device (e.g. analog thumb sticks).",
        "event": false
      },
      "buttons": {
        "type": "FrozenArray<GamepadButton>",
        "array": false,
        "dartType": "FrozenArray<GamepadButton>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An array of [gamepadButton] objects representing the buttons present on the device.",
        "event": false
      },
      "connected": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A boolean indicating whether the gamepad is still connected to the system.",
        "event": false
      },
      "displayId": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [VRDisplay.displayId] of an associated [VRDisplay] (if relevant) — the [VRDisplay] that the gamepad is controlling the displayed scene of.",
        "event": false
      },
      "id": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] containing identifying information about the controller.",
        "event": false
      },
      "index": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An integer that is auto-incremented to be unique for each device currently connected to the system.",
        "event": false
      },
      "mapping": {
        "type": "GamepadMappingType",
        "array": false,
        "dartType": "GamepadMappingType",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A string indicating whether the browser has remapped the controls on the device to a known layout.",
        "event": false
      },
      "timestamp": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] representing the last time the data for this gamepad was updated.",
        "event": false
      }
    }
  },
  {
    "name": "GamepadButton",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[GamepadButton]* interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.\n\nA [GamepadButton] object is returned by querying any value of the array returned by the [buttons] property of the [Gamepad] interface.\n\n\n*Note*: This is the case in Firefox Gecko 28 and later; Chrome and earlier Firefox versions still return an array of double values when this property is accessed.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "value": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A double value used to represent the current state of analog buttons, such as the triggers on many modern gamepads. The values are normalized to the range 0.0 —1.0, with 0.0 representing a button that is not pressed, and 1.0 representing a button that is fully pressed.",
        "event": false
      },
      "pressed": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] value indicating whether the button is currently pressed ([true]) or unpressed ([false]).",
        "event": false
      }
    }
  },
  {
    "name": "GamepadEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe GamepadEvent interface of the Gamepad API contains references to gamepads connected to the system, which is what the gamepad events [Window.gamepadconnected] and [Window.gamepaddisconnected] are fired in response to.",
    "abstract": false,
    "category": "interface",
    "props": {
      "gamepad": {
        "type": "Gamepad",
        "array": false,
        "dartType": "Gamepad",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Gamepad] object, providing access to the associated gamepad data for the event fired.",
        "event": false
      }
    }
  },
  {
    "name": "GamepadHapticActuator",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[GamepadHapticActuator]* interface of the Gamepad API represents hardware in the controller designed to provide haptic feedback to the user (if available), most commonly vibration hardware.\n\nThis interface is accessible through the [Gamepad.hapticActuators] property.",
    "abstract": true,
    "category": "interface",
    "props": {
      "type": {
        "type": "GamepadHapticActuatorType",
        "array": false,
        "dartType": "GamepadHapticActuatorType",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an enum representing the type of the haptic hardware.",
        "event": false
      }
    }
  },
  {
    "name": "GamepadPose",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[GamepadPose]* interface of the Gamepad API represents the pose of a WebVR controller at a given timestamp (which includes orientation, position, velocity, and acceleration information.)\n\nThis interface is accessible through the [Gamepad.pose] property.",
    "abstract": true,
    "category": "interface",
    "props": {
      "hasOrientation": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a boolean indicating whether the gamepad is capable of returning orientation information ([true]) or not ([false]).",
        "event": false
      },
      "hasPosition": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a boolean indicating whether the gamepad is capable of returning position information ([true]) or not ([false]).",
        "event": false
      },
      "position": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the position of the [Gamepad] as a 3D vector.",
        "event": false
      },
      "linearVelocity": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the linear velocity of the [Gamepad], in meters per second.",
        "event": false
      },
      "linearAcceleration": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the linear acceleration of the [Gamepad], in meters per second per second.",
        "event": false
      },
      "orientation": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the orientation of the [Gamepad], as a quarternion value.",
        "event": false
      },
      "angularVelocity": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the angular velocity of the [Gamepad], in radians per second.",
        "event": false
      },
      "angularAcceleration": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the angular acceleration of the [Gamepad], in meters per second per second.",
        "event": false
      }
    }
  },
  {
    "name": "Geolocation",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [*Geolocation*] interface represents an object able to programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location.\n\nAn object with this interface is obtained using the [navigator.geolocation] property implemented by the [Navigator] object.\n\n\n*Note:* For security reasons, when a web page tries to access location information, the user is notified and asked to grant permission. Be aware that each browser has its own policies and methods for requesting this permission.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "GeolocationCoordinates",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[GeolocationCoordinates]* interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.",
    "abstract": true,
    "category": "interface",
    "props": {
      "latitude": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [double] representing the position's latitude in decimal degrees.",
        "event": false
      },
      "longitude": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [double] representing the position's longitude in decimal degrees.",
        "event": false
      },
      "altitude": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [double] representing the position's altitude in meters, relative to sea level. This value can be [null] if the implementation cannot provide the data.",
        "event": false
      },
      "accuracy": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [double] representing the accuracy of the [latitude] and [longitude] properties, expressed in meters.",
        "event": false
      },
      "altitudeAccuracy": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [double] representing the accuracy of the [altitude] expressed in meters. This value can be [null].",
        "event": false
      },
      "heading": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [double] representing the direction towards which the device is facing. This value, specified in degrees, indicates how far off from heading true north the device is. [0] degrees represents true north, and the direction is determined clockwise (which means that east is [90] degrees and west is [270] degrees). If [speed] is [0], [heading] is [NaN]. If the device is unable to provide [heading] information, this value is [null].",
        "event": false
      },
      "speed": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [double] representing the velocity of the device in meters per second. This value can be [null].",
        "event": false
      }
    }
  },
  {
    "name": "GeolocationPosition",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[GeolocationPosition]* interface represents the position of the concerned device at a given time. The position, represented by a [GeolocationCoordinates] object, comprehends the 2D position of the device, on a spheroid representing the Earth, but also its altitude and its speed.",
    "abstract": true,
    "category": "interface",
    "props": {
      "coords": {
        "type": "GeolocationCoordinates",
        "array": false,
        "dartType": "GeolocationCoordinates",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [GeolocationCoordinates] object defining the current location.",
        "event": false
      },
      "timestamp": {
        "type": "DOMTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMTimeStamp] representing the time at which the location was retrieved.",
        "event": false
      }
    }
  },
  {
    "name": "GeolocationPositionError",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[GeolocationPositionError]* interface represents the reason of an error occurring when using the geolocating device.",
    "abstract": true,
    "category": "interface",
    "props": {
      "code": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [unsigned short] representing the error code. The following values are possible:\n \n  \n   \n    Value\n    Associated constant\n    Description\n   \n   \n    [1]\n    [PERMISSION_DENIED]\n    The acquisition of the geolocation information failed because the page didn't have the permission to do it.\n   \n   \n    [2]\n    [POSITION_UNAVAILABLE]\n    The acquisition of the geolocation failed because at least one internal source of position returned an internal error.\n   \n   \n    [3]\n    [TIMEOUT]\n    The time allowed to acquire the geolocation, defined by [PositionOptions.timeout] information was reached before the information was obtained.\n   \n  \n \n ",
        "event": false
      },
      "message": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a human-readable [DOMString] describing the details of the error. Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.",
        "event": false
      }
    }
  },
  {
    "name": "GlobalEventHandlers",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[GlobalEventHandlers]* mixin describes the event handlers common to several interfaces like [HTMLElement], [Document], or [Window]. Each of these interfaces can, of course, add more event handlers in addition to the ones listed below.\n\n\n*Note*: [GlobalEventHandlers] is a mixin and not an interface; you can't actually create an object of type [GlobalEventHandlers].\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "onabort": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [abort] event is raised.",
        "event": true
      },
      "onanimationcancel": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": false,
        "desc": "An [event handler] called when an [animationcancel] event is sent, indicating that a running CSS animation has been canceled.",
        "event": true
      },
      "onanimationend": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": false,
        "desc": "An [event handler] called when an [animationend] event is sent, indicating that a CSS animation has stopped playing.",
        "event": true
      },
      "onanimationiteration": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": false,
        "desc": "An [event handler] called when an [animationiteration] event has been sent, indicating that a CSS animation has begun playing a new iteration of the animation sequence.",
        "event": true
      },
      "onanimationstart": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": false,
        "desc": "An [event handler] called when an [animationstart] event is sent, indicating that a CSS animation has started playing.",
        "event": true
      },
      "onauxclick": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": false,
        "desc": "An [event handler] called when an [auxclick] event is sent, indicating that a non-primary button has been pressed on an input device (e.g. a middle mouse button).",
        "event": true
      },
      "onblur": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [blur] event is raised.",
        "event": true
      },
      "onerror": {
        "type": "OnErrorEventHandler",
        "array": false,
        "dartType": "OnErrorEventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [OnErrorEventHandler] representing the code to be called when the [error] event is raised.",
        "event": false
      },
      "onfocus": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [focus] event is raised.",
        "event": true
      },
      "oncancel": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [cancel] event is raised.",
        "event": true
      },
      "oncanplay": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [canplay] event is raised.",
        "event": true
      },
      "oncanplaythrough": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [canplaythrough] event is raised.",
        "event": true
      },
      "onchange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [change] event is raised.",
        "event": true
      },
      "onclick": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [click] event is raised.",
        "event": true
      },
      "onclose": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [close] event is raised.",
        "event": true
      },
      "oncontextmenu": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [contextmenu] event is raised.",
        "event": true
      },
      "oncuechange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [cuechange] event is raised.",
        "event": true
      },
      "ondblclick": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [dblclick] event is raised.",
        "event": true
      },
      "ondrag": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [drag] event is raised.",
        "event": true
      },
      "ondragend": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [dragend] event is raised.",
        "event": true
      },
      "ondragenter": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [dragenter] event is raised.",
        "event": true
      },
      "ondragleave": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [dragleave] event is raised.",
        "event": true
      },
      "ondragover": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [dragover] event is raised.",
        "event": true
      },
      "ondragstart": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [dragstart] event is raised.",
        "event": true
      },
      "ondrop": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [drop] event is raised.",
        "event": true
      },
      "ondurationchange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [durationchange] event is raised.",
        "event": true
      },
      "onemptied": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [emptied] event is raised.",
        "event": true
      },
      "onended": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [ended] event is raised.",
        "event": true
      },
      "onformdata": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] for processing [formdata] events, fired after the entry list representing the form's data is constructed.",
        "event": true
      },
      "ongotpointercapture": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [gotpointercapture] event type is raised.",
        "event": true
      },
      "oninput": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [input] event is raised.",
        "event": true
      },
      "oninvalid": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [invalid] event is raised.",
        "event": true
      },
      "onkeydown": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [keydown] event is raised.",
        "event": true
      },
      "onkeypress": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [keypress] event is raised.",
        "event": true
      },
      "onkeyup": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [keyup] event is raised.",
        "event": true
      },
      "onload": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [load] event is raised.",
        "event": true
      },
      "onloadeddata": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [loadeddata] event is raised.",
        "event": true
      },
      "onloadedmetadata": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [loadedmetadata] event is raised.",
        "event": true
      },
      "onloadstart": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [loadstart] event is raised (when progress has begun on the loading of a resource.)",
        "event": true
      },
      "onlostpointercapture": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [lostpointercapture] event type is raised.",
        "event": true
      },
      "onmousedown": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [mousedown] event is raised.",
        "event": true
      },
      "onmouseenter": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [mouseenter] event is raised.",
        "event": true
      },
      "onmouseleave": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [mouseleave] event is raised.",
        "event": true
      },
      "onmousemove": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [mousemove] event is raised.",
        "event": true
      },
      "onmouseout": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [mouseout] event is raised.",
        "event": true
      },
      "onmouseover": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [mouseover] event is raised.",
        "event": true
      },
      "onmouseup": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [mouseup] event is raised.",
        "event": true
      },
      "onwheel": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [wheel] event is raised.",
        "event": true
      },
      "onpause": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [pause] event is raised.",
        "event": true
      },
      "onplay": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [play] event is raised.",
        "event": true
      },
      "onplaying": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [playing] event is raised.",
        "event": true
      },
      "onpointerdown": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [pointerdown] event is raised.",
        "event": true
      },
      "onpointermove": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [pointermove] event is raised.",
        "event": true
      },
      "onpointerup": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [pointerup] event is raised.",
        "event": true
      },
      "onpointercancel": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [pointercancel] event is raised.",
        "event": true
      },
      "onpointerover": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [pointerover] event is raised.",
        "event": true
      },
      "onpointerout": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [pointerout] event is raised.",
        "event": true
      },
      "onpointerenter": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [pointerenter] event is raised.",
        "event": true
      },
      "onpointerleave": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [pointerleave] event is raised.",
        "event": true
      },
      "onprogress": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [progress] event is raised.",
        "event": true
      },
      "onratechange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [ratechange] event is raised.",
        "event": true
      },
      "onreset": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [reset] event is raised.",
        "event": true
      },
      "onresize": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [resize] event is raised.",
        "event": true
      },
      "onscroll": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [scroll] event is raised.",
        "event": true
      },
      "onseeked": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [seeked] event is raised.",
        "event": true
      },
      "onseeking": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [seeking] event is raised.",
        "event": true
      },
      "onselect": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [select] event is raised.",
        "event": true
      },
      "onselectstart": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [selectionchange] event is raised, i.e. when the user starts to make a new text selection on a web page.",
        "event": true
      },
      "onselectionchange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [selectionchange] event is raised, i.e. when the text selected on a web page changes.",
        "event": true
      },
      "onstalled": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [stalled] event is raised.",
        "event": true
      },
      "onsubmit": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [submit] event is raised.",
        "event": true
      },
      "onsuspend": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [suspend] event is raised.",
        "event": true
      },
      "ontimeupdate": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [timeupdate] event is raised.",
        "event": true
      },
      "onvolumechange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [volumechange] event is raised.",
        "event": true
      },
      "ontransitioncancel": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [event handler] called when a [transitioncancel] event is sent, indicating that a CSS transition has been cancelled.",
        "event": true
      },
      "ontransitionend": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [event handler] called when a [transitionend] event is sent, indicating that a CSS transition has finished playing.",
        "event": true
      },
      "ontransitionrun": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [event handler] called when a [transitionrun] event is sent, indicating that a CSS transition is running, though not nessarilty started.",
        "event": true
      },
      "ontransitionstart": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [event handler] called when a [transitionstart] event is sent, indicating that a CSS transition has started transitioning.",
        "event": true
      },
      "onwaiting": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [waiting] event is raised.",
        "event": true
      }
    }
  },
  {
    "name": "GravitySensor",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[GravitySensor]* interface of the Sensor APIs provides on each reading the gravity applied to the device along all three axes. \n\nTo use this sensor, the user must grant permission to the ['accelerometer'] device sensor through the [Permissions] API.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Gyroscope",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Gyroscope]* interface of the Sensor APIs provides on each reading the angular velocity of the device along all three axes. \n\nTo use this sensor, the user must grant permission to the ['gyroscope'] device sensor through the [Permissions] API.\n\nIf a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. See [Feature-Policy] for implementation instructions.",
    "abstract": false,
    "category": "interface",
    "props": {
      "x": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a double, containing the angular velocity of the device along the device's x axis.",
        "event": false
      },
      "y": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a double, containing the angular velocity of the device along the device's y axis.",
        "event": false
      },
      "z": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a double, containing the angular velocity of the device along the device's z axis.",
        "event": false
      }
    }
  },
  {
    "name": "HashChangeEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*HashChangeEvent*] interface represents events that fire when the fragment identifier of the URL has changed.\n\nThe fragment identifier is the part of the URL that follows (and includes) the [#] symbol.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "newURL": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The new URL to which the window is navigating.",
        "event": false
      },
      "oldURL": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The previous URL from which the window was navigated.",
        "event": false
      }
    }
  },
  {
    "name": "Headers",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Headers]* interface of the Fetch API allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing headers from the list of the request's headers. A [Headers] object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like [append()] (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence. \n\nFor security reasons, some headers can only be controlled by the user agent. These headers include the forbidden header names  and forbidden response header names.\n\nA Headers object also has an associated guard, which takes a value of [immutable], [request], [request-no-cors], [response], or [none]. This affects whether the [set()], [delete()], and [append()] methods will mutate the header. For more information see Guard.\n\nYou can retrieve a [Headers] object via the [Request.headers] and [Response.headers] properties, and create a new [Headers] object using the [Headers.Headers()] constructor.\n\nAn object implementing [Headers] can directly be used in a [for...of] structure, instead of [entries()]: [for (var p of myHeaders)] is equivalent to [for (var p of myHeaders.entries())].\n\n\n*Note*: you can find more out about the available headers by reading our HTTP headers reference.\n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "HID",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[HID]* interface provides methods for connecting to HID devices, listing attached HID devices and event handlers for connected HID devices.",
    "abstract": true,
    "category": "interface",
    "props": {
      "onconnect": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Fired when an HID device is connected.",
        "event": false
      },
      "ondisconnect": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Fired when an HID device is disconnected.",
        "event": false
      }
    }
  },
  {
    "name": "History",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[History]* interface allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "HkdfParams",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "The *[HkdfParams]* dictionary of the Web Crypto API represents the object that should be passed as the [algorithm] parameter into [SubtleCrypto.deriveKey()], when using the HKDF algorithm.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "HmacImportParams",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HmacImportParams]* dictionary of the Web Crypto API represents the object that should be passed as the [algorithm] parameter into [SubtleCrypto.importKey()] or [SubtleCrypto.unwrapKey()], when generating a key for the HMAC algorithm.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "HmacKeyGenParams",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HmacKeyGenParams]* dictionary of the Web Crypto API represents the object that should be passed as the [algorithm] parameter into [SubtleCrypto.generateKey()], when generating a key for the HMAC algorithm.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "HTMLAnchorElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLAnchorElement]* interface represents hyperlink elements and provides special properties and methods (beyond those of the regular [HTMLElement] object interface that they inherit from) for manipulating the layout and presentation of such elements. This interface corresponds to [<a>] element; not to be confused with [<link>], which is represented by [HTMLLinkElement])\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "download": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.",
        "event": false
      },
      "hash": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] representing the fragment identifier, including the leading hash mark ('[#]'), if any, in the referenced URL.",
        "event": false
      },
      "host": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] representing the hostname and port (if it's not the default port) in the referenced URL.",
        "event": false
      },
      "hostname": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] representing the hostname in the referenced URL.",
        "event": false
      },
      "href": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] that is the result of parsing the [href] HTML attribute relative to the document, containing a valid URL of a linked resource.",
        "event": false
      },
      "hreflang": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [hreflang] HTML attribute, indicating the language of the linked resource.",
        "event": false
      },
      "origin": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [USVString] containing the origin of the URL, that is its scheme, its domain and its port.",
        "event": false
      },
      "password": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing the password specified before the domain name.",
        "event": false
      },
      "pathname": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing an initial ['/'] followed by the path of the URL, not including the query string or fragment.",
        "event": false
      },
      "port": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] representing the port component, if any, of the referenced URL.",
        "event": false
      },
      "protocol": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] representing the protocol component, including trailing colon ('[:]'), of the referenced URL.",
        "event": false
      },
      "referrerPolicy": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [referrerpolicy] HTML attribute indicating which referrer to use.",
        "event": false
      },
      "rel": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [rel] HTML attribute, specifying the relationship of the target object to the linked object.",
        "event": false
      },
      "relList": {
        "type": "DOMTokenList",
        "array": false,
        "dartType": "DOMTokenList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMTokenList] that reflects the [rel] HTML attribute, as a list of tokens.",
        "event": false
      },
      "search": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] representing the search element, including leading question mark ('[?]'), if any, of the referenced URL.",
        "event": false
      },
      "target": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [target] HTML attribute, indicating where to display the linked resource.",
        "event": false
      },
      "text": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] being a synonym for the [Node.textContent] property.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [type] HTML attribute, indicating the MIME type of the linked resource.",
        "event": false
      },
      "username": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing the username specified before the domain name.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLAreaElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLAreaElement]* interface provides special properties and methods (beyond those of the regular object [HTMLElement] interface it also has available to it by inheritance) for manipulating the layout and presentation of [<area>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "alt": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [alt] HTML attribute, containing alternative text for the element.",
        "event": false
      },
      "coords": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [coords] HTML attribute, containing coordinates to define the hot-spot region.",
        "event": false
      },
      "download": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.",
        "event": false
      },
      "hash": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing the fragment identifier (including the leading hash mark (#)), if any, in the referenced URL.",
        "event": false
      },
      "host": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing the hostname and port (if it's not the default port) in the referenced URL.",
        "event": false
      },
      "hostname": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing the hostname in the referenced URL.",
        "event": false
      },
      "href": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing that reflects the [href] HTML attribute, containing a valid URL of a linked resource.",
        "event": false
      },
      "noHref": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [Boolean] flag indicating if the area is inactive ([true]) or active ([false]).",
        "event": false
      },
      "origin": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [USVString] containing the origin of the URL, that is its scheme, its domain and its port.",
        "event": false
      },
      "password": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing the password specified before the domain name.",
        "event": false
      },
      "pathname": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing the path name component, if any, of the referenced URL.",
        "event": false
      },
      "port": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing the port component, if any, of the referenced URL.",
        "event": false
      },
      "protocol": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing the protocol component (including trailing colon [':']), of the referenced URL.",
        "event": false
      },
      "referrerPolicy": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [referrerpolicy] HTML attribute indicating which referrer to use when fetching the linked resource.",
        "event": false
      },
      "rel": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [rel] HTML attribute, indicating relationships of the current document to the linked resource.",
        "event": false
      },
      "relList": {
        "type": "DOMTokenList",
        "array": false,
        "dartType": "DOMTokenList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMTokenList] that reflects the [rel] HTML attribute, indicating relationships of the current document to the linked resource, as a list of tokens.",
        "event": false
      },
      "search": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing the search element (including leading question mark ['?']), if any, of the referenced URL.",
        "event": false
      },
      "shape": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [shape] HTML attribute, indicating the shape of the hot-spot, limited to known values.",
        "event": false
      },
      "target": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [target] HTML attribute, indicating the browsing context in which to open the linked resource.",
        "event": false
      },
      "username": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing the username specified before the domain name.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLAudioElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLAudioElement]* interface provides access to the properties of [<audio>] elements, as well as methods to manipulate them. It's based on, and inherits properties and methods from, the [HTMLMediaElement] interface.\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "HTMLBaseElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLBaseElement]* interface contains the base URI for a document. This object inherits all of the properties and methods as described in the [HTMLElement] interface.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "href": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [href] HTML attribute, containing a base URL for relative URLs in the document.",
        "event": false
      },
      "target": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [target] HTML attribute, containing a default target browsing context or frame for elements that do not have a target reference specified.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLBaseFontElement",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[HTMLBaseFontElement]* interface provides special properties (beyond the regular [HTMLElement] interface it also has available to it by inheritance) for manipulating [<basefont>] elements.\n\nThe [<basefont>] element has been deprecated in HTML4 and removed in HTML5. This latest specification requires that this element implements [HTMLUnknownElement] rather than [HTMLBaseFontElement].",
    "abstract": true,
    "category": "interface",
    "props": {
      "color": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the text color using either a named color or a color specified in the hexadecimal [#RRGGBB] format.",
        "event": false
      },
      "face": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing a list of one or more font names. The document text in the default style is rendered in the first font face that the client's browser supports. If no font listed is installed on the local system, the browser typically defaults to the proportional or fixed-width font for that system.",
        "event": false
      },
      "size": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the font size as either a numeric or relative value. Numeric values range from [1] to [7] with [1] being the smallest and [3] the default. Relative value starts with a ['+'] or a ['-]'.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLBodyElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLBodyElement]* interface provides special properties (beyond those inherited from the regular [HTMLElement] interface) for manipulating [<body>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "aLink": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] that represents the color of active hyperlinks.",
        "event": false
      },
      "background": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] that represents the description of the location of the background image resource. Note that this is not an URI, though some older version of some browsers do expect it.",
        "event": false
      },
      "bgColor": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] that represents the background color for the document.",
        "event": false
      },
      "link": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] that represents the color of unvisited links.",
        "event": false
      },
      "text": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] that represents the foreground color of text.",
        "event": false
      },
      "vLink": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] that represents the color of visited links.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLBRElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLBRElement]* interface represents a HTML line break element ([<br>]). It inherits from [HTMLElement].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "clear": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] indicating the flow of text around floating objects.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLButtonElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLButtonElement]* interface provides properties and methods (beyond the regular [HTMLElement] interface it also has available to it by inheritance) for manipulating [<button>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "accessKey": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] indicating the single-character keyboard key to give access to the button.",
        "event": false
      },
      "disabled": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Boolean] indicating whether or not the control is disabled, meaning that it does not accept any clicks.",
        "event": false
      },
      "form": {
        "type": "HTMLFormElement",
        "array": false,
        "dartType": "HTMLFormElement",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [HTMLFormElement] reflecting the form that this button is associated with. If the button is a descendant of a form element, then this attribute is the ID of that form element.\n If the button is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the [null] value if none matches.",
        "event": false
      },
      "formAction": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] reflecting the URI of a resource that processes information submitted by the button. If specified, this attribute overrides the [action] attribute of the [<form>] element that owns this element.",
        "event": false
      },
      "formEnctype": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] reflecting the type of content that is used to submit the form to the server. If specified, this attribute overrides the [enctype] attribute of the [<form>] element that owns this element.",
        "event": false
      },
      "formMethod": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] reflecting the HTTP method that the browser uses to submit the form. If specified, this attribute overrides the [method] attribute of the [<form>] element that owns this element.",
        "event": false
      },
      "formNoValidate": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Boolean] indicating that the form is not to be validated when it is submitted. If specified, this attribute overrides the [novalidate] attribute of the [<form>] element that owns this element.",
        "event": false
      },
      "formTarget": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] reflecting a name or keyword indicating where to display the response that is received after submitting the form. If specified, this attribute overrides the [target] attribute of the [<form>] element that owns this element.",
        "event": false
      },
      "labels": {
        "type": "NodeList",
        "array": false,
        "dartType": "NodeList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [NodeList] that represents a list of [<label>] elements that are labels for this button.",
        "event": false
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the name of the object when submitted with a form. If specified, it must not be the empty string.",
        "event": false
      },
      "tabIndex": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [long] that represents this element's position in the tabbing order.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] indicating the behavior of the button. This is an enumerated attribute with the following possible values:\n \n  [submit]: The button submits the form. This is the default value if the attribute is not specified, or if it is dynamically changed to an empty or invalid value.\n  [reset]: The button resets the form.\n  [button]: The button does nothing.\n  [menu]: The button displays a menu. \n    \n\n \n ",
        "event": false
      },
      "willValidate": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Boolean] indicating whether the button is a candidate for constraint validation. It is [false] if any conditions bar it from constraint validation, including: its [type] property is [reset] or [button]; it has a [<datalist>] ancestor; or the [disabled] property is set to [true].",
        "event": false
      },
      "validationMessage": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation ([willValidate] is [false]), or it satisfies its constraints.",
        "event": false
      },
      "validity": {
        "type": "ValidityState",
        "array": false,
        "dartType": "ValidityState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [ValidityState] representing the validity states that this button is in.",
        "event": false
      },
      "value": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the current form control value of the button.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLCanvasElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n\nThe *[HTMLCanvasElement]* interface provides properties and methods for manipulating the layout and presentation of [<canvas>] elements. The [HTMLCanvasElement] interface also inherits the properties and methods of the [HTMLElement] interface.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "height": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [height] HTML attribute of the [<canvas>] element is a positive [integer] reflecting the number of logical pixels (or RGBA values) going down one column of the canvas. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of [150] is used. If no [separate] CSS height is assigned to the [<canvas>], then this value will also be used as the height of the canvas in the length-unit CSS Pixel.",
        "event": false
      },
      "width": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [width] HTML attribute of the [<canvas>] element is a positive [integer] reflecting the number of logical pixels (or RGBA values) going across one row of the canvas. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of [300] is used. If no [separate] CSS width is assigned to the [<canvas>], then this value will also be used as the width of the canvas in the length-unit CSS Pixel.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLCollection",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLCollection]* interface represents a generic collection (array-like object similar to [arguments]) of elements (in document order) and offers methods and properties for selecting from the list.\n\n*Note:* This interface is called [HTMLCollection] for historical reasons (before the modern DOM, collections implementing this interface could only have HTML elements as their items).\n\nAn [HTMLCollection] in the HTML DOM is live; it is automatically updated when the underlying document is changed.",
    "abstract": true,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the number of items in the collection.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLDataElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLDataElement]* interface provides special properties (beyond the regular [HTMLElement] interface it also has available to it by inheritance) for manipulating [<data>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "value": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] reflecting the [value] HTML attribute, containing a machine-readable form of the element's value.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLDataListElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLDataListElement]* interface provides special properties (beyond the [HTMLElement] object interface it also has available to it by inheritance) to manipulate [<datalist>] elements and their content.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "options": {
        "type": "HTMLCollection",
        "array": false,
        "dartType": "HTMLCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [HTMLCollection] representing a collection of the contained option elements.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLDetailsElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLDetailsElement]* interface provides special properties (beyond the regular [HTMLElement] interface it also has available to it by inheritance) for manipulating [<details>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "open": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [boolean] reflecting the [open] HTML attribute, indicating whether or not the element’s contents (not counting the [<summary>]) is to be shown to the user.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLDialogElement",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[HTMLDialogElement]* interface provides methods to manipulate [<dialog>] elements. It inherits properties and methods from the [HTMLElement] interface.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "open": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] reflecting the [open] HTML attribute, indicating whether the dialog is available for interaction.",
        "event": false
      },
      "returnValue": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] that sets or returns the return value for the dialog.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLDivElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLDivElement]* interface provides special properties (beyond the regular [HTMLElement] interface it also has available to it by inheritance) for manipulating [<div>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "align": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are [\"left\"], [\"right\"], [\"justify\"], and [\"center\"].",
        "event": false
      }
    }
  },
  {
    "name": "HTMLDListElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLDListElement]* interface provides special properties (beyond those of the regular [HTMLElement] interface it also has available to it by inheritance) for manipulating definition list ([<dl>]) elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "compact": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [Boolean] indicating that spacing between list items should be reduced.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLDocument",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLDocument]* interface, which may be accessed through the [Window.HTMLDocument] property, extends the [Window.HTMLDocument] property to include methods and properties that are specific to HTML documents.\n\n\n\n\n\nFor the purposes of web development, you can generally think of [HTMLDocument] as an alias for [Document], upon which [HTMLDocument] is based. You can find documentation for the members of [HTMLDocument] under the [Document] interface.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "HTMLElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLElement]* interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "accessKey": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the access key assigned to the element.",
        "event": false
      },
      "accessKeyLabel": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] containing the element's assigned access key.",
        "event": false
      },
      "contentEditable": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString], where a value of [true] means the element is editable and a value of [false] means it isn't.",
        "event": false
      },
      "isContentEditable": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] that indicates whether or not the content of the element can be edited.",
        "event": false
      },
      "dir": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString], reflecting the [dir] global attribute, representing the directionality of the element. Possible values are [\"ltr\"], [\"rtl\"], and [\"auto\"].",
        "event": false
      },
      "draggable": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Boolean] indicating if the element can be dragged.",
        "event": false
      },
      "hidden": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Boolean] indicating if the element is hidden or not.",
        "event": false
      },
      "innerText": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the \"rendered\" text content of a node and its descendants. As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard.",
        "event": false
      },
      "lang": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the language of an element's attributes, text, and element contents.",
        "event": false
      },
      "offsetHeight": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [double] containing the height of an element, relative to the layout.",
        "event": false
      },
      "offsetLeft": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [double], the distance from this element's left border to its [offsetParent]'s left border.",
        "event": false
      },
      "offsetParent": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": true,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Element] that is the element from which all offset calculations are currently computed.",
        "event": false
      },
      "offsetTop": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [double], the distance from this element's top border to its [offsetParent]'s top border.",
        "event": false
      },
      "offsetWidth": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [double] containing the width of an element, relative to the layout.",
        "event": false
      },
      "spellcheck": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Boolean] that controls spell-checking. It is present on all HTML elements, though it doesn't have an effect on all of them.",
        "event": false
      },
      "title": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] containing the text that appears in a popup box when mouse is over the element.",
        "event": false
      },
      "translate": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Boolean] representing the translation.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLEmbedElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLEmbedElement]* interface provides special properties (beyond the regular [HTMLElement] interface it also has available to it by inheritance) for manipulating [<embed>] elements.\n\n\nThis topic describes the [HTMLEmbedElement] interface as defined in the standard. It does not address earlier, non-standardized version of the interface.\n\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "align": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are [\"left\"], [\"right\"], [\"center\"], and [\"justify\"].",
        "event": false
      },
      "height": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] reflecting the [height] HTML attribute, containing the displayed height of the resource.",
        "event": false
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing the name of the embedded object.",
        "event": false
      },
      "src": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [src] HTML attribute, containing the address of the resource.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [type] HTML attribute, containing the type of the resource.",
        "event": false
      },
      "width": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [width] HTML attribute, containing the displayed width of the resource.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLFieldSetElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLFieldSetElement]* interface provides special properties and methods (beyond the regular [HTMLElement] interface it also has available to it by inheritance) for manipulating the layout and presentation of [<fieldset>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "disabled": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] reflecting the [disabled] HTML attribute, indicating whether the user can interact with the control.",
        "event": false
      },
      "elements": {
        "type": "HTMLCollection",
        "array": false,
        "dartType": "HTMLCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The elements belonging to this field set. The type of this property depends on the version of the spec that is implemented by the browser.",
        "event": false
      },
      "form": {
        "type": "HTMLFormElement",
        "array": false,
        "dartType": "HTMLFormElement",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [HTMLFormControlsCollection] or [HTMLCollection] referencing the containing form element, if this element is in a form.\n If the field set is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the [null] value if none matches.",
        "event": false
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] reflecting the [name] HTML attribute, containing the name of the field set. This can be used when accessing the field set in JavaScript. It is not part of the data which is sent to the server.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [DOMString] \"[fieldset]\".",
        "event": false
      },
      "validationMessage": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] representing a localized message that describes the validation constraints that the element does not satisfy (if any). This is the empty string if the element is not a candidate for constraint validation ([willValidate] is [false]), or it satisfies its constraints.",
        "event": false
      },
      "validity": {
        "type": "ValidityState",
        "array": false,
        "dartType": "ValidityState",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [ValidityState] representing the validity states that this element is in.",
        "event": false
      },
      "willValidate": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] [false], because [<fieldset>] objects are never candidates for constraint validation.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLFontElement",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nImplements the document object model (DOM) representation of the font element. The HTML Font Element [<font>] defines the font size, font face and color of text.",
    "abstract": true,
    "category": "interface",
    "props": {
      "color": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [color] HTML attribute, containing either a named color or a color specified in the hexadecimal #RRGGBB format.",
        "event": false
      },
      "face": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [face] HTML attribute, containing a comma-separated list of one or more font names.",
        "event": false
      },
      "size": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [size] HTML attribute, containing either a font size number ranging from 1 to 7 or a relative size to the [size] attribute of the [<basefont>] element, for example -2 or +1.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLFormControlsCollection",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLFormControlsCollection]* interface represents a collection of HTML form control elements. It represents the lists returned by the [HTMLFormElement] interface's [elements] property and the [HTMLFieldSetElement] interface's [elements] property.\n\nThis interface replaces one method from [HTMLCollection], on which it is based.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "HTMLFormElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*HTMLFormElement*] interface represents a [<form>] element in the DOM. It allows access to—and, in some cases, modification of—aspects of the form, as well as access to its component elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "elements": {
        "type": "HTMLFormControlsCollection",
        "array": false,
        "dartType": "HTMLFormControlsCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [HTMLFormControlsCollection] holding all form controls belonging to this form element.",
        "event": false
      },
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [long] reflecting the number of controls in the form.",
        "event": false
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] reflecting the value of the form's [name] HTML attribute, containing the name of the form.",
        "event": false
      },
      "method": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] reflecting the value of the form's [method] HTML attribute, indicating the HTTP method used to submit the form. Only specified values can be set.",
        "event": false
      },
      "target": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] reflecting the value of the form's [target] HTML attribute, indicating where to display the results received from submitting the form.",
        "event": false
      },
      "action": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] reflecting the value of the form's [action] HTML attribute, containing the URI of a program that processes the information submitted by the form.",
        "event": false
      },
      "encoding": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] reflecting the value of the form's [enctype] HTML attribute, indicating the type of content that is used to transmit the form to the server. Only specified values can be set. The two properties are synonyms.",
        "event": false
      },
      "acceptCharset": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] reflecting the value of the form's [accept-charset] HTML attribute, representing the character encoding that the server accepts.",
        "event": false
      },
      "autocomplete": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] reflecting the value of the form's [autocomplete] HTML attribute, indicating whether the controls in this form can have their values automatically populated by the browser.",
        "event": false
      },
      "noValidate": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] reflecting the value of the form's [novalidate] HTML attribute, indicating whether the form should not be validated.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLFrameSetElement",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[HTMLFrameSetElement]* interface provides special properties (beyond those of the regular [HTMLElement] interface they also inherit) for manipulating [<frameset>] elements.",
    "abstract": true,
    "category": "interface",
    "props": {
      "cols": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] structured as a comma-separated list specifying the width of each column inside a frameset.",
        "event": false
      },
      "rows": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] structured as a comma-separated list specifying the height of each column inside a frameset.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLHeadElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLHeadElement]* interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the [HTMLElement] interface.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "profile": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing the URIs of one or more metadata profiles (white space separated).",
        "event": false
      }
    }
  },
  {
    "name": "HTMLHeadingElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n\nThe *[HTMLHeadingElement]* interface represents the different heading elements, [<h1>] through [<h6>]. It inherits methods and properties from the [HTMLElement] interface.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "align": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing an enumerated attribute indicating alignment of the heading with respect to the surrounding context. The possible values are [\"left\"], [\"right\"], [\"justify\"], and [\"center\"].",
        "event": false
      }
    }
  },
  {
    "name": "HTMLHRElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n\nThe *[HTMLHRElement]* interface provides special properties (beyond those of the [HTMLElement] interface it also has available to it by inheritance) for manipulating [<hr>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "align": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString], an enumerated attribute indicating alignment of the rule with respect to the surrounding context.",
        "event": false
      },
      "color": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing the name of the color of the rule.",
        "event": false
      },
      "size": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing the height of the rule.",
        "event": false
      },
      "width": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing the width of the rule on the page.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLHtmlElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLHtmlElement]* interface serves as the root node for a given HTML document. This object inherits the properties and methods described in the [HTMLElement] interface.\n\nYou can retrieve the [HTMLHtmlElement] object for a given document by reading the value of the [document.documentElement] property.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "version": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing the version of the HTML Document Type Definition (DTD) that governs this document. This property should not be used any more as it is non-conforming. Omit it.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLIFrameElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLIFrameElement]* interface provides special properties and methods (beyond those of the [HTMLElement] interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "align": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] that specifies the alignment of the frame with respect to the surrounding context.",
        "event": false
      },
      "allow": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Is a list of origins the frame is allowed to display content from. This attribute also accepts the values [self] and [src] which represent the origin in the iframe's src attribute. The default value is [src].",
        "event": false
      },
      "contentDocument": {
        "type": "Document",
        "array": false,
        "dartType": "Document",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Document], the active document in the inline frame's nested browsing context.",
        "event": false
      },
      "contentWindow": {
        "type": "WindowProxy",
        "array": false,
        "dartType": "WindowProxy",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [WindowProxy], the window proxy for the nested browsing context.",
        "event": false
      },
      "csp": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Specifies the Content Security Policy that an embedded document must agree to enforce upon itself.",
        "event": false
      },
      "frameBorder": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] that indicates whether to create borders between frames.",
        "event": false
      },
      "height": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [height] HTML attribute, indicating the height of the frame.",
        "event": false
      },
      "longDesc": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] that contains the URI of a long description of the frame.",
        "event": false
      },
      "marginHeight": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] being the height of the frame margin.",
        "event": false
      },
      "marginWidth": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] being the width of the frame margin.",
        "event": false
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [name] HTML attribute, containing a name by which to refer to the frame.",
        "event": false
      },
      "referrerPolicy": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [referrerpolicy] HTML attribute indicating which referrer to use when fetching the linked resource.",
        "event": false
      },
      "sandbox": {
        "type": "DOMTokenList",
        "array": false,
        "dartType": "DOMTokenList",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMSettableTokenList] that reflects the [sandbox] HTML attribute, indicating extra restrictions on the behavior of the nested content.",
        "event": false
      },
      "scrolling": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] that indicates whether the browser should provide scrollbars for the frame.",
        "event": false
      },
      "src": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [src] HTML attribute, containing the address of the content to be embedded. Note that programmatically removing an [<iframe>]'s src attribute (e.g. via [Element.removeAttribute()]) causes [about:blank] to be loaded in the frame in Firefox (from version 65), Chromium-based browsers, and Safari/iOS.",
        "event": false
      },
      "srcdoc": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that represents the content to display in the frame.",
        "event": false
      },
      "width": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [width] HTML attribute, indicating the width of the frame.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLImageElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLImageElement]* interface represents an HTML [<img>] element, providing the properties and methods used to manipulate image elements.\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "alt": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] that reflects the [alt] HTML attribute, thus indicating the alternate fallback content to be displayed if the image has not been loaded.",
        "event": false
      },
      "complete": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] that is [true] if the browser has finished fetching the image, whether successful or not. That means this value is also [true] if the image has no [src] value indicating an image to load.",
        "event": false
      },
      "crossOrigin": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] specifying the CORS setting for this image element. See CORS settings attributes for further details. This may be [null] if CORS is not used.",
        "event": false
      },
      "currentSrc": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [USVString] representing the URL from which the currently displayed image was loaded. This may change as the image is adjusted due to changing conditions, as directed by any media queries which are in place.",
        "event": false
      },
      "decoding": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An optional [DOMString] representing a hint given to the browser on how it should decode the image. If this value is provided, it must be one of the possible permitted values: [sync] to decode the image synchronously, [async] to decode it asynchronously, or [auto] to indicate no preference (which is the default). Read the [decoding] page for details on the implications of this property's values.",
        "event": false
      },
      "height": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An integer value that reflects the [height] HTML attribute, indicating the rendered height of the image in CSS pixels.",
        "event": false
      },
      "isMap": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] that reflects the [ismap] HTML attribute, indicating that the image is part of a server-side image map. This is different from a client-side image map, specified using an [<img>] element and a corresponding [<map>] which contains [<area>] elements indicating the clickable areas in the image. The image must be contained within an [<a>] element; see the [ismap] page for details.",
        "event": false
      },
      "loading": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] providing a hint to the browser used to optimize loading the document by determining whether to load the image immediately ([eager]) or on an as-needed basis ([lazy]).",
        "event": false
      },
      "naturalHeight": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an integer value representing the intrinsic height of the image in CSS pixels, if it is available; else, it shows [0]. This is the height the image would be if it were rendered at its natural full size.",
        "event": false
      },
      "naturalWidth": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An integer value representing the intrinsic width of the image in CSS pixels, if it is available; otherwise, it will show [0]. This is the width the image would be if it were rendered at its natural full size.",
        "event": false
      },
      "referrerPolicy": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] that reflects the [referrerpolicy] HTML attribute, which tells the user agent how to decide which referrer to use in order to fetch the image. Read this article for details on the possible values of this string.",
        "event": false
      },
      "sizes": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] reflecting the [sizes] HTML attribute. This string specifies a list of comma-separated conditional sizes for the image; that is, for a given viewport size, a particular image size is to be used. Read the documentation on the [sizes] page for details on the format of this string.",
        "event": false
      },
      "src": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [USVString] that reflects the [src] HTML attribute, which contains the full URL of the image including base URI. You can load a different image into the element by changing the URL in the [src] attribute.",
        "event": false
      },
      "srcset": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [USVString] reflecting the [srcset] HTML attribute. This specifies a list of candidate images, separated by commas ([',', U+002C COMMA]). Each candidate image is a URL followed by a space, followed by a specially-formatted string indicating the size of the image. The size may be specified either the width or a size multiple. Read the [srcset] page for specifics on the format of the size substring.",
        "event": false
      },
      "useMap": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] reflecting the [usemap] HTML attribute, containing the page-local URL of the [<map>] element describing the image map to use. The page-local URL is a pound (hash) symbol ([#]) followed by the ID of the [<map>] element, such as [#my-map-element]. The [<map>] in turn contains [<area>] elements indicating the clickable areas in the image.",
        "event": false
      },
      "width": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An integer value that reflects the [width] HTML attribute, indicating the rendered width of the image in CSS pixels.",
        "event": false
      },
      "x": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An integer indicating the horizontal offset of the left border edge of the image's CSS layout box relative to the origin of the [<html>] element's containing block.",
        "event": false
      },
      "y": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The integer vertical offset of the top border edge of the image's CSS layout box relative to the origin of the [<html>] element's containing block.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLInputElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLInputElement]* interface provides special properties and methods for manipulating the options, layout, and presentation of [<input>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "align": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "[string]: *Represents* the alignment of the element. Use CSS instead.",
        "event": false
      },
      "useMap": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "[string]: *Represents* a client-side image map.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLLabelElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLLabelElement]* interface gives access to properties specific to [<label>] elements. It inherits methods and properties from the base [HTMLElement] interface.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "control": {
        "type": "HTMLElement",
        "array": false,
        "dartType": "HTMLElement",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [HTMLElement] representing the control with which the label is associated.",
        "event": false
      },
      "form": {
        "type": "HTMLFormElement",
        "array": false,
        "dartType": "HTMLFormElement",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [HTMLFormElement] object representing the form with which the labeled control is associated, or [null] if there is no associated control, or if that control isn't associated with a form. In other words, this is just a shortcut for [HTMLLabelElement.control.form].",
        "event": false
      },
      "htmlFor": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a string containing the ID of the labeled control. This reflects the [for] attribute.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLLegendElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLLegendElement]* is an interface allowing to access properties of the [<legend>] elements. It inherits properties and methods from the [HTMLElement] interface.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "form": {
        "type": "HTMLFormElement",
        "array": false,
        "dartType": "HTMLFormElement",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [HTMLFormElement] representing the form that this legend belongs to. If the legend has a fieldset element as its parent, then this attribute returns the same value as the *form* attribute on the parent fieldset element. Otherwise, it returns null. ",
        "event": false
      },
      "accessKey": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing a single-character access key to give access to the element.",
        "event": false
      },
      "align": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing the alignment relative to the form set",
        "event": false
      }
    }
  },
  {
    "name": "HTMLLIElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n\nThe *[HTMLLIElement]* interface exposes specific properties and methods (beyond those defined by regular [HTMLElement] interface it also has available to it by inheritance) for manipulating list elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing the type of the bullets, [\"disc\"], [\"square\"] or [\"circle\"]. As the standard way of defining the list type is via the CSS [list-style-type] property, use the CSSOM methods to set it via a script.",
        "event": false
      },
      "value": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [long] indicating the ordinal position of the list element inside a given [<ol>]. It reflects the [value] attribute of the HTML [<li>] element, and can be smaller than [0]. If the [<li>] element is not a child of an [<ol>] element, the property has no meaning.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLLinkElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n\nThe *[HTMLLinkElement]* interface represents reference information for external resources and the relationship of those resources to a document and vice-versa (corresponds to [<link>] element; not to be confused with [<a>], which is represented by [HTMLAnchorElement]). This object inherits all of the properties and methods of the [HTMLElement] interface.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "as": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the type of content being loaded by the HTML link.",
        "event": false
      },
      "crossOrigin": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": false,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that corresponds to the CORS setting for this link element. See CORS settings attributes for details.",
        "event": false
      },
      "disabled": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Boolean] which represents whether the link is disabled; currently only used with style sheet links.",
        "event": false
      },
      "href": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the URI for the target resource.",
        "event": false
      },
      "hreflang": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the language code for the linked resource.",
        "event": false
      },
      "media": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing a list of one or more media formats to which the resource applies.",
        "event": false
      },
      "referrerPolicy": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [referrerpolicy] HTML attribute indicating which referrer to use.",
        "event": false
      },
      "rel": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the forward relationship of the linked resource from the document to the resource.",
        "event": false
      },
      "relList": {
        "type": "DOMTokenList",
        "array": false,
        "dartType": "DOMTokenList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMTokenList] that reflects the [rel] HTML attribute, as a list of tokens.",
        "event": false
      },
      "sizes": {
        "type": "DOMTokenList",
        "array": false,
        "dartType": "DOMTokenList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMSettableTokenList] that reflects the [sizes] HTML attribute, as a list of tokens.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the MIME type of the linked resource.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLMapElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n\nThe *[HTMLMapElement]* interface provides special properties and methods (beyond those of the regular object [HTMLElement] interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the [<map>] element for referencing it other context. If the [id] attribute is set, this must have the same value; and it cannot be [null] or empty.",
        "event": false
      },
      "areas": {
        "type": "HTMLCollection",
        "array": false,
        "dartType": "HTMLCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a live [HTMLCollection] representing the [<area>] elements associated to this [<map>].",
        "event": false
      }
    }
  },
  {
    "name": "HTMLMediaElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLMediaElement]* interface adds to [HTMLElement] the properties and methods needed to support basic media-related capabilities that are common to audio and video. The [HTMLVideoElement] and [HTMLAudioElement] elements both inherit this interface.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "audioTracks": {
        "type": "AudioTrackList",
        "array": false,
        "dartType": "AudioTrackList",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [AudioTrackList] that lists the [AudioTrack] objects contained in the element.",
        "event": false
      },
      "autoplay": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] that reflects the [autoplay] HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.\n\n *Note*: Automatically playing audio when the user doesn't expect or desire it is a poor user experience and should be avoided in most cases, though there are exceptions. See the Autoplay guide for media and Web Audio APIs for more information. Keep in mind that browsers may ignore autoplay requests, so you should ensure that your code isn't dependent on autoplay working.\n ",
        "event": false
      },
      "buffered": {
        "type": "TimeRanges",
        "array": false,
        "dartType": "TimeRanges",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [TimeRanges] object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the [buffered] property is accessed.",
        "event": false
      },
      "controls": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Boolean] that reflects the [controls] HTML attribute, indicating whether user interface items for controlling the resource should be displayed.",
        "event": false
      },
      "crossOrigin": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] indicating the CORS setting for this media element.",
        "event": false
      },
      "currentSrc": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] with the absolute URL of the chosen media resource.",
        "event": false
      },
      "currentTime": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A double-precision floating-point value indicating the current playback time in seconds; if the media has not started to play and has not been seeked, this value is the media's initial playback time. Setting this value seeks the media to the new time. The time is specified relative to the media's timeline.",
        "event": false
      },
      "defaultMuted": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] that reflects the [muted] HTML attribute, which indicates whether the media element's audio output should be muted by default.",
        "event": false
      },
      "defaultPlaybackRate": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [double] indicating the default playback rate for the media.",
        "event": false
      },
      "disableRemotePlayback": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] that sets or returns the remote playback state, indicating whether the media element is allowed to have a remote playback UI.",
        "event": false
      },
      "duration": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A read-only double-precision floating-point value indicating the total duration of the media in seconds. If no media data is available, the returned value is [NaN]. If the media is of indefinite length (such as streamed live media, a WebRTC call's media, or similar), the value is [+Infinity].",
        "event": false
      },
      "ended": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] that indicates whether the media element has finished playing.",
        "event": false
      },
      "error": {
        "type": "MediaError",
        "array": false,
        "dartType": "MediaError",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [MediaError] object for the most recent error, or [null] if there has not been an error.",
        "event": false
      },
      "loop": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] that reflects the [loop] HTML attribute, which indicates whether the media element should start over when it reaches the end.",
        "event": false
      },
      "mediaKeys": {
        "type": "MediaKeys",
        "array": false,
        "dartType": "MediaKeys",
        "nullable": true,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [MediaKeys] object or [null]. MediaKeys is a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.",
        "event": false
      },
      "muted": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Boolean] that determines whether audio is muted. [true] if the audio is muted and [false] otherwise.",
        "event": false
      },
      "networkState": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [unsigned short] (enumeration) indicating the current state of fetching the media over the network.",
        "event": false
      },
      "paused": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] that indicates whether the media element is paused.",
        "event": false
      },
      "playbackRate": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [double] that indicates the rate at which the media is being played back.",
        "event": false
      },
      "played": {
        "type": "TimeRanges",
        "array": false,
        "dartType": "TimeRanges",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [TimeRanges] object that contains the ranges of the media source that the browser has played, if any.",
        "event": false
      },
      "preload": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [preload] HTML attribute, indicating what data should be preloaded, if any. Possible values are: [none], [metadata], [auto].",
        "event": false
      },
      "preservesPitch": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": false,
        "desc": "Is a [Boolean] that determines if the pitch of the sound will be preserved. If set to [false], the pitch will adjust to the speed of the audio. This is implemented with prefixes in Firefox ([mozPreservesPitch]) and WebKit ([webkitPreservesPitch]).",
        "event": false
      },
      "readyState": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [unsigned short] (enumeration) indicating the readiness state of the media.",
        "event": false
      },
      "seekable": {
        "type": "TimeRanges",
        "array": false,
        "dartType": "TimeRanges",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [TimeRanges] object that contains the time ranges that the user is able to seek to, if any.",
        "event": false
      },
      "seeking": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] that indicates whether the media is in the process of seeking to a new position.",
        "event": false
      },
      "sinkId": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] that is the unique ID of the audio device delivering output, or an empty string if it is using the user agent default. This ID should be one of the [MediaDeviceInfo.deviceid] values returned from [MediaDevices.enumerateDevices()], [id-multimedia], or [id-communications].",
        "event": false
      },
      "src": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [src] HTML attribute, which contains the URL of a media resource to use.",
        "event": false
      },
      "srcObject": {
        "type": "MediaProvider",
        "array": false,
        "dartType": "MediaProvider",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [MediaStream] representing the media to play or that has played in the current [HTMLMediaElement], or [null] if not assigned.",
        "event": false
      },
      "textTracks": {
        "type": "TextTrackList",
        "array": false,
        "dartType": "TextTrackList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the list of [TextTrack] objects contained in the element.",
        "event": false
      },
      "videoTracks": {
        "type": "VideoTrackList",
        "array": false,
        "dartType": "VideoTrackList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the list of [VideoTrack] objects contained in the element.",
        "event": false
      },
      "volume": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [double] indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).",
        "event": false
      },
      "onencrypted": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Sets the [EventHandler] called when the media is encrypted.",
        "event": true
      },
      "onwaitingforkey": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Sets the [EventHandler] called when playback is blocked while waiting for an encryption key.",
        "event": true
      }
    }
  },
  {
    "name": "HTMLMenuElement",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "HTMLMenuItemElement",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "HTMLMetaElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLMetaElement]* interface contains descriptive metadata about a document. It inherits all of the properties and methods described in the [HTMLElement] interface.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "HTMLMeterElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe HTML [<meter>] elements expose the [*HTMLMeterElement*] interface, which provides special properties and methods (beyond the [HTMLElement] object interface they also have available to them by inheritance) for manipulating the layout and presentation of [<meter>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "high": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [double] representing the value of the high boundary, reflecting the [high] attribute.",
        "event": false
      },
      "low": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [double] representing the value of the low boundary, reflecting the [low]attribute.",
        "event": false
      },
      "max": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [double] representing the maximum value, reflecting the [max] attribute.",
        "event": false
      },
      "min": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [double] representing the minimum value, reflecting the [min] attribute.",
        "event": false
      },
      "optimum": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [double] representing the optimum, reflecting the [optimum] attribute.",
        "event": false
      },
      "value": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [double] representing the currrent value, reflecting the [value] attribute.",
        "event": false
      },
      "labels": {
        "type": "NodeList",
        "array": false,
        "dartType": "NodeList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [NodeList] of [<label>] elements that are associated with the element.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLModElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLModElement]* interface provides special properties (beyond the regular methods and properties available through the [HTMLElement] interface they also have available to them by inheritance) for manipulating modification elements, that is [<del>] and [<ins>].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "cite": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] reflecting the [cite] HTML attribute, containing a URI of a resource explaining the change.",
        "event": false
      },
      "dateTime": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] reflecting the [datetime] HTML attribute, containing a date-and-time string representing a timestamp for the change.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLObjectElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n\nThe *[HTMLObjectElement]* interface provides special properties and methods (beyond those on the [HTMLElement] interface it also has available to it by inheritance) for manipulating the layout and presentation of [<object>] element, representing external resources.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "align": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are [\"left\"], [\"right\"], [\"justify\"], and [\"center\"].",
        "event": false
      },
      "archive": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [archive] HTML attribute, containing a list of archives for resources for this object.",
        "event": false
      },
      "border": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [border] HTML attribute, specifying the width of a border around the object.",
        "event": false
      },
      "code": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing the name of an applet class file, containing either the applet's subclass, or the path to get to the class, including the class file itself.",
        "event": false
      },
      "codeBase": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [codebase] HTML attribute, specifying the base path to use to resolve relative URIs.",
        "event": false
      },
      "codeType": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [codetype] HTML attribute, specifying the content type of the data.",
        "event": false
      },
      "contentDocument": {
        "type": "Document",
        "array": false,
        "dartType": "Document",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Document] representing the active document of the object element's nested browsing context, if any; otherwise [null].",
        "event": false
      },
      "contentWindow": {
        "type": "WindowProxy",
        "array": false,
        "dartType": "WindowProxy",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [WindowProxy] representing the window proxy of the object element's nested browsing context, if any; otherwise [null].",
        "event": false
      },
      "data": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] that reflects the [data] HTML attribute, specifying the address of a resource's data.",
        "event": false
      },
      "declare": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [Boolean] that reflects the [declare] HTML attribute, indicating that this is a declaration, not an instantiation, of the object.",
        "event": false
      },
      "form": {
        "type": "HTMLFormElement",
        "array": false,
        "dartType": "HTMLFormElement",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [HTMLFormElement] representing the object element's form owner, or null if there isn't one.",
        "event": false
      },
      "height": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] that reflects the [height] HTML attribute, specifying the displayed height of the resource in CSS pixels.",
        "event": false
      },
      "hspace": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [long] representing the horizontal space in pixels around the control.",
        "event": false
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] that reflects the [name] HTML attribute, specifying the name of the browsing context.",
        "event": false
      },
      "standby": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [standby] HTML attribute, specifying a message to display while the object loads.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [type] HTML attribute, specifying the MIME type of the resource.",
        "event": false
      },
      "useMap": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [usemap] HTML attribute, specifying a [<map>] element to use.",
        "event": false
      },
      "validationMessage": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation ([willValidate] is [false]), or it satisfies its constraints.",
        "event": false
      },
      "validity": {
        "type": "ValidityState",
        "array": false,
        "dartType": "ValidityState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [ValidityState] with the validity states that this element is in.",
        "event": false
      },
      "vspace": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [long] representing the horizontal space in pixels around the control.",
        "event": false
      },
      "width": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [width] HTML attribute, specifying the displayed width of the resource in CSS pixels.",
        "event": false
      },
      "willValidate": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] that indicates whether the element is a candidate for constraint validation. Always [false] for [HTMLObjectElement] objects.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLOListElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n\nThe *[HTMLOListElement]* interface provides special properties (beyond those defined on the regular [HTMLElement] interface it also has available to it by inheritance) for manipulating ordered list elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "reversed": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Boolean] value reflecting the [reversed] and defining if the numbering is descending, that is its value is [true], or ascending ([false]).",
        "event": false
      },
      "start": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [long] value reflecting the [start] and defining the value of the first number of the first element of the list.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] value reflecting the [type] and defining the kind of marker to be used to display. It can have the following values:\n \n  ['1'] meaning that decimal numbers are used: [1], [2], [3], [4], [5], …\n  ['a'] meaning that the lowercase latin alphabet is used:  [a], [b], [c], [d], [e], …\n  ['A'] meaning that the uppercase latin alphabet is used: [A], [B], [C], [D], [E], …\n  ['i'] meaning that the lowercase latin numerals are used: [i], [ii], [iii], [iv], [v], …\n  ['I'] meaning that the uppercase latin numerals are used: [I], [II], [III], [IV], [V], …\n \n ",
        "event": false
      },
      "compact": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [Boolean] indicating that spacing between list items should be reduced. This property reflects the [compact] attribute only, it doesn't consider the [line-height] CSS property used for that behavior in modern pages.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLOptGroupElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLOptGroupElement]* interface provides special properties and methods (beyond the regular [HTMLElement] object interface they also have available to them by inheritance) for manipulating the layout and presentation of [<optgroup>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "disabled": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [boolean] representing whether or not the whole list of children [<option>] is disabled (true) or not (false).",
        "event": false
      },
      "label": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the label for the group.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLOptionElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLOptionElement]* interface represents [<option>] elements and inherits all properties and methods of the [HTMLElement] interface.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "defaultSelected": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Has a value of either [true] or [false] that shows the initial value of the [selected] HTML attribute, indicating whether the option is selected by default or not.",
        "event": false
      },
      "disabled": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Has a value of either [true] or [false] representing the value of the [disabled] HTML attribute, which indicates that the option is unavailable to be selected. An option can also be disabled if it is a child of an [<optgroup>] element that is disabled.",
        "event": false
      },
      "form": {
        "type": "HTMLFormElement",
        "array": false,
        "dartType": "HTMLFormElement",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [HTMLFormElement] representing the same value as the [form] of the corresponding [<select>] element, if the option is a descendant of a [<select>] element, or null if none is found. ",
        "event": false
      },
      "index": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [long] representing the position of the option within the list of options it belongs to, in tree-order. If the option is not part of a list of options, like when it is part of the [<datalist>] element, the value is [0].",
        "event": false
      },
      "label": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the value of the [label] HTML attribute, which provides a label for the option. If this attribute isn't specifically set, reading it returns the element's text content.",
        "event": false
      },
      "selected": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Has a value of either [true] or [false] that indicates whether the option is currently selected.",
        "event": false
      },
      "text": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that contains the text content of the element.",
        "event": false
      },
      "value": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the value of the [value] HTML attribute, if it exists; otherwise reflects value of the [Node.textContent] property.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLOptionsCollection",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\nThe *[HTMLOptionsCollection]* interface represents a collection of [<option>] HTML elements (in document order) and offers methods and properties for selecting from the list as well as optionally altering its items. This object is returned only by the [options] property of select.\n\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "HTMLOutputElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLOutputElement]* interface provides properties and methods (beyond those inherited from [HTMLElement]) for manipulating the layout and presentation of [<output>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "defaultValue": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] representing the default value of the element, initially the empty string.",
        "event": false
      },
      "form": {
        "type": "HTMLFormElement",
        "array": false,
        "dartType": "HTMLFormElement",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [HTMLFormElement] indicating the form associated with the control, reflecting the [form] HTML attribute if it is defined.",
        "event": false
      },
      "htmlFor": {
        "type": "DOMTokenList",
        "array": false,
        "dartType": "DOMTokenList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMTokenList] reflecting the [for] HTML attribute, containing a list of IDs of other elements in the same document that contribute to (or otherwise affect) the calculated [value].",
        "event": false
      },
      "labels": {
        "type": "NodeList",
        "array": false,
        "dartType": "NodeList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [NodeList] of [<label>] elements associated with the element.",
        "event": false
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] reflecting the [name] HTML attribute, containing the name for the control that is submitted with form data.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [DOMString] \"[output]\".",
        "event": false
      },
      "validationMessage": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation ([willValidate] is [false]), or it satisfies its constraints.",
        "event": false
      },
      "validity": {
        "type": "ValidityState",
        "array": false,
        "dartType": "ValidityState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [ValidityState] representing the validity states that this element is in.",
        "event": false
      },
      "value": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] representing the value of the contents of the elements. Behaves like the [Node.textContent] property.",
        "event": false
      },
      "willValidate": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] indicating whether the element is a candidate for constraint validation.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLParagraphElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n\nThe *[HTMLParagraphElement]* interface provides special properties (beyond those of the regular [HTMLElement] object interface it inherits) for manipulating [<p>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "align": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "A [DOMString] representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are [\"left\"], [\"right\"], [\"justify\"], and [\"center\"].",
        "event": false
      }
    }
  },
  {
    "name": "HTMLParamElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n\nThe *[HTMLParamElement]* interface provides special properties (beyond those of the regular [HTMLElement] object interface it inherits) for manipulating [<param>] elements, representing a pair of a key and a value that acts as a parameter for an [<object>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the name of the parameter. It reflects the [name] attribute.",
        "event": false
      },
      "value": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the value associated to the parameter. It reflects the [value] attribute.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] containing the type of the parameter when [valueType] has the [\"ref\"] value. It reflects the [type] attribute.",
        "event": false
      },
      "valueType": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] containing the type of the [value]. It reflects the [[valuetype]] attribute and has one of the values: [\"data\"], [\"ref\"], or [\"object\"].",
        "event": false
      }
    }
  },
  {
    "name": "HTMLPictureElement",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [*HTMLPictureElement*] interface represents a [<picture>] HTML element. It doesn't implement specific properties or methods.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "HTMLPreElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n\nThe *[HTMLPreElement]* interface exposes specific properties and methods (beyond those of the [HTMLElement] interface it also has available to it by inheritance) for manipulating a block of preformatted text ([<pre>]).\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "width": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [long] value reflecting the obsolete [width] attribute, containing a fixed-size length for the [<pre>] element.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLProgressElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLProgressElement]* interface provides special properties and methods (beyond the regular [HTMLElement] interface it also has available to it by inheritance) for manipulating the layout and presentation of [<progress>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "max": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [double] value reflecting the content attribute of the same name, limited to numbers greater than zero. Its default value is [1.0].",
        "event": false
      },
      "position": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [double] value returning the result of dividing the current value ([value]) by the maximum value ([max]); if the progress bar is an indeterminate progress bar, it returns [-1].",
        "event": false
      },
      "value": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [double] value that reflects the current value; if the progress bar is an indeterminate progress bar, it returns [0].",
        "event": false
      },
      "labels": {
        "type": "NodeList",
        "array": false,
        "dartType": "NodeList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns [NodeList] containing the list of [<label>] elements that are labels for this element.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLQuoteElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLQuoteElement]* interface provides special properties and methods (beyond the regular [HTMLElement] interface it also has available to it by inheritance) for manipulating quoting elements, like [<blockquote>] and [<q>], but not the [<cite>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "cite": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] reflecting the [cite] HTML attribute, containing a URL for the source of the quotation.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLScriptElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nHTML [<script>] elements expose the *[HTMLScriptElement]* interface, which provides special properties and methods for manipulating the behavior and execution of [<script>] elements (beyond the inherited [HTMLElement] interface).\n\nJavaScript files should be served with the [application/javascript] MIME type, but browsers are lenient and block them only if the script is served with an image type ([image/*]), video type ([video/*]), audio type ([audio/*]), or [text/csv]. If the script is blocked, its element receives an [error] event; otherwise, it receives a [load] event.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the MIME type of the script. It reflects the [type] attribute.",
        "event": false
      },
      "src": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the URL of an external script. It reflects the [src] attribute.",
        "event": false
      },
      "event": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString]; an obsolete way of registering event handlers on elements in an HTML document.",
        "event": false
      },
      "charset": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing the character encoding of an external script. It reflects the [charset] attribute.",
        "event": false
      },
      "async": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [async] and [defer] attributes are [Boolean] attributes that control how the script should be executed. *The [defer] and [async] attributes must not be specified if the [src] attribute is absent.*\n\n  There are three possible execution modes:\n\n  \n   If the [async] attribute is present, then the script will be executed asynchronously as soon as it downloads.\n   If the [async] attribute is absent but the [defer] attribute is present, then the script is executed when the page has finished parsing.\n   If neither attribute is present, then the script is fetched and executed immediately, blocking further parsing of the page.\n  \n\n  The [defer] attribute may be specified with the [async] attribute, so legacy browsers that only support [defer] (and not [async]) fall back to the [defer] behavior instead of the default blocking behavior.\n\n  *Note:* The exact processing details for these attributes are complex, involving many different aspects of HTML, and therefore are scattered throughout the specification. These algorithms describe the core ideas, but they rely on the parsing rules for [<script>] start and end tags in HTML, in foreign content, and in XML; the rules for the [document.write()] method; the handling of scripting; and so on.",
        "event": false
      },
      "crossOrigin": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": false,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] reflecting the CORS setting for the script element. For scripts from other origins, this controls if error information will be exposed.",
        "event": false
      },
      "text": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that joins and returns the contents of all [Text] nodes inside the [<script>] element (ignoring other nodes like comments) in tree order. On setting, it acts the same way as the [textContent] IDL attribute.\n\n  *Note:* When inserted using the [document.write()] method, [<script>] elements execute (typically synchronously), but when inserted using [innerHTML] or [outerHTML], they do not execute at all.\n ",
        "event": false
      },
      "noModule": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Boolean] that if true, stops the script's execution in browsers that support ES2015 modules — used to run fallback scripts in older browsers that do not support JavaScript modules.",
        "event": false
      },
      "referrerPolicy": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [referrerpolicy] HTML attribute indicating which referrer to use when fetching the script, and fetches done by that script.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLSelectElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*HTMLSelectElement*] interface represents a [<select>] HTML Element. These elements also share all of the properties and methods of other HTML elements via the [HTMLElement] interface.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "disabled": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] reflecting the [disabled] HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks.",
        "event": false
      },
      "form": {
        "type": "HTMLFormElement",
        "array": false,
        "dartType": "HTMLFormElement",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [HTMLFormElement] referencing the form that this element is associated with. If the element is not associated with of a [<form>] element, then it returns [null].",
        "event": false
      },
      "labels": {
        "type": "NodeList",
        "array": false,
        "dartType": "NodeList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [NodeList] of [<label>] elements associated with the element.",
        "event": false
      },
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [unsigned long] The number of [<option>] elements in this [select] element.",
        "event": false
      },
      "multiple": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] reflecting the [multiple] HTML attribute, which indicates whether multiple items can be selected.",
        "event": false
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] reflecting the [name] HTML attribute, containing the name of this control used by servers and DOM search functions.",
        "event": false
      },
      "options": {
        "type": "HTMLOptionsCollection",
        "array": false,
        "dartType": "HTMLOptionsCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [HTMLOptionsCollection] representing the set of [<option>] ([HTMLOptionElement]) elements contained by this element.",
        "event": false
      },
      "required": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] reflecting the [required] HTML attribute, which indicates whether the user is required to select a value before submitting the form. ",
        "event": false
      },
      "selectedIndex": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [long] reflecting the index of the first selected [<option>] element. The value [-1] indicates no element is selected.",
        "event": false
      },
      "selectedOptions": {
        "type": "HTMLCollection",
        "array": false,
        "dartType": "HTMLCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [HTMLCollection] representing the set of [<option>] elements that are selected.",
        "event": false
      },
      "size": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [long] reflecting the [size] HTML attribute, which contains the number of visible items in the control. The default is 1, unless [multiple] is [true], in which case it is 4.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] represeting the form control's type. When [multiple] is [true], it returns [\"select-multiple\"]; otherwise, it returns [\"select-one\"].",
        "event": false
      },
      "validationMessage": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] representing a localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation ([willValidate] is false), or it satisfies its constraints.",
        "event": false
      },
      "validity": {
        "type": "ValidityState",
        "array": false,
        "dartType": "ValidityState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [ValidityState] reflecting the validity state that this control is in.",
        "event": false
      },
      "value": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] reflecting the value of the form control. Returns the [value] property of the first selected option element if there is one, otherwise the empty string.",
        "event": false
      },
      "willValidate": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] that indicates whether the button is a candidate for constraint validation. It is [false] if any conditions bar it from constraint validation.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLSlotElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLSlotElement]* interface of the Shadow DOM API enables access to the name and assigned nodes of an HTML [<slot>] element.",
    "abstract": true,
    "category": "interface",
    "props": {
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "[DOMString]: Can be used to get and set the slot's name.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLSourceElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLSourceElement]* interface provides special properties (beyond the regular [HTMLElement] object interface it also has available to it by inheritance) for manipulating [<source>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "media": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] reflecting the [media] HTML attribute, containing the intended type of the media resource.",
        "event": false
      },
      "sizes": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing image sizes between breakpoints",
        "event": false
      },
      "src": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] reflecting the [src] HTML attribute, containing the URL for the media resource. The [HTMLSourceElement.src] property has a meaning only when the associated [<source>] element is nested in a media element that is a [<video>] or an [<audio>] element. It has no meaning and is ignored when it is nested in a [<picture>] element.\n *Note*: If the [src] property is updated (along with any siblings), the parent [HTMLMediaElement]'s [load] method should be called when done, since [<source>] elements are not re-scanned automatically.\n ",
        "event": false
      },
      "srcset": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] reflecting the [srcset] HTML attribute, containing a list of candidate images, separated by a comma ([',', U+002C COMMA]). A candidate image is a URL followed by a ['w'] with the width of the images, or an ['x'] followed by the pixel density.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] reflecting the [type] HTML attribute, containing the type of the media resource.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLSpanElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLSpanElement]* interface represents a [<span>] element and derives from the [HTMLElement] interface, but without implementing any additional properties or methods.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "HTMLStyleElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n\nThe *[HTMLStyleElement]* interface represents a [<style>] element. It inherits properties and methods from its parent, [HTMLElement], and from [LinkStyle].\n\nThis interface doesn't allow to manipulate the CSS it contains (in most case). To manipulate CSS, see Using dynamic styling information for an overview of the objects used to manipulate specified CSS properties using the DOM.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "media": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the intended destination medium for style information.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing the type of style being applied by this statement.",
        "event": false
      },
      "disabled": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Boolean] value representing whether or not the stylesheet is disabled (true) or not (false).",
        "event": false
      }
    }
  },
  {
    "name": "HTMLTableCaptionElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n\nThe *[HTMLTableCaptionElement]* interface special properties (beyond the regular [HTMLElement] interface it also has available to it by inheritance) for manipulating table caption elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "align": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] which represents an enumerated attribute indicating alignment of the caption with respect to the table.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLTableCellElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n\nThe *[HTMLTableCellElement]* interface provides special properties and methods (beyond the regular [HTMLElement] interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "abbr": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] which can be used on [<th>] elements (not on [<td>]), specifying an alternative label for the header cell. This alternate label can be used in other contexts, such as when describing the headers that apply to a data cell. This is used to offer a shorter term for use by screen readers in particular, and is a valuable accessibility tool. Usually the value of [abbr] is an abbreviation or acronym, but can be any text that's appropriate contextually.",
        "event": false
      },
      "cellIndex": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A long integer representing the cell's position in the [cells] collection of the [<tr>] the cell is contained within. If the cell doesn't belong to a [<tr>], it returns [-1].",
        "event": false
      },
      "colSpan": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An unsigned long integer indicating the number of columns this cell must span; this lets the cell occupy space across multiple columns of the table. It reflects the [colspan] attribute.",
        "event": false
      },
      "headers": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMSettableTokenList] describing a list of [id] of [<th>] elements that represents headers associated with the cell. It reflects the [headers] attribute.",
        "event": false
      },
      "rowSpan": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An unsigned long integer indicating the number of rows this cell must span; this lets a cell occupy space across multiple rows of the table. It reflects the [rowspan] attribute.",
        "event": false
      },
      "scope": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] indicating the scope of a [<th>] cell. Header cells can be configured, using the [scope] property, the apply to a specified row or column, or to the not-yet-scoped cells within the current row group (that is, the same ancestor [<thead>], [<tbody>], or [<tfoot>] element). If no value is specified for [scope], the header is not associated directly with cells in this way. Permitted values for [scope] are:\n \n  [col]\n  The header cell applies to the following cells in the same column (or columns, if [colspan] is used as well), until either the end of the column or another [<th>] in the column establishes a new scope.\n  [colgroup]\n  The header cell applies to all cells in the current column group that do not already have a scope applied to them. This value is only allowed if the cell is in a column group.\n  [row]\n  The header cell applies to the following cells in the same row (or rows, if [rowspan] is used as well), until either the end of the row or another [<th>] in the same row establishes a new scope.\n  [rowgroup]\n  The header cell applies to all cells in the current row group that do not already have a scope applied to them. This value is only allowed if the cell is in a row group.\n  The empty string ([\"\"])\n  The header cell has no predefined scope; the user agent will establish the scope based on contextual clues.\n \n ",
        "event": false
      }
    }
  },
  {
    "name": "HTMLTableColElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLTableColElement]* interface provides special properties (beyond the [HTMLElement] interface it also has available to it inheritance) for manipulating single or grouped table column elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "align": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] that indicates the horizontal alignment of the cell data in the column.",
        "event": false
      },
      "ch": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing the alignment character for cell data.",
        "event": false
      },
      "chOff": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing the offset for the alignment character.",
        "event": false
      },
      "span": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [unsigned long] that reflects the [span] HTML attribute, indicating the number of columns to apply this object's attributes to. Must be a positive integer.",
        "event": false
      },
      "vAlign": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] that indicates the vertical alignment of the cell data in the column.",
        "event": false
      },
      "width": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing the default column width.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLTableElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLTableElement]* interface provides special properties and methods (beyond the regular [HTMLElement] object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "caption": {
        "type": "HTMLTableCaptionElement",
        "array": false,
        "dartType": "HTMLTableCaptionElement",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [HTMLTableCaptionElement] representing the first [<caption>] that is a child of the element, or [null] if none is found. When set, if the object doesn't represent a [<caption>], a [DOMException] with the [HierarchyRequestError] name is thrown. If a correct object is given, it is inserted in the tree as the first child of this element and the first [<caption>] that is a child of this element is removed from the tree, if any.",
        "event": false
      },
      "tHead": {
        "type": "HTMLTableSectionElement",
        "array": false,
        "dartType": "HTMLTableSectionElement",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [HTMLTableSectionElement] representing the first [<thead>] that is a child of the element, or [null] if none is found. When set, if the object doesn't represent a [<thead>], a [DOMException] with the [HierarchyRequestError] name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a [<caption>], nor a [<colgroup>], or as the last child if there is no such element, and the first [<thead>] that is a child of this element is removed from the tree, if any.",
        "event": false
      },
      "tFoot": {
        "type": "HTMLTableSectionElement",
        "array": false,
        "dartType": "HTMLTableSectionElement",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [HTMLTableSectionElement] representing the first [<tfoot>] that is a child of the element, or [null] if none is found. When set, if the object doesn't represent a [<tfoot>], a [DOMException] with the [HierarchyRequestError] name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a [<caption>], a [<colgroup>], nor a [<thead>], or as the last child if there is no such element, and the first [<tfoot>] that is a child of this element is removed from the tree, if any.",
        "event": false
      },
      "rows": {
        "type": "HTMLCollection",
        "array": false,
        "dartType": "HTMLCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a live [HTMLCollection] containing all the rows of the element, that is all [<tr>] that are a child of the element, or a child of one of its [<thead>], [<tbody>] and [<tfoot>] children. The rows members of a [<thead>] appear first, in tree order, and those members of a [<tbody>] last, also in tree order. The [HTMLCollection] is live and is automatically updated when the [HTMLTableElement] changes.",
        "event": false
      },
      "tBodies": {
        "type": "HTMLCollection",
        "array": false,
        "dartType": "HTMLCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a live [HTMLCollection] containing all the [<tbody>] of the element. The [HTMLCollection] is live and is automatically updated when the [HTMLTableElement] changes.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLTableRowElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLTableRowElement]* interface provides special properties and methods (beyond the [HTMLElement] interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "cells": {
        "type": "HTMLCollection",
        "array": false,
        "dartType": "HTMLCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a live [HTMLCollection] containing the cells in the row. The [HTMLCollection] is live and is automatically updated when cells are added or removed.",
        "event": false
      },
      "rowIndex": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [long] value which gives the logical position of the row within the entire table. If the row is not part of a table, returns [-1].",
        "event": false
      },
      "sectionRowIndex": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [long] value which gives the logical position of the row within the table section it belongs to. If the row is not part of a section, returns [-1].",
        "event": false
      }
    }
  },
  {
    "name": "HTMLTableSectionElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLTableSectionElement]* interface provides special properties and methods (beyond the [HTMLElement] interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "align": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] containing an enumerated value reflecting the [align] attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are [\"left\"], [\"right\"], and [\"center\"].",
        "event": false
      },
      "rows": {
        "type": "HTMLCollection",
        "array": false,
        "dartType": "HTMLCollection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a live [HTMLCollection] containing the rows in the section. The [HTMLCollection] is live and is automatically updated when rows are added or removed.",
        "event": false
      },
      "ch": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] containing one single chararcter. This character is the one to align all the cell of a column on. It reflects the [char] and default to the decimal points associated with the language, e.g. ['.'] for English, or [','] for French. This property was optional and was not very well supported.",
        "event": false
      },
      "chOff": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by [HTMLTableRowElement.ch]. This property was optional and was not very well supported.",
        "event": false
      },
      "vAlign": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the [valign] attribute and can have one of the following values: [\"top\"], [\"middle\"], [\"bottom\"], or [\"baseline\"].",
        "event": false
      }
    }
  },
  {
    "name": "HTMLTemplateElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*HTMLTemplateElement*] interface enables access to the contents of an HTML [<template>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "HTMLTextAreaElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLTextAreaElement]* interface provides special properties and methods for manipulating the layout and presentation of [<textarea>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "HTMLTimeElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLTimeElement]* interface provides special properties (beyond the regular [HTMLElement] interface it also has available to it by inheritance) for manipulating [<time>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "dateTime": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [datetime] HTML attribute, containing a machine-readable form of the element's date and time value.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLTitleElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLTitleElement]* interface contains the title for a document. This element inherits all of the properties and methods of the [HTMLElement] interface.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "text": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] representing the text of the document's title.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLTrackElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLTrackElement]* interface represents an HTML [<track>] element within the DOM. This element can be used as a child of either [<audio>] or [<video>] to specify a text track containing information such as closed captions or subtitles.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "kind": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [kind] HTML attribute, indicating how the text track is meant to be used. Possible values are: [subtitles], [captions], [descriptions], [chapters], or [metadata].",
        "event": false
      },
      "src": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [src] HTML attribute, indicating the address of the text track data.",
        "event": false
      },
      "srclang": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [srclang] HTML attribute, indicating the language of the text track data.",
        "event": false
      },
      "label": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [label] HTML attribute, indicating a user-readable title for the track.",
        "event": false
      },
      "default": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] reflecting the [default]  attribute, indicating that the track is to be enabled if the user's preferences do not indicate that another track would be more appropriate.",
        "event": false
      },
      "readyState": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns  an [unsigned short] that show the readiness state of the track:\n \n  \n   \n    Constant\n    Value\n    Description\n   \n   \n    [NONE]\n    0\n    Indicates that the text track's cues have not been obtained.\n   \n   \n    [LOADING]\n    1\n    Indicates that the text track is loading and there have been no fatal errors encountered so far. Further cues might still be added to the track by the parser.\n   \n   \n    [LOADED]\n    2\n    Indicates that the text track has been loaded with no fatal errors.\n   \n   \n    [ERROR]\n    3\n    Indicates that the text track was enabled, but when the user agent attempted to obtain it, this failed in some way. Some or all of the cues are likely missing and will not be obtained.\n   \n  \n \n ",
        "event": false
      },
      "track": {
        "type": "TextTrack",
        "array": false,
        "dartType": "TextTrack",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns [TextTrack] is the track element's text track data.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLUListElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n\nThe *[HTMLUListElement]* interface provides special properties (beyond those defined on the regular [HTMLElement] interface it also has available to it by inheritance) for manipulating unordered list elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [DOMString] value reflecting the [type] and defining the kind of marker to be used to display. The values are browser dependent and have never been standardized.",
        "event": false
      },
      "compact": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Is a [Boolean] indicating that spacing between list items should be reduced. This property reflects the [compact] attribute only, it doesn't consider the [line-height] CSS property used for that behavior in modern pages.",
        "event": false
      }
    }
  },
  {
    "name": "HTMLUnknownElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLUnknownElement]* interface represents an invalid HTML element and derives from the [HTMLElement] interface, but without implementing any additional properties or methods.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "HTMLVideoElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[HTMLVideoElement]* interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of [HTMLMediaElement] and [HTMLElement].\n\nThe list of supported media formats varies from one browser to the other. You should either provide your video in a single format that all the relevant browsers supports, or provide multiple video sources in enough different formats that all the browsers you need to support are covered.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "height": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [height] HTML attribute, which specifies the height of the display area, in CSS pixels.",
        "event": false
      },
      "poster": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [poster] HTML attribute, which specifies an image to show while no video data is available.",
        "event": false
      },
      "videoHeight": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an unsigned integer value indicating the intrinsic height of the resource in CSS pixels, or 0 if no media is available yet.",
        "event": false
      },
      "videoWidth": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an unsigned integer value indicating the intrinsic width of the resource in CSS pixels, or 0 if no media is available yet.",
        "event": false
      },
      "width": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [width] HTML attribute, which specifies the width of the display area, in CSS pixels.",
        "event": false
      },
      "autoPictureInPicture": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [autoPictureInPicture] attribute will automatically enter and leave the picture-in-picture mode for a video element when the user switches tab and/or applications",
        "event": false
      },
      "disablePictureInPicture": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [disablePictureInPicture] property will hint the user agent to not suggest the picture-in-picture to users or to request it automatically",
        "event": false
      }
    }
  },
  {
    "name": "IDBCursor",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n*Note:* Not to be confused with [IDBCursorWithValue] which is just an *[IDBCursor]* interface with an additional *[value]* property.\n\n\nThe *[IDBCursor]* interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.\n\nThe cursor has a source that indicates which index or object store it is iterating over. It has a position within the range, and moves in a direction that is increasing or decreasing in the order of record keys. The cursor enables an application to asynchronously process all the records in the cursor's range.\n\nYou can have an unlimited number of cursors at the same time. You always get the same [IDBCursor] object representing a given cursor. Operations are performed on the underlying index or object store.\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "source": {
        "type": "IDBIndex)",
        "array": false,
        "dartType": "IDBIndex)",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [IDBObjectStore] or [IDBIndex] that the cursor is iterating. This function never returns null or throws an exception, even if the cursor is currently being iterated, has iterated past its end, or its transaction is not active.",
        "event": false
      },
      "direction": {
        "type": "IDBCursorDirection",
        "array": false,
        "dartType": "IDBCursorDirection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the direction of traversal of the cursor. See Constants for possible values.",
        "event": false
      },
      "key": {
        "type": "any",
        "array": false,
        "dartType": "any",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the key for the record at the cursor's position. If the cursor is outside its range, this is set to [undefined]. The cursor's key can be any data type.",
        "event": false
      },
      "primaryKey": {
        "type": "any",
        "array": false,
        "dartType": "any",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the cursor's current effective primary key. If the cursor is currently being iterated or has iterated outside its range, this is set to [undefined]. The cursor's primary key can be any data type.",
        "event": false
      },
      "request": {
        "type": "IDBRequest",
        "array": false,
        "dartType": "IDBRequest",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [IDBRequest] that was used to obtain the cursor.",
        "event": false
      }
    }
  },
  {
    "name": "IDBCursorWithValue",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[IDBCursorWithValue]* interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database. It is the same as the [IDBCursor], except that it includes the [value] property.\n\nThe cursor has a source that indicates which index or object store it is iterating over. It has a position within the range, and moves in a direction that is increasing or decreasing in the order of record keys. The cursor enables an application to asynchronously process all the records in the cursor's range.\n\nYou can have an unlimited number of cursors at the same time. You always get the same [IDBCursorWithValue] object representing a given cursor. Operations are performed on the underlying index or object store.\n\n\n  *Note:* This feature is available in Web Workers\n\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "value": {
        "type": "any",
        "array": false,
        "dartType": "any",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the value of the current cursor.",
        "event": false
      }
    }
  },
  {
    "name": "IDBDatabase",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[IDBDatabase]* interface of the IndexedDB API provides a connection to a database; you can use an [IDBDatabase] object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.\n\n\n  *Note:* This feature is available in Web Workers\n\n\n\n*Note*: Everything you do in IndexedDB always happens in the context of a transaction, representing interactions with data in the database. All objects in IndexedDB — including object stores, indexes, and cursors — are tied to a particular transaction. Thus, you cannot execute commands, access data, or open anything outside of a transaction.\n\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] that contains the name of the connected database.",
        "event": false
      },
      "version": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A 64-bit integer that contains the version of the connected database. When a database is first created, this attribute is an empty string.",
        "event": false
      },
      "objectStoreNames": {
        "type": "DOMStringList",
        "array": false,
        "dartType": "DOMStringList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMStringList] that contains a list of the names of the object stores currently in the connected database.",
        "event": false
      }
    }
  },
  {
    "name": "IDBFactory",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\nThe *[IDBFactory]* interface of the IndexedDB API lets applications asynchronously access the indexed databases. The object that implements the interface is [window.indexedDB]. You open — that is, create and access — and delete a database with this object, and not directly with [IDBFactory].\n\n\n  *Note:* This feature is available in Web Workers\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "IDBIndex",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n[IDBIndex] interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.\n\nYou can retrieve records in an object store through the primary key or by using an index. An index lets you look up records in an object store using properties of the values in the object stores records other than the primary key\n\nThe index is a persistent key-value storage where the value part of its records is the key part of a record in the referenced object store. The records in an index are automatically populated whenever records in the referenced object store are inserted, updated, or deleted. Each record in an index can point to only one record in its referenced object store, but several indexes can reference the same object store. When the object store changes, all indexes that refers to the object store are automatically updated.\n\nYou can grab a set of keys within a range. To learn more, see [IDBKeyRange].\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The name of this index.",
        "event": false
      },
      "objectStore": {
        "type": "IDBObjectStore",
        "array": false,
        "dartType": "IDBObjectStore",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The name of the object store referenced by this index.",
        "event": false
      },
      "keyPath": {
        "type": "any",
        "array": false,
        "dartType": "any",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The key path of this index. If null, this index is not auto-populated.",
        "event": false
      },
      "multiEntry": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Affects how the index behaves when the result of evaluating the index's key path yields an array. If [true], there is one record in the index for each item in an array of keys. If [false], then there is one record for each key that is an array.",
        "event": false,
        "default": "false"
      },
      "unique": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "If [true], this index does not allow duplicate values for a key.",
        "event": false,
        "default": "false"
      }
    }
  },
  {
    "name": "IDBKeyRange",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\nThe *[IDBKeyRange]* interface of the IndexedDB API represents a continuous interval over some data type that is used for keys. Records can be retrieved from [IDBObjectStore] and [IDBIndex] objects using keys or a range of keys. You can limit the range using lower and upper bounds. For example, you can iterate over all values of a key in the value range A–Z.\n\n\nA key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs:\n\n\n \n  \n   Range\n   Code\n  \n  \n   All keys ≥ *x*\n   [IDBKeyRange.lowerBound][(*x*)]\n  \n  \n   All keys > *x*\n   [IDBKeyRange.lowerBound][(*x*, true) ]\n  \n  \n   All keys ≤* y*\n   [IDBKeyRange.upperBound][(*y*)]\n  \n  \n   All keys <* y*\n   [IDBKeyRange.upperBound][(*y*, true)]\n  \n  \n   All keys ≥ *x* && ≤ *y*\n   [IDBKeyRange.bound][(*x*, *y*)]\n  \n  \n   All keys > *x* &&< *y*\n   [IDBKeyRange.bound][(*x*, *y*, true, true)]\n  \n  \n   All keys > *x* && ≤ *y*\n   [IDBKeyRange.bound][(*x*, *y*, true, false)]\n  \n  \n   All keys ≥ *x* &&< *y*\n   [IDBKeyRange.bound][(*x*, *y*, false, true)]\n  \n  \n   The key = *z*\n   [IDBKeyRange.only][(*z*)]\n  \n \n\n\nA key is in a key range if the following conditions are true:\n\n\n The lower value of the key range is one of the following:\n  \n   [undefined]\n   Less than key value\n   Equal to key value if [lowerOpen] is [false].\n  \n \n The upper value of the key range is one of the following:\n  \n   [undefined]\n   Greater than key value\n   Equal to key value if [upperOpen] is [false].\n  \n \n\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "lower": {
        "type": "any",
        "array": false,
        "dartType": "any",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Lower bound of the key range.",
        "event": false
      },
      "upper": {
        "type": "any",
        "array": false,
        "dartType": "any",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Upper bound of the key range.",
        "event": false
      },
      "lowerOpen": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns false if the lower-bound value is included in the key range.",
        "event": false
      },
      "upperOpen": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns false if the upper-bound value is included in the key range.",
        "event": false
      }
    }
  },
  {
    "name": "IDBObjectStore",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\nThe *[IDBObjectStore]* interface of the IndexedDB API represents an object store in a database. Records within an object store are sorted according to their keys. This sorting enables fast insertion, look-up, and ordered retrieval.\n\n\n  *Note:* This feature is available in Web Workers\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "indexNames": {
        "type": "DOMStringList",
        "array": false,
        "dartType": "DOMStringList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A list of the names of indexes on objects in this object store.",
        "event": false
      },
      "keyPath": {
        "type": "DOMString>",
        "array": true,
        "dartType": "DOMString>",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The key path of this object store. If this attribute is [null], the application must provide a key for each modification operation.",
        "event": false,
        "default": "null"
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The name of this object store.",
        "event": false
      },
      "transaction": {
        "type": "IDBTransaction",
        "array": false,
        "dartType": "IDBTransaction",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [IDBTransaction] object to which this object store belongs.",
        "event": false
      },
      "autoIncrement": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The value of the auto increment flag for this object store.",
        "event": false,
        "default": "false"
      }
    }
  },
  {
    "name": "IDBOpenDBRequest",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\nThe *[IDBOpenDBRequest]* interface of the IndexedDB API provides access to the results of requests to open or delete databases (performed using [IDBFactory.open] and [IDBFactory.deleteDatabase]), using specific event handler attributes.\n\n\n\n  *Note:* This feature is available in Web Workers\n\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "IDBRequest",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\nThe *[IDBRequest]* interface of the IndexedDB API provides access to results of asynchronous requests to databases and database objects using event handler attributes. Each reading and writing operation on a database is done using a request.\n\n\nThe request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the [IDBRequest] instance.\n\nAll asynchronous operations immediately return an [IDBRequest] instance. Each request has a [readyState] that is set to the ['pending'] state; this changes to ['done'] when the request is completed or fails. When the state is set to [done], every request returns a [result] and an [error], and an event is fired on the request. When the state is still [pending], any attempt to access the [result] or [error] raises an [InvalidStateError] exception.\n\nIn plain words, all asynchronous methods return a request object. If the request has been completed successfully, the result is made available through the [result] property and an event indicating success is fired at the request ([IDBRequest.onsuccess]). If an error occurs while performing the operation, the exception is made available through the [result] property and an error event is fired ([IDBRequest.onerror]).\n\nThe interface [IDBOpenDBRequest] is derived from [IDBRequest].\n\n\n  *Note:* This feature is available in Web Workers\n\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "error": {
        "type": "DOMException",
        "array": false,
        "dartType": "DOMException",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMException] in the event of an unsuccessful request, indicating what went wrong.",
        "event": false
      },
      "result": {
        "type": "any",
        "array": false,
        "dartType": "any",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the result of the request. If the request failed and the result is not available, an InvalidStateError exception is thrown.\n ",
        "event": false
      },
      "source": {
        "type": "IDBCursor)",
        "array": false,
        "dartType": "IDBCursor)",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The source of the request, such as an [IDBIndex] or an [IDBObjectStore]. If no source exists (such as when calling [IDBFactory.open]), it returns null.",
        "event": false
      },
      "readyState": {
        "type": "IDBRequestReadyState",
        "array": false,
        "dartType": "IDBRequestReadyState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The state of the request. Every request starts in the [pending] state. The state changes to [done] when the request completes successfully or when an error occurs.",
        "event": false
      },
      "transaction": {
        "type": "IDBTransaction",
        "array": false,
        "dartType": "IDBTransaction",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The transaction for the request. This property can be null for certain requests, for example those returned from [IDBFactory.open] unless an upgrade is needed. (You're just connecting to a database, so there is no transaction to return).",
        "event": false
      }
    }
  },
  {
    "name": "IDBTransaction",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[IDBTransaction]* interface of the IndexedDB API provides a static, asynchronous transaction on a database using event handler attributes. All reading and writing of data is done within transactions. You use [IDBDatabase] to start transactions, [IDBTransaction] to set the mode of the transaction (e.g. is it [readonly] or [readwrite]), and you access an [IDBObjectStore] to make a request. You can also use an [IDBTransaction] object to abort transactions.\n\n\n  *Note:* This feature is available in Web Workers\n\n\n\n\n\n\nTransactions are started when the transaction is created, not when the first request is placed; for example consider this:\n\n[var trans1 = db.transaction(\"foo\", \"readwrite\");\nvar trans2 = db.transaction(\"foo\", \"readwrite\");\nvar objectStore2 = trans2.objectStore(\"foo\")\nvar objectStore1 = trans1.objectStore(\"foo\")\nobjectStore2.put(\"2\", \"key\");\nobjectStore1.put(\"1\", \"key\");\n]\n\nAfter the code is executed the object store should contain the value \"2\", since [trans2] should run after [trans1].",
    "abstract": true,
    "category": "interface",
    "props": {
      "db": {
        "type": "IDBDatabase",
        "array": false,
        "dartType": "IDBDatabase",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The database connection with which this transaction is associated.",
        "event": false
      },
      "durability": {
        "type": "IDBTransactionDurability",
        "array": false,
        "dartType": "IDBTransactionDurability",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the durability hint the transaction was created with.",
        "event": false,
        "default": "\"default\""
      },
      "error": {
        "type": "DOMException",
        "array": false,
        "dartType": "DOMException",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMException] indicating the type of error that occurred when there is an unsuccessful transaction. This property is [null] if the transaction is not finished, is finished and successfully committed, or was aborted with the[IDBTransaction.abort()] function.",
        "event": false
      },
      "mode": {
        "type": "IDBTransactionMode",
        "array": false,
        "dartType": "IDBTransactionMode",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The mode for isolating access to data in the object stores that are in the scope of the transaction. The default value is [readonly].",
        "event": false
      },
      "objectStoreNames": {
        "type": "DOMStringList",
        "array": false,
        "dartType": "DOMStringList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMStringList] of the names of [IDBObjectStore] objects associated with the transaction.",
        "event": false
      }
    }
  },
  {
    "name": "IDBVersionChangeEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[IDBVersionChangeEvent]* interface of the IndexedDB API indicates that the version of the database has changed, as the result of an [IDBOpenDBRequest.onupgradeneeded] event handler function.\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "oldVersion": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the old version of the database.",
        "event": false
      },
      "newVersion": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the new version of the database.",
        "event": false
      }
    }
  },
  {
    "name": "IdleDeadline",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\nThe [IdleDeadline] interface is used as the data type of the input parameter to idle callbacks established by calling [Window.requestIdleCallback()]. It offers a method, [timeRemaining()], which lets you determine how much longer the user agent estimates it will remain idle and a property, [didTimeout], which lets you determine if your callback is executing because its timeout duration expired.\n\nTo learn more about how request callbacks work, see Collaborative Scheduling of Background Tasks.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "didTimeout": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A Boolean whose value is [true] if the callback is being executed because the timeout specified when the idle callback was installed has expired.",
        "event": false
      }
    }
  },
  {
    "name": "IIRFilterNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[IIRFilterNode]* interface of the Web Audio API is a [AudioNode] processor which implements a general *infinite impulse response* (IIR)  filter; this type of filter can be used to implement tone control devices and graphic equalizers as well. It lets the parameters of the filter response be specified, so that it can be tuned as needed.\n\n\n \n  \n   Number of inputs\n   [1]\n  \n  \n   Number of outputs\n   [1]\n  \n  \n   Channel count mode\n   [\"max\"]\n  \n  \n   Channel count\n   Same as on the input\n  \n  \n   Channel interpretation\n   [\"speakers\"]\n  \n \n\n\nTypically, it's best to use the [BiquadFilterNode] interface to implement higher-order filters. There are several reasons why:\n\n\n Biquad filters are typically less sensitive to numeric quirks.\n The filter parameters of biquad filters can be automated.\n All even-ordered IIR filters can be created using [BiquadFilterNode].\n\n\nHowever, if you need to create an odd-ordered IIR filter, you'll need to use [IIRFilterNode]. You may also find this interface useful if you don't need automation, or for other reasons.\n\n\nOnce the node has been created, you can't change its coefficients.\n\n\n[IIRFilterNode]s have a tail-time reference; they continue to output non-silent audio with zero input. As an IIR filter, the non-zero input continues forever, but this can be limited after some finite time in practice, when the output has approached zero closely enough. The actual time that takes depends on the filter coefficients provided.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "ImageBitmap",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*ImageBitmap*] interface represents a bitmap image which can be drawn to a [<canvas>] without undue latency. It can be created from a variety of source objects using the [createImageBitmap()] factory method. [ImageBitmap] provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.",
    "abstract": true,
    "category": "interface",
    "props": {
      "height": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [unsigned] [long] representing the height, in CSS pixels, of the [ImageData].",
        "event": false
      },
      "width": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [unsigned] [long] representing the width, in CSS pixels, of the [ImageData].",
        "event": false
      }
    }
  },
  {
    "name": "ImageBitmapRenderingContext",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": " \n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[ImageBitmapRenderingContext]* interface is a canvas rendering context that provides the functionality to replace the canvas's contents with the given [ImageBitmap]. Its context id (the first argument to [HTMLCanvasElement.getContext()] or [OffscreenCanvas.getContext()]) is [\"bitmaprenderer\"].\n\nThis interface is available in both the window and the worker context.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "ImageCapture",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ImageCapture]* interface of the MediaStream Image Capture API provides methods to enable the capture of images or photos from a camera or other photographic device. It provides an interface for capturing images from a photographic device referenced through a valid [MediaStreamTrack].",
    "abstract": false,
    "category": "interface",
    "props": {
      "track": {
        "type": "MediaStreamTrack",
        "array": false,
        "dartType": "MediaStreamTrack",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the [MediaStreamTrack] passed to the constructor.",
        "event": false
      }
    }
  },
  {
    "name": "ImageData",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*ImageData*] interface represents the underlying pixel data of an area of a [<canvas>] element. It is created using the [ImageData()] constructor or creator methods on the [CanvasRenderingContext2D] object associated with a canvas: [createImageData()] and [getImageData()]. It can also be used to set a part of the canvas by using [putImageData()].\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "data": {
        "type": "Uint8ClampedArray",
        "array": false,
        "dartType": "Uint8ClampedArray",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Uint8ClampedArray] representing a one-dimensional array containing the data in the RGBA order, with integer values between [0] and [255] (inclusive).",
        "event": false
      },
      "height": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [unsigned long] representing the actual height, in pixels, of the [ImageData].",
        "event": false
      },
      "width": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [unsigned long] representing the actual width, in pixels, of the [ImageData].",
        "event": false
      }
    }
  },
  {
    "name": "InputDeviceCapabilities",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[InputDeviceCapabilities]* interface of the Input Device Capabilities API provides information about the physical device or a group of related devices responsible for generating input events. Events caused by the same physical input device get the same instance of this object, but the converse isn't true. For example, two mice with the same capabilities in a system may appear as a single [InputDeviceCapabilities] instance.\n\nIn some instances, [InputDeviceCapabilities] represents the capabilities of logical devices rather than physical devices. This allows, for example, touchscreen keyboards and physical keyboards to be represented the same way when they produce the same input.",
    "abstract": true,
    "category": "interface",
    "props": {
      "firesTouchEvents": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] that indicates whether the device dispatches touch events.",
        "event": false
      }
    }
  },
  {
    "name": "InputDeviceInfo",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "The *[InputDeviceInfo]* interface of the Media Streams API gives access to the capabilities of the input device that it represents.\n\n[InputDeviceInfo] objects are returned by [MediaDevices.enumerateDevices()] if the returned device is an audio or video input device.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "InputEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[InputEvent]* interface represents an event notifying the user of editable content changes.\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "data": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] with the inserted characters. This may be an empty string if the change doesn't insert text (such as when deleting characters, for example).",
        "event": false
      },
      "dataTransfer": {
        "type": "DataTransfer",
        "array": false,
        "dartType": "DataTransfer",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DataTransfer] object containing information about richtext or plaintext data being added to or removed from editable content.",
        "event": false
      },
      "inputType": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the type of change for editable content such as, for example, inserting, deleting, or formatting text. See the property page for a complete list of input types.",
        "event": false
      },
      "isComposing": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] value indicating if the event is fired after [compositionstart] and before [compositionend].",
        "event": false
      }
    }
  },
  {
    "name": "IntersectionObserver",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*IntersectionObserver*] interface of the Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport. The ancestor element or viewport is referred to as the root.\n\nWhen an [IntersectionObserver] is created, it's configured to watch for given ratios of visibility within the root. The configuration cannot be changed once the [IntersectionObserver] is created, so a given observer object is only useful for watching for specific changes in degree of visibility; however, you can watch multiple target elements with the same observer.",
    "abstract": false,
    "category": "interface",
    "props": {
      "root": {
        "type": "Document)",
        "array": false,
        "dartType": "Document)",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [Element] or [Document] whose bounds are used as the bounding box when testing for intersection. If no [root] value was passed to the constructor or its value is [null], the top-level document's viewport is used.",
        "event": false
      },
      "rootMargin": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An offset rectangle applied to the root's bounding box when calculating intersections, effectively shrinking or growing the root for calculation purposes. The value returned by this property may not be the same as the one specified when calling the constructor as it may be changed to match internal requirements. Each offset can be expressed in pixels ([px]) or as a percentage ([%]). The default is \"0px 0px 0px 0px\".",
        "event": false
      },
      "thresholds": {
        "type": "FrozenArray<double>",
        "array": false,
        "dartType": "FrozenArray<double>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A list of thresholds, sorted in increasing numeric order, where each threshold is a ratio of intersection area to bounding box area of an observed target. Notifications for a target are generated when any of the thresholds are crossed for that target. If no value was passed to the constructor, 0 is used.",
        "event": false
      }
    }
  },
  {
    "name": "IntersectionObserverEntry",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*IntersectionObserverEntry*] interface of the Intersection Observer API describes the intersection between the target element and its root container at a specific moment of transition. Instances of [IntersectionObserverEntry] are delivered to an [IntersectionObserver] callback in its [entries] parameter; otherwise, these objects can only be obtained by calling [IntersectionObserver.takeRecords()].",
    "abstract": true,
    "category": "interface",
    "props": {
      "boundingClientRect": {
        "type": "DOMRectReadOnly",
        "array": false,
        "dartType": "DOMRectReadOnly",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the bounds rectangle of the target element as a [DOMRectReadOnly]. The bounds are computed as described in the documentation for [Element.getBoundingClientRect()].",
        "event": false
      },
      "intersectionRatio": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the ratio of the [intersectionRect] to the [boundingClientRect].",
        "event": false
      },
      "intersectionRect": {
        "type": "DOMRectReadOnly",
        "array": false,
        "dartType": "DOMRectReadOnly",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMRectReadOnly] representing the target's visible area.",
        "event": false
      },
      "isIntersecting": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A Boolean value which is [true] if the target element intersects with the intersection observer's root. If this is [true], then, the [IntersectionObserverEntry] describes a transition into a state of intersection; if it's [false], then you know the transition is from intersecting to not-intersecting.",
        "event": false
      },
      "rootBounds": {
        "type": "DOMRectReadOnly",
        "array": false,
        "dartType": "DOMRectReadOnly",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMRectReadOnly] for the intersection observer's root.",
        "event": false
      },
      "target": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [Element] whose intersection with the root changed.",
        "event": false
      },
      "time": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] indicating the time at which the intersection was recorded, relative to the [IntersectionObserver]'s time origin.",
        "event": false
      }
    }
  },
  {
    "name": "InterventionReportBody",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [InterventionReportBody] interface of the Reporting API represents the body of an intervention report (the return value of its [Report.body] property).\n\nAn intervention report is generated when usage of a feature in a web document has been blocked by the browser for reasons such as security, performance, or user annoyance. So for example, a script was been stopped because it was significantly slowing down the browser, or the browser's autoplay policy blocked audio from playing without a user gesture to trigger it.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Keyboard",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[Keyboard]* interface of the Keyboard API provides functions that retrieve keyboard layout maps and toggle capturing of key presses from the physical keyboard.\n\nA list of valid code values is found in the UI Events KeyboardEvent code Values spec.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "KeyboardEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n*[KeyboardEvent]* objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard. The event type ([keydown], [keypress], or [keyup]) identifies what kind of keyboard activity occurred.\n\n*Note:* [KeyboardEvent] events just indicate what interaction the user had with a key on the keyboard at a low level, providing no contextual meaning to that interaction. When you need to handle text input, use the [input] event instead. Keyboard events may not be fired if the user is using an alternate means of entering text, such as a handwriting system on a tablet or graphics tablet.\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "altKey": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] that is [true] if the Alt ( Option or ⌥ on OS X) key was active when the key event was generated.",
        "event": false
      },
      "code": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] with the code value of the physical key represented by the event.\n *Warning:* This ignores the user's keyboard layout, so that if the user presses the key at the \"Y\" position in a QWERTY keyboard layout (near the middle of the row above the home row), this will always return \"KeyY\", even if the user has a QWERTZ keyboard (which would mean the user expects a \"Z\" and all the other properties would indicate a \"Z\") or a Dvorak keyboard layout (where the user would expect an \"F\").\n ",
        "event": false
      },
      "ctrlKey": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] that is [true] if the Ctrl key was active when the key event was generated.",
        "event": false
      },
      "isComposing": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] that is [true] if the event is fired between after [compositionstart] and before [compositionend].",
        "event": false
      },
      "key": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] representing the key value of the key represented by the event.",
        "event": false
      },
      "location": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Number] representing the location of the key on the keyboard or other input device. A list of the constants identifying the locations is shown above in Keyboard locations.",
        "event": false
      },
      "metaKey": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] that is [true] if the Meta key (on Mac keyboards, the ⌘ Command key; on Windows keyboards, the Windows key (⊞)) was active when the key event was generated.",
        "event": false
      },
      "repeat": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] that is [true] if the key is being held down such that it is automatically repeating.",
        "event": false
      },
      "shiftKey": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] that is [true] if the Shift key was active when the key event was generated.",
        "event": false
      }
    }
  },
  {
    "name": "KeyboardLayoutMap",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[KeyboardLayoutMap]* interface of the Keyboard API is a map-like object with functions for retrieving the string associated with specific physical keys. A list of valid keys is found in the UI Events KeyboardEvent code Values specification.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "KeyframeEffect",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[KeyframeEffect]* interface of the Web Animations API lets us create sets of animatable properties and values, called *keyframes.* These can then be played using the [Animation()] constructor.",
    "abstract": false,
    "category": "interface",
    "props": {
      "target": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets and sets the element, or originating element of the pseudo-element, being animated by this object. This may be [null] for animations that do not target a specific element or pseudo-element.",
        "event": false
      },
      "pseudoElement": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": false,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Gets and sets the selector of the pseudo-element being animated by this object. This may be [null] for animations that do not target a pseudo-element.",
        "event": false
      },
      "iterationComposite": {
        "type": "IterationCompositeOperation",
        "array": false,
        "dartType": "IterationCompositeOperation",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets and sets the iteration composite operation for resolving the property value changes of this keyframe effect.",
        "event": false
      },
      "composite": {
        "type": "CompositeOperation",
        "array": false,
        "dartType": "CompositeOperation",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets and sets the composite operation property for resolving the property value changes between this and other keyframe effects.",
        "event": false
      }
    }
  },
  {
    "name": "LargestContentfulPaint",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [LargestContentfulPaint] interface of the Largest Contentful Paint API provides details about the largest image or text paint before user input on a web page. The timing of this paint is a good heuristic for when the main page content is available during load.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "LayoutShift",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "The [LayoutShift] interface of the Layout Instability API provides insights into the stability of web pages based on movements of the elements on the page.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "LayoutShiftAttribution",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "The [LayoutShiftAttribution] interface of the Layout Instability API provides debugging information about elements which have shifted.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "LinearAccelerationSensor",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[LinearAccelerationSensor]* interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes, but without the contribution of gravity. \n\nTo use this sensor, the user must grant permission to the ['accelerometer'] device sensor through the [Permissions] API.\n\nIf a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. See [Feature-Policy] for implementation instructions.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "LinkStyle",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*LinkStyle*] interface provides access to the associated CSS style sheet of a node.\n\n[LinkStyle] is a raw interface and no object of this type can be created; it is implemented by [HTMLLinkElement] and [HTMLStyleElement] objects.",
    "abstract": true,
    "category": "interface",
    "props": {
      "sheet": {
        "type": "StyleSheet",
        "array": false,
        "dartType": "StyleSheet",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [CSSStyleSheet] object associated with the given element, or [null] if there is none.",
        "event": false
      }
    }
  },
  {
    "name": "Location",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Location]* interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the [Document] and [Window] interface have such a linked [Location], accessible via [Document.location] and [Window.location] respectively.",
    "abstract": true,
    "category": "interface",
    "props": {
      "ancestorOrigins": {
        "type": "DOMStringList",
        "array": false,
        "dartType": "DOMStringList",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a static [DOMStringList] containing, in reverse order, the origins of all ancestor browsing contexts of the document associated with the given [Location] object.",
        "event": false
      },
      "href": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a stringifier that returns a [USVString] containing the entire URL. If changed, the associated document navigates to the new page. It can be set from a different origin than the associated document.",
        "event": false
      },
      "protocol": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing the protocol scheme of the URL, including the final [':'].",
        "event": false
      },
      "host": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing the host, that is the hostname, a [':'], and the port of the URL.",
        "event": false
      },
      "hostname": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing the domain of the URL.",
        "event": false
      },
      "port": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing the port number of the URL.",
        "event": false
      },
      "pathname": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing an initial ['/'] followed by the path of the URL, not including the query string or fragment.",
        "event": false
      },
      "search": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing a ['?'] followed by the parameters or \"querystring\" of the URL. Modern browsers provide URLSearchParams and URL.searchParams to make it easy to parse out the parameters from the querystring.",
        "event": false
      },
      "hash": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [USVString] containing a ['#'] followed by the fragment identifier of the URL.",
        "event": false
      },
      "origin": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [USVString] containing the canonical form of the origin of the specific location.",
        "event": false
      }
    }
  },
  {
    "name": "Lock",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[Lock]* interface of the Web Locks API provides the name and mode of a previously requested lock, which is received in the callback to [LockManager.request()].",
    "abstract": true,
    "category": "interface",
    "props": {
      "mode": {
        "type": "LockMode",
        "array": false,
        "dartType": "LockMode",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the access mode passed to [LockManager.request()] when the lock was requested. The mode is either [\"exclusive\"] (the default) or [\"shared\"].",
        "event": false,
        "default": "\"exclusive\""
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the name passed to [LockManager.request()] when the lock was requested.",
        "event": false
      }
    }
  },
  {
    "name": "LockManager",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[LockManager]* interface of the Web Locks API provides methods for requesting a new [Lock] object and querying for an existing [Lock] object. To get an instance of [LockManager], call [navigator.locks].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Magnetometer",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Magnetometer]* interface of the Sensor APIs provides information about the magnetic field as detected by the device’s primary magnetometer sensor. \n\nTo use this sensor, the user must grant permission to the ['magnetometer'] device sensor through the [Permissions] API.\n\nIf a feature policy blocks use of a feature, it's because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. See [Feature-Policy] for implementation instructions.",
    "abstract": false,
    "category": "interface",
    "props": {
      "x": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a double containing the magnetic field around the device's x axis.",
        "event": false
      },
      "y": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a double containing the magnetic field around the device's y axis.",
        "event": false
      },
      "z": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a double containing the magnetic field around the device's z axis.",
        "event": false
      }
    }
  },
  {
    "name": "MediaCapabilities",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*MediaCapabilities*] interface of the Media Capabilities API provides information about the decoding abilities of the device, system and browser. The API can be used to query the browser about the decoding abilities of the device based on codecs, profile, resolution, and bitrates. The information can be used to serve optimal media streams to the user and determine if playback should be smooth and power efficient.\n\nThe information is accessed through the [*mediaCapabilities*] property of the [Navigator] interface.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaCapabilitiesInfo",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*MediaCapabilitiesInfo*] interface of the Media Capabilities API is made available when the promise returned by the [MediaCapabilities.encodingInfo()] or [MediaCapabilities.decodingInfo()] methods of the [MediaCapabilities] interface fulfills, providing information as to whether the media type is supported, and whether encoding or decoding such media would be smooth and power efficient.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaConfiguration",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[MediaConfiguration]* [MediaCapabilities] dictionary of the Media Capabilities API describes how media and audio files must be configured, or defined, to be passed as a parameter of the [MediaCapabilities.encodingInfo()] and [MediaCapabilities.encodingInfo()] methods.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaDecodingConfiguration",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "The *[MediaDecodingConfiguration]* dictionary of the Media Capabilities API is used to define the type of media being tested when calling [MediaCapabilities.decodingInfo()] to query whether a specific media configuration is supported, smooth, and/or power efficient.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaDeviceInfo",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[MediaDeviceInfo]* interface contains information that describes a single media input or output device. The list of devices obtained by calling [navigator.mediaDevices.enumerateDevices()] is an array of [MediaDeviceInfo] objects, one per media device.",
    "abstract": true,
    "category": "interface",
    "props": {
      "deviceId": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] that is an identifier for the represented device that is persisted across sessions. It is un-guessable by other applications and unique to the origin of the calling application. It is reset when the user clears cookies (for Private Browsing, a different identifier is used that is not persisted across sessions).",
        "event": false
      },
      "groupId": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] that is a group identifier. Two devices have the same group identifier if they belong to the same physical device — for example a monitor with both a built-in camera and a microphone.",
        "event": false
      },
      "kind": {
        "type": "MediaDeviceKind",
        "array": false,
        "dartType": "MediaDeviceKind",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an enumerated value that is either [\"videoinput\"], [\"audioinput\"] or [\"audiooutput\"].",
        "event": false
      },
      "label": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] that is a label describing this device (for example \"External USB Webcam\").",
        "event": false
      }
    }
  },
  {
    "name": "MediaDevices",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[MediaDevices]* interface provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaElementAudioSourceNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\nThe [MediaElementAudioSourceNode] interface represents an audio source consisting of an HTML5 [<audio>] or [<video>] element. It is an [AudioNode] that acts as an audio source.\n\n\nA [MediaElementSourceNode] has no inputs and exactly one output, and is created using the [AudioContext.createMediaElementSource()] method. The amount of channels in the output equals the number of channels of the audio referenced by the [HTMLMediaElement] used in the creation of the node, or is 1 if the [HTMLMediaElement] has no audio.\n\n\n \n  \n   Number of inputs\n   [0]\n  \n  \n   Number of outputs\n   [1]\n  \n  \n   Channel count\n   defined by the media in the [HTMLMediaElement] passed to the [AudioContext.createMediaElementSource] method that created it.\n  \n \n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaEncodingConfiguration",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "The *[MediaEncodingConfiguration]* dictionary of the Media Capabilities API is used to define the type of media being tested when calling [MediaCapabilities.encodingInfo()] to query whether a specific media configuration is supported, smooth, and/or power efficient.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaError",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*MediaError*] interface represents an error which occurred while handling media in an HTML media element based on [HTMLMediaElement], such as [<audio>] or [<video>].\n\nA [MediaError] object describes the error in general terms using a numeric [code] categorizing the kind of error, and a [message], which provides specific diagnostics about what went wrong.",
    "abstract": true,
    "category": "interface",
    "props": {
      "code": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A number which represents the general type of error that occurred, as follows: \n  \n    \n      Name\n      Value\n      Description\n    \n  \n  \n    \n      [MEDIA_ERR_ABORTED]\n      [1]\n      The fetching of the associated resource was aborted by the user's request.\n    \n    \n      [MEDIA_ERR_NETWORK]\n      [2]\n      Some kind of network error occurred which prevented the media from being\n        successfully fetched, despite having previously been available.\n    \n    \n      [MEDIA_ERR_DECODE]\n      [3]\n      Despite having previously been determined to be usable, an error occurred while\n        trying to decode the media resource, resulting in an error.\n    \n    \n      [MEDIA_ERR_SRC_NOT_SUPPORTED]\n      [4]\n      The associated resource or media provider object (such as a\n        [MediaStream]) has been found to be unsuitable.\n    \n  \n",
        "event": false
      },
      "message": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] object containing a human-readable string which provides specific diagnostic information to help the reader understand the error condition which occurred; specifically, it isn't a summary of what the error code means, but actual diagnostic information to help in understanding what exactly went wrong. This text and its format is not defined by the specification and will vary from one user agent to another. If no diagnostics are available, or no explanation can be provided, this value is an empty string ([\"\"]).",
        "event": false
      }
    }
  },
  {
    "name": "MediaImage",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe Media Session API's [*MediaImage*] dictionary describes the images associated with a media resource's [MediaMetadata]. Its contents can be displayed by the user agent in appropriate contexts like in a player interface to show the current playing video or audio track.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaKeyMessageEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[MediaKeyMessageEvent]* interface of the EncryptedMediaExtensions API contains the content and related data when the content decryption module generates a message for the session.\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "message": {
        "type": "ArrayBuffer",
        "array": false,
        "dartType": "ArrayBuffer",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [ArrayBuffer] with a message from the content decryption module. Messages vary by key system.",
        "event": false
      },
      "messageType": {
        "type": "MediaKeyMessageType",
        "array": false,
        "dartType": "MediaKeyMessageType",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates the type of message. May be one of [license-request], [license-renewal], [license-release], or [individualization-request].",
        "event": false
      }
    }
  },
  {
    "name": "MediaKeys",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[MediaKeys]* interface of EncryptedMediaExtensions API represents a set of keys that an associated [HTMLMediaElement] can use for decryption of media data during playback.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaKeySession",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*MediaKeySession*] interface of the EncryptedMediaExtensions API represents a context for message exchange with a content decryption module (CDM).",
    "abstract": true,
    "category": "interface",
    "props": {
      "closed": {
        "type": "Promise<void>",
        "array": false,
        "dartType": "Promise<void>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Promise] signaling when a [MediaKeySession] closes. This promise can only be fulfilled and is never rejected. Closing a session means that licenses and keys associated with it are no longer valid for decrypting media data. ",
        "event": false
      },
      "expiration": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The time after which the keys in the current session can no longer be used to decrypt media data, or [NaN] if no such time exists. This value is determined by the CDM and measured in milliseconds since January 1, 1970, UTC. This value may change during a session lifetime, such as when an action triggers the start of a window.",
        "event": false
      },
      "keyStatuses": {
        "type": "MediaKeyStatusMap",
        "array": false,
        "dartType": "MediaKeyStatusMap",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains a reference to a read-only [MediaKeyStatusMap] of the current session's keys and their statuses.",
        "event": false
      },
      "sessionId": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains a unique string generated by the CDM for the current media object and its associated keys or licenses.",
        "event": false
      },
      "onkeystatuseschange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Sets the [EventHandler] called when there has been a change in the keys in a session or their statuses.",
        "event": true
      },
      "onmessage": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Sets the [EventHandler] called when the content decryption module has generated a message for the session.",
        "event": true
      }
    }
  },
  {
    "name": "MediaKeyStatusMap",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [*MediaKeyStatusMap*] interface of the EncryptedMediaExtensions API is a read-only map of media key statuses by key IDs.",
    "abstract": true,
    "category": "interface",
    "props": {
      "size": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the number of key/value pars in the status map.",
        "event": false
      }
    }
  },
  {
    "name": "MediaKeySystemAccess",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [*MediaKeySystemAccess*] interface of the EncryptedMediaExtensions API provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the [Navigator.requestMediaKeySystemAccess()] method.",
    "abstract": true,
    "category": "interface",
    "props": {
      "keySystem": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] identifying the key system being used.",
        "event": false
      }
    }
  },
  {
    "name": "MediaKeySystemConfiguration",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [*MediaKeySystemConfiguration*] dictionary holds configuration information about the media key system in use.",
    "abstract": true,
    "category": "interface",
    "props": {
      "initDataTypes": {
        "type": "DOMString",
        "array": true,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a list of supported initialization data type names. An initialization data type is a string indicating the format of the initialization data.",
        "event": false,
        "default": "[]"
      },
      "audioCapabilities": {
        "type": "MediaKeySystemMediaCapability",
        "array": true,
        "dartType": "MediaKeySystemMediaCapability",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a list of supported audio type and capability pairs.",
        "event": false,
        "default": "[]"
      },
      "videoCapabilities": {
        "type": "MediaKeySystemMediaCapability",
        "array": true,
        "dartType": "MediaKeySystemMediaCapability",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a list of supported video type and capability pairs.",
        "event": false,
        "default": "[]"
      },
      "distinctiveIdentifier": {
        "type": "MediaKeysRequirement",
        "array": false,
        "dartType": "MediaKeysRequirement",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates whether a persistent distinctive identifier is required.",
        "event": false,
        "default": "\"optional\""
      },
      "persistentState": {
        "type": "MediaKeysRequirement",
        "array": false,
        "dartType": "MediaKeysRequirement",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates whether the ability to persist state is required.",
        "event": false,
        "default": "\"optional\""
      }
    }
  },
  {
    "name": "MediaList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*MediaList*] interface represents the media queries of a stylesheet, e.g. those set using a [<link>] element's [media] attribute.\n\n\n*Note*: [MediaList] is a live list; updating the list using properties or methods listed below will immediately update the behavior of the document.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "mediaText": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A stringifier that returns a [DOMString] representing the [MediaList] as text, and also allows you to set a new [MediaList].",
        "event": false
      },
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the number of media queries in the [MediaList].",
        "event": false
      }
    }
  },
  {
    "name": "MediaMetadata",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[MediaMetadata]* interface of the Media Session API allows a web page to provide rich media metadata for display in a platform UI.",
    "abstract": false,
    "category": "interface",
    "props": {
      "title": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns or sets the title of the media to be played.",
        "event": false
      },
      "artist": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns or sets the name of the artist, group, creator, etc. of the media to be played.",
        "event": false
      },
      "album": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns or sets the name of the album or collection containing the media to be played.",
        "event": false
      },
      "artwork": {
        "type": "FrozenArray<MediaImage>",
        "array": false,
        "dartType": "FrozenArray<MediaImage>",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns or sets an array of images associated with playing media. ",
        "event": false
      }
    }
  },
  {
    "name": "MediaPositionState",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe Media Session API's [*MediaPositionState*] dictionary is used to represent the current playback position of a media session. Its contents can be used by the user agent to provide a user interface displaying information about the playback position and duration of the media currently being performed.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaQueryList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nA *[MediaQueryList]* object stores information on a media query applied to a document, with support for both immediate and event-driven matching against the state of the document. You can create a [MediaQueryList] by calling [matchMedia()] on the [window] object. The resulting object handles sending notifications to listeners when the media query state changes (i.e. when the media query test starts or stops evaluating to [true]).\n\nThis is very useful for adaptive design, since this makes it possible to observe a document to detect when its media queries change, instead of polling the values periodically, and allows you to programmatically make changes to a document based on media query status.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaQueryListEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [MediaQueryListEvent] object stores information on the changes that have happened to a [MediaQueryList] object — instances are available as the event object on a function referenced by a [MediaQueryList.onchange] property or [MediaQueryList.addListener()] call.",
    "abstract": false,
    "category": "interface",
    "props": {
      "matches": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] that returns [true] if the [document] currently matches the media query list, or [false] if not.",
        "event": false
      },
      "media": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] representing a serialized media query.",
        "event": false
      }
    }
  },
  {
    "name": "MediaRecorder",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[MediaRecorder]* interface of the MediaStream Recording API provides functionality to easily record media. It is created using the [MediaRecorder()] constructor.",
    "abstract": false,
    "category": "interface",
    "props": {
      "mimeType": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the MIME type that was selected as the recording container for the [MediaRecorder] object when it was created.",
        "event": false
      },
      "state": {
        "type": "RecordingState",
        "array": false,
        "dartType": "RecordingState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the current state of the [MediaRecorder] object ([inactive], [recording], or [paused].)",
        "event": false
      },
      "stream": {
        "type": "MediaStream",
        "array": false,
        "dartType": "MediaStream",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the stream that was passed into the constructor when the [MediaRecorder] was created.",
        "event": false
      },
      "videoBitsPerSecond": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the video encoding bit rate in use. This may differ from the bit rate specified in the constructor (if it was provided).",
        "event": false
      },
      "audioBitsPerSecond": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the audio encoding bit rate in use. This may differ from the bit rate specified in the constructor (if it was provided).",
        "event": false
      },
      "ondataavailable": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Called to handle the [dataavailable] event, which is periodically triggered each time [timeslice] milliseconds of media have been recorded (or when the entire media has been recorded, if [timeslice] wasn't specified). The event, of type [BlobEvent], contains the recorded media in its [data] property. You can then collect and act upon that recorded media data using this event handler.",
        "event": false
      },
      "onerror": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [Event handler] called to handle the [error] event, including reporting errors that arise with media recording. These are fatal errors that stop recording. The received event is based on the [MediaRecorderErrorEvent] interface, whose [error] property contains a [DOMException] that describes the actual error that occurred.",
        "event": true
      },
      "onpause": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [Event handler] called to handle the [pause] event, which occurs when media recording is paused.",
        "event": true
      },
      "onresume": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [Event handler] called to handle the [resume] event, which occurs when media recording resumes after being paused.",
        "event": true
      },
      "onstart": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [Event handler] called to handle the [start] event, which occurs when media recording starts.",
        "event": true
      },
      "onstop": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [Event handler] called to handle the [stop] event, which occurs when media recording ends, either when the [MediaStream] ends — or after the [MediaRecorder.stop()] method is called.",
        "event": true
      }
    }
  },
  {
    "name": "MediaRecorderErrorEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [MediaRecorderErrorEvent] interface represents errors returned by the MediaStream Recording API. It is an [Event] object that encapsulates a reference to a [DOMException] describing the error that occurred.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaSession",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[MediaSession]* interface of the Media Session API allows a web page to provide custom behaviors for standard media playback interactions, and to report metadata that can be sent by the user agent to the device or operating system for presentation in standardized user interface elements.\n\nFor example, a smartphone might have a standard panel in its lock screen that provides controls for media playback and information display. A browser on the device can use [MediaSession] to make browser playback controllable from that standard/global user interface.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaSessionActionDetails",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe Media Session API's *[MediaSessionActionDetails]* dictionary is the type used by the sole input parameter into the callback which is executed when a media session action occurs. It specifies the type of action which needs to be performed as well as the data needed to perform the action.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaSettingsRange",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[MediaSettingsRange]* interface of the MediaStream Image Capture API provides the possible range and value size of [PhotoCapabilities.imageHeight] and [PhotoCapabilities.imageWidth]. A [PhotoCapabilities] object can be retrieved by calling [ImageCapture.PhotoCapabilities()].",
    "abstract": true,
    "category": "interface",
    "props": {
      "max": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the maximum value of this settings.",
        "event": false
      },
      "min": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the minimum value of this setting.",
        "event": false
      },
      "step": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the minimum difference between consecutive values of this setting.",
        "event": false
      }
    }
  },
  {
    "name": "MediaSource",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[MediaSource]* interface of the Media Source Extensions API represents a source of media data for an [HTMLMediaElement] object. A [MediaSource] object can be attached to a [HTMLMediaElement] to be played in the user agent.\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "sourceBuffers": {
        "type": "SourceBufferList",
        "array": false,
        "dartType": "SourceBufferList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [SourceBufferList] object containing the list of [SourceBuffer] objects associated with this [MediaSource].",
        "event": false
      },
      "activeSourceBuffers": {
        "type": "SourceBufferList",
        "array": false,
        "dartType": "SourceBufferList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [SourceBufferList] object containing a subset of the [SourceBuffer] objects contained within [MediaSource.sourceBuffers] — the list of objects providing the selected video track,  enabled audio tracks, and shown/hidden text tracks.",
        "event": false
      },
      "readyState": {
        "type": "ReadyState",
        "array": false,
        "dartType": "ReadyState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an enum representing the state of the current [MediaSource], whether it is not currently attached to a media element ([closed]), attached and ready to receive [SourceBuffer] objects ([open]), or attached but the stream has been ended via [MediaSource.endOfStream()] ([ended].)",
        "event": false
      },
      "duration": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets and sets the duration of the current media being presented.",
        "event": false
      },
      "onsourceclose": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The event handler for the [sourceclose] event.",
        "event": false
      },
      "onsourceended": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The event handler for the [sourceended] event.",
        "event": false
      },
      "onsourceopen": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The event handler for the [sourceopen] event.",
        "event": false
      }
    }
  },
  {
    "name": "MediaStream",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[MediaStream]* interface represents a stream of media content. A stream consists of several *tracks* such as video or audio tracks. Each track is specified as an instance of [MediaStreamTrack].You can obtain a MediaStream object either by using the constructor or by calling [MediaDevices.getUserMedia()].\n\nSome user agents subclass this interface to provide more precise information or functionality, like in [CanvasCaptureMediaStreamTrack].",
    "abstract": false,
    "category": "interface",
    "props": {
      "active": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A Boolean value that returns [true] if the [MediaStream] is active, or [false] otherwise.",
        "event": false
      },
      "id": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] containing 36 characters denoting a universally unique identifier (UUID) for the object.",
        "event": false
      },
      "onaddtrack": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [event handler] containing the action to perform when an [addtrack] event is fired when a new [MediaStreamTrack] object is added.",
        "event": true
      },
      "onremovetrack": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [event handler] containing the action to perform when a [removetrack] event is fired when a [MediaStreamTrack] object is removed from it.",
        "event": true
      }
    }
  },
  {
    "name": "MediaStreamAudioDestinationNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\nThe [MediaStreamAudioDestinationNode] interface represents an audio destination consisting of a WebRTC [MediaStream] with a single [AudioMediaStreamTrack], which can be used in a similar way to a [MediaStream] obtained from [Navigator.getUserMedia()].\n\nIt is an [AudioNode] that acts as an audio destination, created using the [AudioContext.createMediaStreamDestination()] method.\n\n\n\n \n  \n   Number of inputs\n   [1]\n  \n  \n   Number of outputs\n   [0]\n  \n  \n   Channel count\n   [2]\n  \n  \n   Channel count mode\n   [\"explicit\"]\n  \n  \n   Channel count interpretation\n   [\"speakers\"]\n  \n \n",
    "abstract": false,
    "category": "interface",
    "props": {
      "stream": {
        "type": "MediaStream",
        "array": false,
        "dartType": "MediaStream",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [MediaStream] containing a single [MediaStreamTrack] whose [kind] is [audio] and with the same number of channels as the node. You can use this property to get a stream out of the audio graph and feed it into another construct, such as a Media Recorder.",
        "event": false
      }
    }
  },
  {
    "name": "MediaStreamAudioSourceNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[MediaStreamAudioSourceNode]* interface is a type of [AudioNode] which operates as an audio source whose media is received from a [MediaStream] obtained using the WebRTC or Media Capture and Streams APIs. This media could be from a microphone (through [getUserMedia()]) or from a remote peer on a WebRTC call (using the [RTCPeerConnection]'s audio tracks).\n\nA [MediaStreamAudioSourceNode] has no inputs and exactly one output, and is created using the [AudioContext.createMediaStreamSource()] method.\n\nThe [MediaStreamAudioSourceNode] takes the audio from the first [MediaStreamTrack] whose [kind] attribute's value is [audio]. See Track ordering for more information about the order of tracks.\n\nThe number of channels output by the node matches the number of tracks found in the selected audio track.\n\n\n \n  \n   Number of inputs\n   [0]\n  \n  \n   Number of outputs\n   [1]\n  \n  \n   Channel count\n   defined by the first audio [MediaStreamTrack] passed to the [AudioContext.createMediaStreamSource()] method that created it.\n  \n \n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaStreamAudioSourceOptions",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*MediaStreamAudioSourceOptions*] dictionary provides configuration options used when creating a [MediaStreamAudioSourceNode] using its constructor. It is not needed when using the [AudioContext.createMediaStreamSource()] method.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaStreamConstraints",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[MediaStreamConstraints]* dictionary is used when calling [getUserMedia()] to specify what kinds of tracks should be included in the returned [MediaStream], and, optionally, to establish constraints for those tracks' settings.\n\nTo learn more about how constraints work, see Capabilities, constraints, and settings.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaStreamTrack",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[MediaStreamTrack]* interface represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.",
    "abstract": true,
    "category": "interface",
    "props": {
      "contentHint": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A string that may be used by the web application to provide a hint as to what type of content the track contains to guide how it should be treated by API consumers.",
        "event": false
      },
      "enabled": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A Boolean whose value of [true] if the track is enabled, that is allowed to render the media source stream; or [false] if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect.\n *Note:* You can implement standard \"mute\" functionality by setting [enabled] to [false]. The [muted] property refers to a condition in which there's no media because of a technical issue.\n ",
        "event": false
      },
      "id": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] containing a unique identifier (GUID) for the track; it is generated by the browser.",
        "event": false
      },
      "kind": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] set to [\"audio\"] if the track is an audio track and to [\"video\"], if it is a video track. It doesn't change if the track is deassociated from its source.",
        "event": false
      },
      "label": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] containing a user agent-assigned label that identifies the track source, as in [\"internal microphone\"]. The string may be left empty and is empty as long as no source has been connected. When the track is deassociated from its source, the label is not changed.",
        "event": false
      },
      "muted": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a Boolean value indicating whether the track is unable to provide media data due to a technical issue.\n *Note:* You can implement standard \"mute\" functionality by setting [enabled] to [false], and unmute the media by setting it back to [true] again.\n ",
        "event": false
      },
      "readyState": {
        "type": "MediaStreamTrackState",
        "array": false,
        "dartType": "MediaStreamTrackState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an enumerated value giving the status of the track. This will be one of the following values:\n \n  [\"live\"] which indicates that an input is connected and does its best-effort in providing real-time data. In that case, the output of data can be switched on or off using the [enabled] attribute.\n  [\"ended\"] which indicates that the input is not giving any more data and will never provide new data.\n \n ",
        "event": false
      }
    }
  },
  {
    "name": "MediaStreamTrackAudioSourceNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[MediaStreamTrackAudioSourceNode]* interface is a type of [AudioNode] which represents a source of audio data taken from a specific [MediaStreamTrack] obtained through the WebRTC or Media Capture and Streams APIs. The audio itself might be input from a microphone or other audio sampling device, or might be received through a [RTCPeerConnection], among other posible options.\n\nA [MediaStreamTrackAudioSourceNode] has no inputs and exactly one output, and is created using the [AudioContext.createMediaStreamTrackSource()] method. This interface is similar to [MediaStreamAudioSourceNode], except it lets you specifically state the track to use, rather than assuming the first audio track on a stream.\n\n\n \n  \n   Number of inputs\n   [0]\n  \n  \n   Number of outputs\n   [1]\n  \n  \n   Channel count\n   defined by the first audio [MediaStreamTrack] passed to the [AudioContext.createMediaStreamTrackSource()] method that created it.\n  \n \n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaStreamTrackAudioSourceOptions",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*MediaStreamTrackAudioSourceOptions*] dictionary is used when specifying options to the [MediaStreamTrackAudioSourceNode()] constructor. It isn't needed when using the [AudioContext.createMediaStreamTrackSource()] method.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaStreamTrackEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[MediaStreamTrackEvent]* interface represents events which indicate that a [MediaStream] has had tracks added to or removed from the stream through calls to Media Stream API methods. These events are sent to the stream when these changes occur.\n\n\n\n\n\nThe events based on this interface are [addtrack] and [removetrack]",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaTrackConstraints",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[MediaTrackConstraints]* dictionary is used to describe a set of capabilities and the value or values each can take on. A constraints dictionary is passed into [applyConstraints()] to allow a script to establish a set of exact (required) values or ranges and/or preferred values or ranges of values for the track, and the most recently-requested set of custom constraints can be retrieved by calling [getConstraints()].\n\nFor each constraint, you can typically specify an exact value you need, an ideal value you want, a range of acceptable values, and/or a value which you'd like to be as close to as possible. The specifics vary somewhat depending on the type of the constrainable property.\n\nTo learn more about how constraints work, see Capabilities, constraints, and settings.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaTrackSettings",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[MediaTrackSettings]* dictionary is used to return the current values configured for each of a [MediaStreamTrack]'s settings. These values will adhere as closely as possible to any constraints previously described using a [MediaTrackConstraints] object and set using [applyConstraints()], and will adhere to the default constraints for any properties whose constraints haven't been changed, or whose customized constraints couldn't be matched.\n\nTo learn more about how constraints and settings work, see Capabilities, constraints, and settings.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MediaTrackSupportedConstraints",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[MediaTrackSupportedConstraints]* dictionary establishes the list of constrainable properties recognized by the user agent or browser in its implementation of the [MediaStreamTrack] object. An object conforming to [MediaTrackSupportedConstraints] is returned by [MediaDevices.getSupportedConstraints()].\n\nBecause of the way interface definitions in WebIDL work, if a constraint is requested but not supported, no error will occur. Instead, the specified constraints will be applied, with any unrecognized constraints stripped from the request.That can lead to confusing and hard to debug errors, so be sure to use [getSupportedConstraints()] to retrieve this information before attempting to establish constraints if you need to know the difference between silently ignoring a constraint and a constraint being accepted.\n\nAn actual constraint set is described using an object based on the [MediaTrackConstraints] dictionary.\n\nTo learn more about how constraints work, see Capabilities, constraints, and settings.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MessageChannel",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[MessageChannel]* interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two [MessagePort] properties.\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "port1": {
        "type": "MessagePort",
        "array": false,
        "dartType": "MessagePort",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns port1 of the channel.",
        "event": false
      },
      "port2": {
        "type": "MessagePort",
        "array": false,
        "dartType": "MessagePort",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns port2 of the channel.",
        "event": false
      }
    }
  },
  {
    "name": "MessageEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*MessageEvent*] interface represents a message received by a target object.\n\nThis is used to represent messages in:\n\n\n Server-sent events (see [EventSource.onmessage]).\n Web sockets (see the [onmessage] property of the WebSocket interface).\n Cross-document messaging (see [Window.postMessage()] and [Window.onmessage]).\n Channel messaging (see [MessagePort.postMessage()] and [MessagePort.onmessage]).\n Cross-worker/document messaging (see the above two entries, but also [Worker.postMessage()], [Worker.onmessage], [ServiceWorkerGlobalScope.onmessage], etc.)\n Broadcast channels (see [Broadcastchannel.postMessage()]) and [BroadcastChannel.onmessage]).\n WebRTC data channels (see [RTCDataChannel.onmessage]).\n\n\nThe action triggered by this event is defined in a function set as the event handler for the relevant [message] event (e.g. using an [onmessage] handler as listed above).\n\n\n  *Note:* This feature is available in Web Workers\n\n \n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "data": {
        "type": "any",
        "array": false,
        "dartType": "any",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The data sent by the message emitter.",
        "event": false
      },
      "origin": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [USVString] representing the origin of the message emitter.",
        "event": false
      },
      "lastEventId": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] representing a unique ID for the event.",
        "event": false
      },
      "source": {
        "type": "MessageEventSource",
        "array": false,
        "dartType": "MessageEventSource",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [MessageEventSource] (which can be a [WindowProxy], [MessagePort], or [ServiceWorker] object) representing the message emitter.",
        "event": false
      },
      "ports": {
        "type": "FrozenArray<MessagePort>",
        "array": false,
        "dartType": "FrozenArray<MessagePort>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An array of [MessagePort] objects representing the ports associated with the channel the message is being sent through (where appropriate, e.g. in channel messaging or when sending a message to a shared worker).",
        "event": false
      }
    }
  },
  {
    "name": "MessagePort",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[MessagePort]* interface of the Channel Messaging API represents one of the two ports of a [MessageChannel], allowing messages to be sent from one port and listening out for them arriving at the other.\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Metadata",
    "experimental": false,
    "deprecated": false,
    "standard": false,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n        Non-standard\n        This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n      \n\nThe *[Metadata]* interface is used by the File and Directory Entries API to contain information about a file system entry. This metadata includes the file's size and modification date and time.\n\n\nThis interface isn't available through the global scope; instead, you obtain a [Metadata] object describing a [FileSystemEntry] using the method [FileSystemEntry.getMetadata()].\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MIDIAccess",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n \n\nThe *[MIDIAccess]* interface of the Web MIDI API provides methods for listing MIDI input and output devices, and obtaining access to those devices.",
    "abstract": true,
    "category": "interface",
    "props": {
      "inputs": {
        "type": "MIDIInputMap",
        "array": false,
        "dartType": "MIDIInputMap",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an instance of [MIDIInputMap] which provides access to any available MIDI input ports.",
        "event": false
      },
      "outputs": {
        "type": "MIDIOutputMap",
        "array": false,
        "dartType": "MIDIOutputMap",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an instance of [MIDIOutputMap] which provides access to any available MIDI output ports.",
        "event": false
      },
      "sysexEnabled": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A boolean attribute indicating whether system exclusive support is enabled on the current MIDIAccess instance.",
        "event": false
      }
    }
  },
  {
    "name": "MIDIConnectionEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[MIDIConnectionEvent]* interface of the Web MIDI API is the event passed to the [onstatechange] event handler of the [MIDIAccess] interface and the [onstatechange] event of the [MIDIPorts] interface. This occurs any time a new port becomes available, or when a previously available port becomes unavailable. For example, this event is fired whenever a MIDI device is either plugged in to or unplugged from a computer.  ",
    "abstract": false,
    "category": "interface",
    "props": {
      "port": {
        "type": "MIDIPort",
        "array": false,
        "dartType": "MIDIPort",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to a [MIDIPort] instance for a port that has been connected or disconnected.\"",
        "event": false
      }
    }
  },
  {
    "name": "MIDIInput",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nUse the *[MIDIInput]* interface of the Web MIDI API to access and pass messages to a MIDI input port.",
    "abstract": true,
    "category": "interface",
    "props": {
      "onmidimessage": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "When the current port receives a [MIDIMessage] it triggers a call to this event handler.",
        "event": false
      }
    }
  },
  {
    "name": "MIDIMessageEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[MIDIMessageEvent]* interface of the Web MIDI API represents the event passed to the [onmidimessage] event handler of the [MIDIInput] interface. A [midimessage] event is fired every time a MIDI message is sent from a device represented by a [MIDIInput], for example when a MIDI keyboard key is pressed, a knob is tweaked, or a slider is moved.  ",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MIDIOutput",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[MIDIOutput]* interface of the Web MIDI API provides methods to add messages to the queue of an output device, and to clear the queue of messages.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MIDIPort",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[MIDIPort]* interface of the Web MIDI API represents a MIDI input or output port.\n\nA [MIDIPort] instance is created when a new MIDI device is connected. Therefore it has no constructor.",
    "abstract": true,
    "category": "interface",
    "props": {
      "id": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [string] containing the unique ID of the port.",
        "event": false
      },
      "manufacturer": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [string] containing the manufacturer of the port.",
        "event": false
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [string] containing the system name of the port.",
        "event": false
      },
      "type": {
        "type": "MIDIPortType",
        "array": false,
        "dartType": "MIDIPortType",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [string] containing the type of the port, one of:\n    \n      [\"input\"]\n      The [MIDIPort] is an input port.\n      [\"output\"]\n      The [MIDIPort] is an output port.\n    \n  ",
        "event": false
      },
      "version": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [string] containing the version of the port.",
        "event": false
      },
      "state": {
        "type": "MIDIPortDeviceState",
        "array": false,
        "dartType": "MIDIPortDeviceState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [string] containing the state of the port, one of:\n    \n      [\"disconnected\"]\n      The device that this [MIDIPort] represents is disconnected from the system.\n      [\"connected\"]\n      The device that this [MIDIPort] represents is currently connected.\n    \n  ",
        "event": false
      },
      "connection": {
        "type": "MIDIPortConnectionState",
        "array": false,
        "dartType": "MIDIPortConnectionState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [string] containing the connection state of the port, one of:\n    \n      [\"open\"]\n      The device that this [MIDIPort] represents has been opened and is available.\n      [\"closed\"]\n      The device that this [MIDIPort] represents has not been opened, or has been closed.\n      [\"pending\"]\n      The device that this [MIDIPort] represents has been opened but has subsequently disconnected .\n    \n  ",
        "event": false
      },
      "onstatechange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Called when an existing port changes its state or connection.",
        "event": false
      }
    }
  },
  {
    "name": "MimeType",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[MimeType]* interface provides contains information about a MIME type associated with a particular plugin. [NavigatorPlugins.mimeTypes] returns an array of this object.",
    "abstract": true,
    "category": "interface",
    "props": {
      "type": {
        "type": "undefined",
        "array": false,
        "dartType": "undefined",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the MIME type of the associated plugin.",
        "event": false
      },
      "description": {
        "type": "undefined",
        "array": false,
        "dartType": "undefined",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a description of the associated plugin or an empty string if there is none.",
        "event": false
      },
      "suffixes": {
        "type": "undefined",
        "array": false,
        "dartType": "undefined",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A string containing valid file extensions for the data displayed by the plugin, or an empty string if an extension is not valid for the particular module. For example, a browser's content decryption module may appear in the plugin list but support more file extensions than can be anticipated. It might therefore return an empty string.",
        "event": false
      },
      "enabledPlugin": {
        "type": "undefined",
        "array": false,
        "dartType": "undefined",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an instance of [Plugin] containing information about the plugin itself.",
        "event": false
      }
    }
  },
  {
    "name": "MimeTypeArray",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[MimeTypeArray]* interface returns an array of [MimeType] instances, each of which contains information about a supported browser plugins. This object is returned by [NavigatorPlugins.mimeTypes].",
    "abstract": true,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The number of items in the array.",
        "event": false
      }
    }
  },
  {
    "name": "MouseEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*MouseEvent*] interface represents events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include [click], [dblclick], [mouseup], [mousedown].\n\n[MouseEvent] derives from [UIEvent], which in turn derives from [Event]. Though the [MouseEvent.initMouseEvent()] method is kept for backward compatibility, creating of a [MouseEvent] object should be done using the [MouseEvent()] constructor.\n\nSeveral more specific events are based on [MouseEvent], including [WheelEvent] and [DragEvent].\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "altKey": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns [true] if the alt key was down when the mouse event was fired.",
        "event": false
      },
      "button": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The button number that was pressed (if applicable) when the mouse event was fired.",
        "event": false
      },
      "buttons": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The buttons being depressed (if any) when the mouse event was fired.",
        "event": false
      },
      "clientX": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The X coordinate of the mouse pointer in local (DOM content) coordinates.",
        "event": false
      },
      "clientY": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The Y coordinate of the mouse pointer in local (DOM content) coordinates.",
        "event": false
      },
      "ctrlKey": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns [true] if the control key was down when the mouse event was fired.",
        "event": false
      },
      "metaKey": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns [true] if the meta key was down when the mouse event was fired.",
        "event": false
      },
      "movementX": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The X coordinate of the mouse pointer relative to the position of the last [mousemove] event.",
        "event": false
      },
      "movementY": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The Y coordinate of the mouse pointer relative to the position of the last [mousemove] event.",
        "event": false
      },
      "offsetX": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "The X coordinate of the mouse pointer relative to the position of the padding edge of the target node.",
        "event": false
      },
      "offsetY": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "The Y coordinate of the mouse pointer relative to the position of the padding edge of the target node.",
        "event": false
      },
      "pageX": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "The X coordinate of the mouse pointer relative to the whole document.",
        "event": false
      },
      "pageY": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "The Y coordinate of the mouse pointer relative to the whole document.",
        "event": false
      },
      "relatedTarget": {
        "type": "EventTarget",
        "array": false,
        "dartType": "EventTarget",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The secondary target for the event, if there is one.\n ",
        "event": false
      },
      "screenX": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The X coordinate of the mouse pointer in global (screen) coordinates.",
        "event": false
      },
      "screenY": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The Y coordinate of the mouse pointer in global (screen) coordinates.",
        "event": false
      },
      "shiftKey": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns [true] if the shift key was down when the mouse event was fired.",
        "event": false
      },
      "x": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Alias for [MouseEvent.clientX].",
        "event": false
      },
      "y": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Alias for [MouseEvent.clientY]",
        "event": false
      }
    }
  },
  {
    "name": "MutationEvent",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\n\n  Note\n  Mutation Events (W3C DOM Level 3 Events) have been deprecated in favor of Mutation Observers (W3C DOM4).\n\n\nThe [*MutationEvent*] interface provides event properties that are specific to modifications to the Document Object Model (DOM) hierarchy and nodes.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MutationObserver",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [MutationObserver] interface provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature, which was part of the DOM3 Events specification.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MutationObserverInit",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[MutationObserverInit]* dictionary describes the configuration of a mutation observer. As such, it's primarily used as the type of the [options] parameter on the [MutationObserver.observe()] method.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "MutationRecord",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nA *[MutationRecord]* represents an individual DOM mutation. It is the object that is passed to [MutationObserver]'s callback.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "NamedNodeMap",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*NamedNodeMap*] interface represents a collection of [Attr] objects. Objects inside a [NamedNodeMap] are not in any particular order, unlike [NodeList], although they may be accessed by an index as in an array.\n\nA [NamedNodeMap] object is live and will thus be auto-updated if changes are made to its contents internally or elsewhere.\n\n\nAlthough called [NamedNodeMap], this interface doesn't deal with [Node] objects but with [Attr] objects, which were originally a specialized class of [Node], and still are in some implementations.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the amount of objects in the map.",
        "event": false
      }
    }
  },
  {
    "name": "NavigationPreloadManager",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[NavigationPreloadManager]* interface of the Service Worker API provides methods for managing the preloading of resources with a service worker.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Navigator",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*Navigator*] interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.\n\nA [Navigator] object can be retrieved using the read-only [window.navigator] property.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "NavigatorConcurrentHardware",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[NavigatorConcurrentHardware]* mixin adds to the [Navigator] interface features which allow Web content to determine how many logical processors the user has available, in order to let content and Web apps optimize their operations to best take advantage of the user's CPU.\n\n\n  *Note:* This feature is available in Web Workers\n\n\nThe number of *logical processor cores* is a way to measure the number of threads which can effectively be run at once without them having to share CPUs. Modern computers have multiple physical cores in their CPU (two or four cores is typical), but each physical core is also usually able to run more than one thread at a time using advanced scheduling techniques. So a four-core CPU may return 8. The browser may, however, choose to reduce the number in order to represent more accurately the number of [Worker]s that can run at once",
    "abstract": true,
    "category": "interface",
    "props": {
      "hardwareConcurrency": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the number of logical processors which may be available to the user agent. This value is always at least 1, and will be 1 if the actual number of logical processors can't be determined.",
        "event": false
      }
    }
  },
  {
    "name": "NavigatorID",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*NavigatorID*] interface contains methods and properties related to the identity of the browser.\n\nThere is no object of type [NavigatorID], but other interfaces, like [Navigator] or [WorkerNavigator], implement it.",
    "abstract": true,
    "category": "interface",
    "props": {
      "appCodeName": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Always returns \"[Mozilla]\", in any browser. This property is kept only for compatibility purposes.",
        "event": false
      },
      "appName": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Always returns \"[Netscape]\", in any browser. This property is kept only for compatibility purposes.",
        "event": false
      },
      "appVersion": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Returns either \"[4.0]\" or a string representing version information about the browser. Do not rely on this property to return a useful value.",
        "event": false
      },
      "platform": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Returns either the empty string or a string representing the platform the browser is running on. Do not rely on this property to return a useful value.",
        "event": false
      },
      "product": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Always returns \"[Gecko]\", in any browser. This property is kept only for compatibility purposes.",
        "event": false
      },
      "userAgent": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the user-agent string for the current browser.",
        "event": false
      }
    }
  },
  {
    "name": "NavigatorLanguage",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n[*NavigatorLanguage*] contains methods and properties related to the language of the navigator.\n\nThere is no object of type [NavigatorLanguage], but other interfaces, like [Navigator] or [WorkerNavigator], implement it.",
    "abstract": true,
    "category": "interface",
    "props": {
      "language": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] representing the preferred language of the user, usually the language of the browser UI. The [null] value is returned when this is unknown.",
        "event": false
      },
      "languages": {
        "type": "FrozenArray<DOMString>",
        "array": false,
        "dartType": "FrozenArray<DOMString>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an array of [DOMString] representing the languages known to the user, by order of preference.",
        "event": false
      }
    }
  },
  {
    "name": "NavigatorOnLine",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*NavigatorOnLine*] interface contains methods and properties related to the connectivity status of the browser.\n\nThere is no object of type [NavigatorOnLine], but other interfaces, like [Navigator] or [WorkerNavigator], implement it.",
    "abstract": true,
    "category": "interface",
    "props": {
      "onLine": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] indicating whether the browser is working online.",
        "event": false
      }
    }
  },
  {
    "name": "NavigatorPlugins",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe [*NavigatorPlugins*] mixin adds to the [Navigator] interface methods and properties for discovering and interacting with plugins installed into the browser.",
    "abstract": true,
    "category": "interface",
    "props": {
      "mimeTypes": {
        "type": "MimeTypeArray",
        "array": false,
        "dartType": "MimeTypeArray",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Returns an [MimeTypeArray] listing the MIME types supported by the browser.",
        "event": false
      },
      "plugins": {
        "type": "PluginArray",
        "array": false,
        "dartType": "PluginArray",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Returns a [PluginArray] listing the plugins installed in the browser.",
        "event": false
      }
    }
  },
  {
    "name": "NavigatorStorage",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[NavigatorStorage]* mixin adds to the [Navigator] and [WorkerNavigator] interfaces the [Navigator.storage] property, which provides access to the [StorageManager] singleton used for controlling the persistence of data stores as well as obtaining information\n\n\n  *Note:* This feature is available in Web Workers\n\n\nThere are many APIs which provide ways for Web content to store data on a user's computer, including cookies, the Web Storage API ([Window.localStorage] and [Window.sessionStorage]), and IndexedDB. The Storage Standard is designed to serve as a common basis for the implementation of all of those APIs and storage technologies, so that their constraints and configurations can be understood and controlled using a common set of methods and properties.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "NetworkInformation",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [*NetworkInformation*] interface provides information about the connection a device is using to communicate with the network and provides a means for scripts to be notified if the connection type changes. The [NetworkInformation] interfaces cannot be instantiated. It is instead accessed through the [connection] property of the [Navigator] interface.\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "downlink": {
        "type": "Megabit",
        "array": false,
        "dartType": "Megabit",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the effective bandwidth estimate in megabits per second, rounded to the nearest multiple of 25 kilobits per seconds.",
        "event": false
      },
      "downlinkMax": {
        "type": "Megabit",
        "array": false,
        "dartType": "Megabit",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the maximum downlink speed, in megabits per second (Mbps), for the underlying connection technology.",
        "event": false
      },
      "effectiveType": {
        "type": "EffectiveConnectionType",
        "array": false,
        "dartType": "EffectiveConnectionType",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the effective type of the connection meaning one of 'slow-2g', '2g', '3g', or '4g'. This value is determined using a combination of recently observed round-trip time and downlink values.",
        "event": false
      },
      "rtt": {
        "type": "Millisecond",
        "array": false,
        "dartType": "Millisecond",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the estimated effective round-trip time of the current connection, rounded to the nearest multiple of 25 milliseconds.",
        "event": false
      },
      "saveData": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns [true] if the user has set a reduced data usage option on the user agent.",
        "event": false
      },
      "type": {
        "type": "ConnectionType",
        "array": false,
        "dartType": "ConnectionType",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the type of connection a device is using to communicate with the network. It will be one of the following values:\n \n  [bluetooth]\n  [cellular]\n  [ethernet]\n  [none]\n  [wifi]\n  [wimax]\n  [other]\n  [unknown]\n \n ",
        "event": false
      },
      "onchange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The event that's fired when connection information changes and the [change] is fired on this object.",
        "event": false
      }
    }
  },
  {
    "name": "Node",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe\n    DOM *[Node]* interface is an abstract base\n    class upon which many other DOM API objects are based, thus letting those object types\n    to be used similarly and often interchangeably. As an abstract class, there is\n  no such thing as a plain [Node] object. All objects that implement\n  [Node] functionality are based on one of its subclasses. Most notable are\n  [Document], [Element], and [DocumentFragment].\n\n\nIn addition, every kind of DOM node is represented by an interface based on\n  [Node]. These include [Attr], [CharacterData]\n  (which [Text], [Comment], [CDATASection] and\n  [ProcessingInstruction] are all based on), [DocumentType],\n  [Notation], [Entity], and [EntityReference].\n\nIn some cases, a particular feature of the base [Node] interface may not\n  apply to one of its child interfaces; in that case, the inheriting node may\n  return [null] or throw an exception, depending on circumstances. For example,\n  attempting to add children to a node type that cannot have children will throw an\n  exception.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "baseURI": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] representing the base URL of the document\n    containing the [Node].",
        "event": false
      },
      "childNodes": {
        "type": "NodeList",
        "array": false,
        "dartType": "NodeList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a live [NodeList] containing all the children of this node\n    (including elements, text and comments). [NodeList] being live means that\n    if the children of the [Node] change, the [NodeList] object is\n    automatically updated.",
        "event": false
      },
      "firstChild": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Node] representing the first direct child node of the node,\n    or [null] if the node has no child.",
        "event": false
      },
      "isConnected": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A boolean indicating whether or not the Node is connected (directly or indirectly)\n    to the context object, e.g. the [Document] object in the case of the\n    normal DOM, or the [ShadowRoot] in the case of a shadow DOM.",
        "event": false
      },
      "lastChild": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Node] representing the last direct child node of the node,\n    or [null] if the node has no child.",
        "event": false
      },
      "nextSibling": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Node] representing the next node in the tree, or\n    [null] if there isn't such node.",
        "event": false
      },
      "nodeName": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] containing the name of the [Node]. The\n    structure of the name will differ with the node type. E.g. An\n    [HTMLElement] will contain the name of the corresponding tag, like\n    ['audio'] for an [HTMLAudioElement], a [Text]\n    node will have the ['#text'] string, or a [Document] node will\n    have the ['#document'] string.",
        "event": false
      },
      "nodeType": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [unsigned short] representing the type of the node. Possible\n    values are:\n    \n      \n        \n          Name\n          Value\n        \n      \n      \n        \n          [ELEMENT_NODE]\n          [1]\n        \n        \n          [ATTRIBUTE_NODE] \n    \n\n          [2]\n        \n        \n          [TEXT_NODE]\n          [3]\n        \n        \n          [CDATA_SECTION_NODE]\n          [4]\n        \n        \n          [ENTITY_REFERENCE_NODE] \n    \n\n          [5]\n        \n        \n          [ENTITY_NODE] \n    \n\n          [6]\n        \n        \n          [PROCESSING_INSTRUCTION_NODE]\n          [7]\n        \n        \n          [COMMENT_NODE]\n          [8]\n        \n        \n          [DOCUMENT_NODE]\n          [9]\n        \n        \n          [DOCUMENT_TYPE_NODE]\n          [10]\n        \n        \n          [DOCUMENT_FRAGMENT_NODE]\n          [11]\n        \n        \n          [NOTATION_NODE] \n    \n\n          [12]\n        \n      \n    \n  ",
        "event": false
      },
      "nodeValue": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns / Sets the value of the current node.",
        "event": false
      },
      "ownerDocument": {
        "type": "Document",
        "array": false,
        "dartType": "Document",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [Document] that this node belongs to. If the node is itself\n    a document, returns [null].",
        "event": false
      },
      "parentNode": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Node] that is the parent of this node. If there is no such\n    node, like if this node is the top of the tree or if doesn't participate in a tree,\n    this property returns [null].",
        "event": false
      },
      "parentElement": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [Element] that is the parent of this node. If the node has\n    no parent, or if that parent is not an [Element], this property returns\n    [null].",
        "event": false
      },
      "previousSibling": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Node] representing the previous node in the tree, or\n    [null] if there isn't such node.",
        "event": false
      },
      "textContent": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns / Sets the textual content of an element and all its descendants.",
        "event": false
      }
    }
  },
  {
    "name": "NodeFilter",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nA *[NodeFilter]* interface represents an object used to filter the nodes in a [NodeIterator] or [TreeWalker]. A [NodeFilter] knows nothing about the document or traversing nodes; it only knows how to evaluate a single node against the provided filter.\n\n\n*Note:* The browser doesn't provide any object implementing this interface. It is the user who is expected to write one, tailoring the [acceptNode()] method to its needs, and using it with some [TreeWalker] or [NodeIterator] objects.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "NodeIterator",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[NodeIterator]* interface\n\t\trepresents an iterator over the members of a list of the nodes in a subtree of the\n\t\tDOM. The nodes will be returned in document order.",
    "abstract": true,
    "category": "interface",
    "props": {
      "root": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Node] representing the root node as specified when the\n\t\t[NodeIterator] was created.",
        "event": false
      },
      "whatToShow": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [unsigned long] being a bitmask made of constants\n\t\t\tdescribing the types of [Node] that must to be presented.\n\t\t\tNon-matching nodes are skipped, but their children may be included, if\n\t\t\trelevant.\n\n\t\tThe possible values are:\n\n\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\tConstant\n\t\t\t\t\tNumerical value\n\t\t\t\t\tDescription\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t[NodeFilter.SHOW_ALL]\n\t\t\t\t\t[-1] (that is the max value of\n\t\t\t\t\t\t[unsigned long])\n\t\t\t\t\tShows all nodes.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t[NodeFilter.SHOW_ATTRIBUTE] \n    \n\n\t\t\t\t\t[2]\n\t\t\t\t\tShows attribute [Attr] nodes. This is meaningful\n\t\t\t\t\t\tonly when creating a [NodeIterator] with an [Attr] node as its root; in this case, it means that\n\t\t\t\t\t\tthe attribute node will appear in the first position of the\n\t\t\t\t\t\titeration or traversal. Since attributes are never children of\n\t\t\t\t\t\tother nodes, they do not appear when traversing over the document\n\t\t\t\t\t\ttree.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t[NodeFilter.SHOW_CDATA_SECTION] \n    \n\n\t\t\t\t\t\n\t\t\t\t\t[8]\n\t\t\t\t\tShows [CDATASection] nodes.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t[NodeFilter.SHOW_COMMENT]\n\t\t\t\t\t[128]\n\t\t\t\t\tShows [Comment] nodes.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t[NodeFilter.SHOW_DOCUMENT]\n\t\t\t\t\t[256]\n\t\t\t\t\tShows [Document] nodes.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t[NodeFilter.SHOW_DOCUMENT_FRAGMENT]\n\t\t\t\t\t[1024]\n\t\t\t\t\tShows [DocumentFragment] nodes.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t[NodeFilter.SHOW_DOCUMENT_TYPE]\n\t\t\t\t\t[512]\n\t\t\t\t\tShows [DocumentType] nodes.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t[NodeFilter.SHOW_ELEMENT]\n\t\t\t\t\t[1]\n\t\t\t\t\tShows [Element] nodes.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t[NodeFilter.SHOW_ENTITY] \n    \n\n\t\t\t\t\t[32]\n\t\t\t\t\tShows [Entity] nodes. This is meaningful only when\n\t\t\t\t\t\tcreating a [NodeIterator] with an [Entity] node as its root; in this case, it means that\n\t\t\t\t\t\tthe [Entity] node will appear in the first position\n\t\t\t\t\t\tof the traversal. Since entities are not part of the document\n\t\t\t\t\t\ttree, they do not appear when traversing over the document tree.\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t[NodeFilter.SHOW_ENTITY_REFERENCE] \n    \n\n\t\t\t\t\t\n\t\t\t\t\t[16]\n\t\t\t\t\tShows [EntityReference] nodes.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t[NodeFilter.SHOW_NOTATION] \n    \n\n\t\t\t\t\t[2048]\n\t\t\t\t\tShows [Notation] nodes. This is meaningful only\n\t\t\t\t\t\twhen creating a [NodeIterator] with a [Notation] node as its root; in this case, it means\n\t\t\t\t\t\tthat the [Notation] node will appear in the first\n\t\t\t\t\t\tposition of the traversal. Since entities are not part of the\n\t\t\t\t\t\tdocument tree, they do not appear when traversing over the\n\t\t\t\t\t\tdocument tree.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t[NodeFilter.SHOW_PROCESSING_INSTRUCTION]\n\t\t\t\t\t[64]\n\t\t\t\t\tShows [ProcessingInstruction] nodes.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t[NodeFilter.SHOW_TEXT]\n\t\t\t\t\t[4]\n\t\t\t\t\tShows [Text] nodes.\n\t\t\t\t\n\t\t\t\n\t\t\n\t",
        "event": false
      },
      "filter": {
        "type": "NodeFilter",
        "array": false,
        "dartType": "NodeFilter",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [NodeFilter] used to select the relevant nodes.",
        "event": false
      },
      "referenceNode": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [Node] to which the iterator is anchored.",
        "event": false
      },
      "pointerBeforeReferenceNode": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] flag that indicates whether the\n\t\t[NodeIterator] is anchored before, the flag being [true],\n\t\tor after, the flag being [false], the anchor node.",
        "event": false
      }
    }
  },
  {
    "name": "NodeList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n*[NodeList]* objects are collections of nodes, usually returned by properties such as [Node.childNodes] and methods such as [document.querySelectorAll()].\n\n\nAlthough [NodeList] is not an [Array], it is possible to iterate over it with [forEach()]. It can also be converted to a real [Array] using [Array.from()].\n\nHowever, some older browsers have not implemented [NodeList.forEach()] nor [Array.from()]. This can be circumvented by using [Array.prototype.forEach()] — see this document's Example.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The number of nodes in the [NodeList].",
        "event": false
      }
    }
  },
  {
    "name": "Notification",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n  *Note:* This feature is available in Web Workers\nSecure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [Notification] interface of the Notifications API is used to configure and display desktop notifications to the user. These notifications' appearance and specific functionality vary across platforms but generally they provide a way to asynchronously provide information to the user.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "NotificationAction",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n  *Note:* This feature is available in Web Workers\nSecure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [NotificationAction] interface of the Notifications API is used to represent action buttons the user can click to interact with notifications. These buttons' appearance and specific functionality vary across platforms but generally they provide a way to asynchronously show actions to the user in a notification.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "NotificationEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe parameter passed into the [onnotificationclick] handler, the [NotificationEvent] interface represents a notification click event that is dispatched on the [ServiceWorkerGlobalScope] of a [ServiceWorker].\n\nThis interface inherits from the [ExtendableEvent] interface.",
    "abstract": false,
    "category": "interface",
    "props": {
      "notification": {
        "type": "Notification",
        "array": false,
        "dartType": "Notification",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Notification] object representing the notification that was clicked to fire the event.",
        "event": false
      },
      "action": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the string ID of the notification button the user clicked. This value returns an empty string if the user clicked the notification somewhere other than an action button, or the notification does not have a button.",
        "event": false
      }
    }
  },
  {
    "name": "OES_element_index_uint",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*OES_element_index_uint*] extension is part of the WebGL API and adds support for [gl.UNSIGNED_INT] types to [WebGLRenderingContext.drawElements()].\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "OES_fbo_render_mipmap",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [OES_fbo_render_mipmap] extension is part of the WebGL API and makes it possible to attach any level of a texture to a framebuffer object.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is only available to WebGL 1.  \n In WebGL2, the functionality of this extension is available in the WebGL 2 context by default.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "OES_standard_derivatives",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*OES_standard_derivatives*] extension is part of the WebGL API and adds the GLSL derivative functions [dFdx], [dFdy], and [fwidth].\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default. In WebGL 2, the constant is available as [gl.FRAGMENT_SHADER_DERIVATIVE_HINT] and it requires GLSL [#version 300 es].\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "OES_texture_float_linear",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*OES_texture_float_linear*] extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is available to both, WebGL1 and WebGL2 contexts.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "OES_texture_float",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*OES_texture_float*] extension is part of the WebGL API and exposes floating-point pixel types for textures.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "OES_texture_half_float_linear",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*OES_texture_half_float_linear*] extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is available to both, WebGL1 and WebGL2 contexts.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "OES_texture_half_float",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*OES_texture_half_float*] extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default. The constant in WebGL2 is [gl.HALF_FLOAT].\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "OES_vertex_array_object",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *OES_vertex_array_object* extension is part of the WebGL API and provides vertex array objects (VAOs) which encapsulate vertex array states. These objects keep pointers to vertex data and provide names for different sets of vertex data.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default and the constants and methods are available without the \"[OES]\" suffix.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "OfflineAudioCompletionEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe Web Audio API [OfflineAudioCompletionEvent] interface represents events that occur when the processing of an [OfflineAudioContext] is terminated. The [complete] event implements this interface.\n\n\n*Note*: This interface is marked as deprecated; it is still supported for legacy reasons, but it will soon be superseded when the promise version of [OfflineAudioContext.startRendering] is supported in browsers, which will no longer need it.\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "renderedBuffer": {
        "type": "AudioBuffer",
        "array": false,
        "dartType": "AudioBuffer",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [AudioBuffer] containing the result of processing an [OfflineAudioContext].",
        "event": false
      }
    }
  },
  {
    "name": "OfflineAudioContext",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [OfflineAudioContext] interface is an [AudioContext] interface representing an audio-processing graph built from linked together [AudioNode]s. In contrast with a standard [AudioContext], an [OfflineAudioContext] doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an [AudioBuffer].\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An integer representing the size of the buffer in sample-frames.",
        "event": false
      },
      "oncomplete": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] called when processing is terminated, that is when the [complete] event (of type [OfflineAudioCompletionEvent]) is raised, after the event-based version of [OfflineAudioContext.startRendering()] is used.",
        "event": true
      }
    }
  },
  {
    "name": "OffscreenCanvas",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": " \n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[OffscreenCanvas]* interface provides a canvas that can be rendered off screen. It is available in both the window and worker contexts.\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "height": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The height of the offscreen canvas.",
        "event": false
      },
      "width": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The width of the offscreen canvas.",
        "event": false
      }
    }
  },
  {
    "name": "OrientationSensor",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[OrientationSensor]* interface of the Sensor APIs is the base class for orientation sensors. This interface cannot be used directly. Instead it provides properties and methods accessed by interfaces that inherit from it. \n\nIf a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. See [Feature-Policy] for implementation instructions.",
    "abstract": true,
    "category": "interface",
    "props": {
      "quaternion": {
        "type": "FrozenArray<double>",
        "array": false,
        "dartType": "FrozenArray<double>",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a four element [Array] whose elements contain the components of the unit quaternion representing the device's orientation.",
        "event": false
      }
    }
  },
  {
    "name": "OscillatorNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[OscillatorNode]* interface represents a periodic waveform, such as a sine wave. It is an [AudioScheduledSourceNode] audio-processing module that causes a specified frequency of a given wave to be created—in effect, a constant tone.\n\nAn [OscillatorNode] is created using the [BaseAudioContext.createOscillator()] method. It always has exactly one output and no inputs. Its basic property defaults (see [AudioNode] for definitions) are:\n\n\n \n  \n   Number of inputs\n   [0]\n  \n  \n   Number of outputs\n   [1]\n  \n  \n   Channel count mode\n   [max]\n  \n  \n   Channel count\n   [2] (not used in the default count mode)\n  \n  \n   Channel interpretation\n   [speakers]\n  \n \n",
    "abstract": false,
    "category": "interface",
    "props": {
      "frequency": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An a-rate [AudioParam] representing the frequency of oscillation in hertz (though the [AudioParam] returned is read-only, the value it represents is not). The default value is 440 Hz (a standard middle-A note).",
        "event": false
      },
      "detune": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An a-rate [AudioParam] representing detuning of oscillation in cents (though the [AudioParam] returned is read-only, the value it represents is not). The default value is 0.",
        "event": false
      },
      "type": {
        "type": "OscillatorType",
        "array": false,
        "dartType": "OscillatorType",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A string which specifies the shape of waveform to play; this can be one of a number of standard values, or [custom] to use a [PeriodicWave] to describe a custom waveform. Different waves will produce different tones. Standard values are [\"sine\"], [\"square\"], [\"sawtooth\"], [\"triangle\"] and [\"custom\"]. The default is [\"sine\"].",
        "event": false
      }
    }
  },
  {
    "name": "OTPCredential",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[OTPCredential]* interface of the WebOTP API contains the attributes that are returned when a new one-time password is retreived.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "code": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The one-time password.",
        "event": false
      }
    }
  },
  {
    "name": "OverconstrainedError",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[OverconstrainedError]* interface of the Media Capture and Streams API indicates that the set of desired capabilities for the current [MediaStreamTrack] cannot currently be met. When this event is thrown on a MediaStreamTrack, it is muted until either the current constraints can be established or until satisfiable constraints are applied.",
    "abstract": false,
    "category": "interface",
    "props": {
      "constraint": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the constraint that was supplied in the constructor, meaning the constraint that was not satisfied.",
        "event": false
      }
    }
  },
  {
    "name": "OVR_multiview2",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [OVR_multiview2] extension is part of the WebGL API and adds support for rendering into multiple views simultaneously. This especially useful for virtual reality (VR) and WebXR.\n\nFor more information, see also:\n\n\n\tMultiview on WebXR\n\tthree.js multiview demo\n\tMultiview in babylon.js\n\tOptimizing Virtual Reality: Understanding Multiview\n\tMultiview WebGL Rendering for Oculus Browser 6.0+\n\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* Support depends on the system's graphics driver (Windows+ANGLE and Android are supported; Windows+GL, Mac, Linux are not supported).\n\nThis extension is only available to WebGL 2 contexts as it needs GLSL 3.00 and texture arrays.\n\nCurrently, there is no way to use multiview to render to a multisampled backbuffer, so you should create contexts with [antialias: false]. However, the Oculus browser (6+) also supports multisampling using the [OCULUS_multiview] extension. See also this WebGL issue.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PageTransitionEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[PageTransitionEvent]* event object is available inside handler functions for the [pageshow] and [pagehide] events, fired when a document is being loaded or unloaded.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "persisted": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates if the document is loading from a cache.",
        "event": false
      }
    }
  },
  {
    "name": "PannerNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\nThe [PannerNode] interface represents the position and behavior of an audio source signal in space. It is an [AudioNode] audio-processing module describing its position with right-hand Cartesian coordinates, its movement using a velocity vector and its directionality using a directionality cone.\n\n\nA [PannerNode] always has exactly one input and one output: the input can be mono or stereo but the output is always stereo (2 channels); you can't have panning effects without at least two audio channels!\n\n\n\n\n \n  \n   Number of inputs\n   [1]\n  \n  \n   Number of outputs\n   [1]\n  \n  \n   Channel count mode\n   [\"clamped-max\"]\n  \n  \n   Channel count\n   [2]\n  \n  \n   Channel interpretation\n   [\"speakers\"]\n  \n \n",
    "abstract": false,
    "category": "interface",
    "props": {
      "coneInnerAngle": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a double value describing the angle, in degrees, of a cone inside of which there will be no volume reduction.",
        "event": false
      },
      "coneOuterAngle": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A double value describing the angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the [coneOuterGain] attribute.",
        "event": false
      },
      "coneOuterGain": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A double value describing the amount of volume reduction outside the cone defined by the [coneOuterAngle] attribute. Its default value is [0], meaning that no sound can be heard.",
        "event": false
      },
      "distanceModel": {
        "type": "DistanceModelType",
        "array": false,
        "dartType": "DistanceModelType",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An enumerated value determining which algorithm to use to reduce the volume of the audio source as it moves away from the listener. Possible values are [\"linear\"], [\"inverse\"] and [\"exponential\"]. The default value is [\"inverse\"].",
        "event": false
      },
      "maxDistance": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A double value representing the maximum distance between the audio source and the listener, after which the volume is not reduced any further.",
        "event": false
      },
      "orientationX": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the horizontal position of the audio source's vector in a right-hand cartesian coordinate system. While this [AudioParam] cannot be directly changed, its value can be altered using its [value] property. The default is value is 1.",
        "event": false
      },
      "orientationY": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the vertical position of the audio source's vector in a right-hand cartesian coordinate system. The default is 0. While this [AudioParam] cannot be directly changed, its value can be altered using its [value] property. The default is value is 0.",
        "event": false
      },
      "orientationZ": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the longitudinal (back and forth) position of the audio source's vector in a right-hand cartesian coordinate system. The default is 0. While this [AudioParam] cannot be directly changed, its value can be altered using its [value] property. The default is value is 0.",
        "event": false
      },
      "panningModel": {
        "type": "PanningModelType",
        "array": false,
        "dartType": "PanningModelType",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An enumerated value determining which spatialisation algorithm to use to position the audio in 3D space.",
        "event": false
      },
      "positionX": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the horizontal position of the audio in a right-hand cartesian coordinate system. The default is 0. While this [AudioParam] cannot be directly changed, its value can be altered using its [value] property. The default is value is 0.",
        "event": false
      },
      "positionY": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the vertical position of the audio in a right-hand cartesian coordinate system. The default is 0. While this [AudioParam] cannot be directly changed, its value can be altered using its [value] property. The default is value is 0.",
        "event": false
      },
      "positionZ": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents the longitudinal (back and forth) position of the audio in a right-hand cartesian coordinate system. The default is 0. While this [AudioParam] cannot be directly changed, its value can be altered using its [value] property. The default is value is 0.",
        "event": false
      },
      "refDistance": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A double value representing the reference distance for reducing volume as the audio source moves further from the listener. For distances greater than this the volume will be reduced based on [rolloffFactor] and [distanceModel].",
        "event": false
      },
      "rolloffFactor": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A double value describing how quickly the volume is reduced as the source moves away from the listener. This value is used by all distance models.",
        "event": false
      }
    }
  },
  {
    "name": "PasswordCredential",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\nSecure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe interface of the Credential Management API provides information about a username/password pair. In supporting browsers an instance of this class may be passed in the [credential] member of the [init] object for global [WindowOrWorkerGlobalScope.fetch].\n\n\n*Note:* This interface is restricted to top-level contexts and cannot be used from an [<iframe>].\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "password": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [USVString] containing the password of the credential.",
        "event": false
      }
    }
  },
  {
    "name": "Path2D",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": " \n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[Path2D]* interface of the Canvas 2D API is used to declare a path that can then be used on a [CanvasRenderingContext2D] object. The path methods of the [CanvasRenderingContext2D] interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PayerErrors",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": " \n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n         \n        Non-standard\n        This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n      \n\nThe *[PayerErrors]* dictionary is used by the Payment Request API to indicate the presence of—and to explain how to correct—validation errors in the payer details. For each field in the payment information that fails validation, the [PayerErrors] object contains a string explaining the error.\n\nThe payer details include the payer's name, phone number, and email address.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PaymentAddress",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers. \n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n        Non-standard\n        This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n      \n\nThe *[PaymentAddress]* interface of the Payment Request API is used to store shipping or payment address information.\n\nIt may be useful to refer to the Universal Postal Union web site's Addressing S42 standard materials, which provide information about international standards for postal addresses.",
    "abstract": true,
    "category": "interface",
    "props": {
      "addressLine": {
        "type": "FrozenArray<DOMString>",
        "array": false,
        "dartType": "FrozenArray<DOMString>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "An array of [DOMString] objects providing each line of the address not included among the other properties. The exact size and content varies by country or location and can include, for example, a street name, house number, apartment number, rural delivery route, descriptive instructions, or post office box number.",
        "event": false
      },
      "country": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "A [DOMString] specifying the country in which the address is located, using the ISO-3166-1 alpha-2 standard. The string is always given in its canonical upper-case form. Some examples of valid [country] values: [\"US\"], [\"GB\"], [\"CN\"], or [\"JP\"].",
        "event": false
      },
      "city": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "A [DOMString] which contains the city or town portion of the address.",
        "event": false
      },
      "dependentLocality": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "A [DOMString] giving the dependent locality or sublocality within a city, for example, a neighborhood, borough, district, or UK dependent locality.",
        "event": false
      },
      "organization": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "A [DOMString] specifying the name of the organization, firm, company, or institution at the payment address.",
        "event": false
      },
      "phone": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "A [DOMString] specifying the telephone number of the recipient or contact person.",
        "event": false
      },
      "postalCode": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "A [DOMString] specifying a code used by a jurisdiction for mail routing, for example, the ZIP code in the United States or the PIN code in India.",
        "event": false
      },
      "recipient": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "A [DOMString] giving the name of the recipient, purchaser, or contact person at the payment address.",
        "event": false
      },
      "region": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "A [DOMString] containing the top level administrative subdivision of the country, for example a state, province, oblast, or prefecture.",
        "event": false
      },
      "sortingCode": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "A [DOMString] providing a postal sorting code such as is used in France.",
        "event": false
      }
    }
  },
  {
    "name": "PaymentCurrencyAmount",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[PaymentCurrencyAmount]* dictionary describes an amount of money in terms of both a number of units and the currency (US dollars, Euro, yen, etc.), and is part of the Payment Request API. This is used to specify the prices of both line items on a payment, using [PaymentItem] objects, and to provide the cost of a shipping option, using [PaymentShippingOption].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PaymentDetailsBase",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [*PaymentDetailsBase*] dictionary is a mixin used by the [PaymentDetailsInit] and [PaymentDetailsUpdate] dictionaries. It is never directly used by developers and is included here only to be used as the basis for those documents.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PaymentItem",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [PaymentItem] dictionary is used by the Payment Request API to describe a single line item on a payment request. This might be an item or service being purchased or a tax or other charge.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PaymentMethodChangeEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[PaymentMethodChangeEvent]* interface of the Payment Request API describes the [paymentmethodchange] event which is fired by some payment handlers when the user switches payment instruments (e.g., a user selects a \"store\" card to make a purchase while using Apple Pay).",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PaymentRequest",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe Payment Request API's *[PaymentRequest]* interface the primary access point into the API, and lets web content and apps accept payments from the end user on behalf of the operator of the site or the publisher of the app.",
    "abstract": false,
    "category": "interface",
    "props": {
      "id": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An unique identifier for a particular [PaymentRequest], which can be set via [details.id]. When none is set, it defaults to a UUID.",
        "event": false
      },
      "shippingAddress": {
        "type": "PaymentAddress",
        "array": false,
        "dartType": "PaymentAddress",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "If requested via payment options, returns the shipping address chosen by the user for the purposes of calculating shipping. This property is only populated if the constructor is called with the [requestShipping] flag set to true. Additionally, in some browsers, the parts of the address will be redacted for privacy until the user indicates they are ready to complete the transaction (i.e., they hit \"Pay\").",
        "event": false
      },
      "shippingOption": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Returns the identifier of the selected shipping option. This property is only populated if the constructor is called with the [requestShipping] flag set to true.",
        "event": false
      },
      "shippingType": {
        "type": "PaymentShippingType",
        "array": false,
        "dartType": "PaymentShippingType",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Returns the type of shipping used to fulfill the transaction. This will be one of [shipping], [delivery], [pickup], or [null] if a value was not provided in the constructor.",
        "event": false
      }
    }
  },
  {
    "name": "PaymentRequestEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[PaymentRequestEvent]* interface of the Payment Request API is the object passed to a payment handler when a [PaymentRequest] is made.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PaymentRequestUpdateEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [*PaymentRequestUpdateEvent*] interface is used for events sent to a [PaymentRequest] instance when changes are made to shipping-related information for a pending [PaymentRequest]. Those events are:\n\n\n [shippingaddresschange] Secure context\n Dispatched whenever the user changes their shipping address.\n Also available using the [onshippingaddresschange] event handler property.\n [shippingoptionchange] Secure context\n Dispatched whenever the user changes a shipping option.\n Also available using the [onshippingoptionchange] event handler property.\n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PaymentValidationErrors",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [*PaymentValidationErrors*] dictionary represents objects providing information about any and all errors that occurred while processing a payment request. When validation of the [PaymentResponse] returned by the [PaymentRequest.show()] or [PaymentResponse.retry()] methods fails, your code creates a [PaymentValidationErrors] object to pass into [retry()] so that the user agent knows what needs to be fixed and what if any error messages to display to the user.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Pbkdf2Params",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Pbkdf2Params]* dictionary of the Web Crypto API represents the object that should be passed as the [algorithm] parameter into [SubtleCrypto.deriveKey()], when using the PBKDF2 algorithm.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Performance",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Performance]* interface provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API.\n\nAn object of this type can be obtained by calling the [window.performance] read-only attribute.\n\n\n*Note:* This interface and its members are available in Web Workers via [WorkerGlobalScope.performance] , except where indicated below. Also, note that performance markers and measures are per context. If you create a mark on the main thread (or other worker), you cannot see it in a worker thread, and vice versa.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "navigation": {
        "type": "PerformanceNavigation",
        "array": false,
        "dartType": "PerformanceNavigation",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "A legacy [PerformanceNavigation] object that provides useful context about the operations included in the times listed in [timing], including whether the page was a load or a refresh, how many redirections occurred, and so forth.\n \n Not available in workers.\n \n ",
        "event": false
      },
      "timing": {
        "type": "PerformanceTiming",
        "array": false,
        "dartType": "PerformanceTiming",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "A legacy [PerformanceTiming] object containing latency-related performance information.\n \n Not available in workers.\n \n ",
        "event": false
      },
      "timeOrigin": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": false,
        "desc": "Returns the high resolution timestamp of the start time of the performance measurement.",
        "event": false
      }
    }
  },
  {
    "name": "PerformanceElementTiming",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[PerformanceElementTiming]* interface of the Element Timing API reports timing information on a specific element identified by the page author. For example it could report timing information about the main image in an article.",
    "abstract": true,
    "category": "interface",
    "props": {
      "element": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [Element] representing the element we are returning information about.",
        "event": false
      },
      "id": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] which is the [id] of the element.",
        "event": false
      },
      "identifier": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] which is the value of the [elementtiming] attribute on the element.",
        "event": false
      },
      "intersectionRect": {
        "type": "DOMRectReadOnly",
        "array": false,
        "dartType": "DOMRectReadOnly",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMRectReadOnly] which is the rectangle of the element within the viewport.",
        "event": false
      },
      "loadTime": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] with the loadTime of the element.",
        "event": false
      },
      "naturalHeight": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An unsigned 32-bit integer (unsigned long) which is the intrinsic height of the image if this is applied to an image, 0 for text.",
        "event": false
      },
      "naturalWidth": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An unsigned 32-bit integer (unsigned long) which is the intrinsic width of the image if this is applied to an image, 0 for text.",
        "event": false
      },
      "renderTime": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] with the renderTime of the element.",
        "event": false
      },
      "url": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] which is the initial URL of the resources request for images, 0 for text.",
        "event": false
      }
    }
  },
  {
    "name": "PerformanceEntry",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[PerformanceEntry]* object encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance [mark] or [measure] (for example by calling the [mark()] method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).\n\n[PerformanceEntry] instances will always be one of the following subtypes:\n\n\n [PerformanceMark]\n [PerformanceMeasure]\n [PerformanceFrameTiming]\n [PerformanceNavigationTiming]\n [PerformanceResourceTiming]\n [PerformancePaintTiming]\n\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A value that further specifies the value returned by the [PerformanceEntry.entryType] property. The value of both depends on the subtype. See property page for valid values.",
        "event": false
      },
      "entryType": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] representing the type of performance metric such as, for example, \"[mark]\". See property page for valid values.",
        "event": false
      },
      "startTime": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] representing the starting time for the performance metric.",
        "event": false
      },
      "duration": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] representing the time value of the duration of the performance event.",
        "event": false
      }
    }
  },
  {
    "name": "PerformanceEventTiming",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "The [PerformanceEventTiming] interface of the Event Timing API provides timing information for the event types listed below.\n\n\n\n [auxclick]\n [beforeinput]\n [click]\n [compositionend]\n [compositionstart]\n [compositionupdate]\n [contextmenu]\n [dblclick]\n [dragend]\n [dragenter]\n [dragleave]\n [dragover]\n [dragstart]\n [drop]\n [input]\n [keydown]\n [keypress]\n [keyup]\n [mousedown]\n [mouseenter]\n [mouseleave]\n [mouseout]\n [mouseover]\n [mouseup]\n [pointerover]\n [pointerenter]\n [pointerdown]\n [pointerup]\n [pointercancel]\n [pointerout]\n [pointerleave]\n [gotpointercapture]\n [lostpointercapture]\n [touchstart]\n [touchend]\n [touchcancel]\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PerformanceFrameTiming",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\n*[PerformanceFrameTiming]* is an abstract interface that provides frame timing data about the browser's event loop. A frame represents the amount of work a browser does in one event loop such as processing DOM events, resizing, scrolling, rendering, CSS animations, etc.. A frame rate of 60fps (frames per second) for a 60Hz refresh rate is the target for a good responsive user experience. This means the browser should process a frame in about 16.7ms.\n\nAn application can register a [PerformanceObserver] for \"[frame]\" [performance entry types] and the observer can retrieve data about the duration of each frame event. This information can be used to help identify areas that take too long to provide a good user experience.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PerformanceLongTaskTiming",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[PerformanceLongTaskTiming]* interface of the Long Tasks API reports instances of long tasks.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "attribution": {
        "type": "FrozenArray<TaskAttributionTiming>",
        "array": false,
        "dartType": "FrozenArray<TaskAttributionTiming>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a sequence of [TaskAttributionTiming] instances.",
        "event": false
      }
    }
  },
  {
    "name": "PerformanceMark",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n[*PerformanceMark*] is an abstract interface for [PerformanceEntry] objects with an [entryType] of \"[mark]\". Entries of this type are created by calling [performance.mark()] to add a named [DOMHighResTimeStamp] (the mark) to the browser's performance timeline.\n\n\n\n\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PerformanceMeasure",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n[*PerformanceMeasure*] is an abstract interface for [PerformanceEntry] objects with an [entryType] of \"[measure]\". Entries of this type are created by calling [performance.measure()] to add a named [DOMHighResTimeStamp] (the measure) between two marks to the browser's performance timeline.\n\n\n\n\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PerformanceNavigation",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\n\n  Warning\n  This interface is deprecated in the Navigation Timing Level 2 specification. Please use the [PerformanceNavigationTiming] interface instead.\n\n\nThe legacy *[PerformanceNavigation]* interface represents information about how the navigation to the current document was done.\n\nAn object of this type can be obtained by calling the [Performance.navigation] read-only attribute.",
    "abstract": true,
    "category": "interface",
    "props": {
      "type": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "An [unsigned short] which indicates how the navigation to this page was done. Possible values are:\n \n  [TYPE_NAVIGATE] (0)\n  The page was accessed by following a link, a bookmark, a form submission, or a script, or by typing the URL in the address bar.\n  [TYPE_RELOAD] (1)\n  The page was accessed by clicking the Reload button or via the [Location.reload()] method.\n  [TYPE_BACK_FORWARD] (2)\n  The page was accessed by navigating into the history.\n  [TYPE_RESERVED] (255)\n  Any other way.\n \n ",
        "event": false
      },
      "redirectCount": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "An [unsigned short] representing the number of REDIRECTs done before reaching the page.",
        "event": false
      }
    }
  },
  {
    "name": "PerformanceNavigationTiming",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[PerformanceNavigationTiming]* interface provides methods and properties to store and retrieve metrics regarding the browser's document navigation events. For example, this interface can be used to determine how much time it takes to load or unload a document.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "domComplete": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] representing a time value equal to the time immediately before the browser sets the current document readiness of the current document to complete.",
        "event": false
      },
      "domContentLoadedEventEnd": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] representing the time value equal to the time immediately after the current document's DOMContentLoaded event completes.",
        "event": false
      },
      "domContentLoadedEventStart": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] representing the time value equal to the time immediately before the user agent fires the DOMContentLoaded event at the current document.",
        "event": false
      },
      "domInteractive": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] representing a [timestamp] representing the time value equal to the time immediately before the user agent sets the current document readiness of the current document to interactive.",
        "event": false
      },
      "loadEventEnd": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] representing the time when the load event of the current document is completed.",
        "event": false
      },
      "loadEventStart": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] representing the time value equal to the time immediately before the load event of the current document is fired.",
        "event": false
      },
      "redirectCount": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A number representing the number of redirects since the last non-redirect navigation under the current browsing context.",
        "event": false
      },
      "type": {
        "type": "NavigationType",
        "array": false,
        "dartType": "NavigationType",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [string] representing the navigation type. Must be: \"[navigate]\", \"[reload]\", \"[back_forward]\" or \"[prerender]\".",
        "event": false
      },
      "unloadEventEnd": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] representing the time value equal to the time immediately after the user agent finishes the unload event of the previous document.",
        "event": false
      },
      "unloadEventStart": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] representing the time value equal to the time immediately before the user agent starts the unload event of the previous document.",
        "event": false
      }
    }
  },
  {
    "name": "PerformanceObserver",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[PerformanceObserver]* interface is used to observe performance measurement events and be notified of new performance entries as they are recorded in the browser's performance timeline.\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "supportedEntryTypes": {
        "type": "FrozenArray<DOMString>",
        "array": false,
        "dartType": "FrozenArray<DOMString>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an array of the [entryType] values supported by the user agent.",
        "event": false
      }
    }
  },
  {
    "name": "PerformanceObserverEntryList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[PerformanceObserverEntryList]* interface is a list of peformance events that were explicitly observed via the [observe()] method.\n\nNote: this interface is exposed to [Window] and [Worker].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PerformancePaintTiming",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[PerformancePaintTiming]* interface of the Paint Timing API provides timing information about \"paint\" (also called \"render\") operations during web page construction. \"Paint\" refers to conversion of the render tree to on-screen pixels.\n\nAn application can register a [PerformanceObserver] for \"[paint]\" [performance entry types] and the observer can retrieve the times that paint events occur. Use this information to help identify areas that take too long to provide a good user experience.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PerformanceResourceTiming",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[PerformanceResourceTiming]* interface enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an [XMLHttpRequest], [<SVG>], image, or script.\n\nThe interface's properties create a resource loading timeline with [high-resolution timestamps] for network events such as redirect start and end times, fetch start, DNS lookup start and end times, response start and end times, etc.. Additionally, the interface extends [PerformanceEntry] with other properties which provide data about the size of the fetched resource as well as the type of resource that initiated the fetch.\n\n\n\n\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "initiatorType": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [string] representing the type of resource that initiated the performance entry, as specified in [PerformanceResourceTiming.initiatorType].",
        "event": false
      },
      "nextHopProtocol": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [string] representing the network protocol used to fetch the resource, as identified by the ALPN Protocol ID (RFC7301).",
        "event": false
      },
      "workerStart": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMHighResTimeStamp] immediately before dispatching the [FetchEvent] if a Service Worker thread is already running, or immediately before starting the Service Worker thread if it is not already running. If the resource is not intercepted by a Service Worker the property will always return 0.",
        "event": false
      },
      "redirectStart": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] that represents the start time of the fetch which initiates the redirect.",
        "event": false
      },
      "redirectEnd": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] immediately after receiving the last byte of the response of the last redirect.",
        "event": false
      },
      "fetchStart": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] immediately before the browser starts to fetch the resource.",
        "event": false
      },
      "domainLookupStart": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] immediately before the browser starts the domain name lookup for the resource.",
        "event": false
      },
      "domainLookupEnd": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] representing the time immediately after the browser finishes the domain name lookup for the resource.",
        "event": false
      },
      "connectStart": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] immediately before the browser starts to establish the connection to the server to retrieve the resource.",
        "event": false
      },
      "connectEnd": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] immediately after the browser finishes establishing the connection to the server to retrieve the resource.",
        "event": false
      },
      "secureConnectionStart": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] immediately before the browser starts the handshake process to secure the current connection.",
        "event": false
      },
      "requestStart": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] immediately before the browser starts requesting the resource from the server.",
        "event": false
      },
      "responseStart": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] immediately after the browser receives the first byte of the response from the server.",
        "event": false
      },
      "responseEnd": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first.",
        "event": false
      },
      "transferSize": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [number] representing the size (in octets) of the fetched resource. The size includes the response header fields plus the response payload body.",
        "event": false
      },
      "encodedBodySize": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [number] representing the size (in octets) received from the fetch (HTTP or cache), of the payload body, before removing any applied content-codings.",
        "event": false
      },
      "decodedBodySize": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [number] that is the size (in octets) received from the fetch (HTTP or cache) of the message body, after removing any applied content-codings.",
        "event": false
      },
      "serverTiming": {
        "type": "FrozenArray<PerformanceServerTiming>",
        "array": false,
        "dartType": "FrozenArray<PerformanceServerTiming>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An array of [PerformanceServerTiming] entries containing server timing metrics.",
        "event": false
      }
    }
  },
  {
    "name": "PerformanceServerTiming",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": " \n  *Note:* This feature is available in Web Workers\n Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[PerformanceServerTiming]* interface surfaces server metrics that are sent with the response in the [Server-Timing] HTTP header.\n\nThis interface is restricted to the same origin, but you can use the [Timing-Allow-Origin] header to specify the domains that are allowed to access the server metrics. Note that this interface is only available in secure contexts (HTTPS) in some browsers.",
    "abstract": true,
    "category": "interface",
    "props": {
      "description": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] value of the server-specified metric description, or an empty string.",
        "event": false
      },
      "duration": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A double that contains the server-specified metric duration, or value [0.0].",
        "event": false
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] value of the server-specified metric name.",
        "event": false
      }
    }
  },
  {
    "name": "PerformanceTiming",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\n\n  Warning\n  This interface is deprecated in the Navigation Timing Level 2 specification. Please use the [PerformanceNavigationTiming] interface instead.\n\n\nThe *[PerformanceTiming]* interface is a legacy interface kept for backwards compatibility and contains properties that offer performance timing information for various events which occur during the loading and use of the current page. You get a [PerformanceTiming] object describing your page using the [window.performance.timing] property.",
    "abstract": true,
    "category": "interface",
    "props": {
      "navigationStart": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the prompt for unload terminates on the previous document in the same browsing context. If there is no previous document, this value will be the same as [PerformanceTiming.fetchStart].",
        "event": false
      },
      "unloadEventStart": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the [unload] event has been thrown, indicating the time at which the previous document in the window began to unload. If there is no previous document, or if the previous document or one of the needed redirects is not of the same origin, the value returned is [0].",
        "event": false
      },
      "unloadEventEnd": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the [unload] event handler finishes. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is [0].",
        "event": false
      },
      "redirectStart": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the first HTTP redirect starts. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is [0].",
        "event": false
      },
      "redirectEnd": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the last HTTP redirect is completed, that is when the last byte of the HTTP response has been received. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is [0].",
        "event": false
      },
      "fetchStart": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the browser is ready to fetch the document using an HTTP request. This moment is before the check to any application cache.",
        "event": false
      },
      "domainLookupStart": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the domain lookup starts. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as [PerformanceTiming.fetchStart].",
        "event": false
      },
      "domainLookupEnd": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the domain lookup is finished. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as [PerformanceTiming.fetchStart].",
        "event": false
      },
      "connectStart": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the request to open a connection is sent to the network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment start time is given. If a persistent connection is used, the value will be the same as [PerformanceTiming.fetchStart].",
        "event": false
      },
      "connectEnd": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the connection is opened network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment end time is given. If a persistent connection is used, the value will be the same as [PerformanceTiming.fetchStart]. A connection is considered as opened when all secure connection handshake, or SOCKS authentication, is terminated.",
        "event": false
      },
      "secureConnectionStart": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the secure connection handshake starts. If no such connection is requested, it returns [0].",
        "event": false
      },
      "requestStart": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the browser sent the request to obtain the actual document, from the server or from a cache. If the transport layer fails after the start of the request and the connection is reopened, this property will be set to the time corresponding to the new request.",
        "event": false
      },
      "responseStart": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the browser received the first byte of the response, from the server from a cache, or from a local resource.",
        "event": false
      },
      "responseEnd": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the browser received the last byte of the response, or when the connection is closed if this happened first, from the server, the cache, or from a local resource.",
        "event": false
      },
      "domLoading": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the parser started its work, that is when its [Document.readyState] changes to ['loading'] and the corresponding [readystatechange] event is thrown.",
        "event": false
      },
      "domInteractive": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the parser finished its work on the main document, that is when its [Document.readyState] changes to ['interactive'] and the corresponding [readystatechange] event is thrown.",
        "event": false
      },
      "domContentLoadedEventStart": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Right before the parser sent the [DOMContentLoaded] event, that is right after all the scripts that need to be executed right after parsing have been executed.",
        "event": false
      },
      "domContentLoadedEventEnd": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Right after all the scripts that need to be executed as soon as possible, in order or not, have been executed.",
        "event": false
      },
      "domComplete": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the parser finished its work on the main document, that is when its [Document.readyState] changes to ['complete'] and the corresponding [readystatechange] event is thrown.",
        "event": false
      },
      "loadEventStart": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the [load] event was sent for the current document. If this event has not yet been sent, it returns [0.]",
        "event": false
      },
      "loadEventEnd": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "When the [load] event handler terminated, that is when the load event is completed. If this event has not yet been sent, or is not yet completed, it returns [0.]",
        "event": false
      }
    }
  },
  {
    "name": "PeriodicWave",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\nThe *[PeriodicWave]* interface defines a periodic waveform that can be used to shape the output of an [OscillatorNode].\n\n\n[PeriodicWave] has no inputs or outputs; it is used to define custom oscillators when calling [OscillatorNode.setPeriodicWave()]. The [PeriodicWave] itself is created/returned by [BaseAudioContext.createPeriodicWave].",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Permissions",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe Permissions interface of the Permissions API provides the core Permission API functionality, such as methods for querying and revoking permissions",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PermissionStatus",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[PermissionStatus]* interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.",
    "abstract": true,
    "category": "interface",
    "props": {
      "state": {
        "type": "PermissionState",
        "array": false,
        "dartType": "PermissionState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the state of a requested permission; one of ['granted'], ['denied'], or ['prompt'].",
        "event": false
      }
    }
  },
  {
    "name": "PhotoCapabilities",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[PhotoCapabilities]* interface of the MediaStream Image Capture API provides available configuration options for an attached photographic device. A [PhotoCapabilities] object is retrieved by calling [ImageCapture.getPhotoCapabilities()].",
    "abstract": true,
    "category": "interface",
    "props": {
      "redEyeReduction": {
        "type": "RedEyeReduction",
        "array": false,
        "dartType": "RedEyeReduction",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns one of [\"never\"], [\"always\"], or [\"controllable\"]. The [\"controllable\"] value means the device's red-eye reduction is controllable by the user.",
        "event": false
      },
      "imageHeight": {
        "type": "MediaSettingsRange",
        "array": false,
        "dartType": "MediaSettingsRange",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [MediaSettingsRange] object indicating the image height range supported by the user agent.",
        "event": false
      },
      "imageWidth": {
        "type": "MediaSettingsRange",
        "array": false,
        "dartType": "MediaSettingsRange",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [MediaSettingsRange] object indicating the image width range supported by the user agent.",
        "event": false
      },
      "fillLightMode": {
        "type": "FillLightMode",
        "array": true,
        "dartType": "FillLightMode",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an array of available fill light options. Options may include [auto], [off], or [flash].",
        "event": false
      }
    }
  },
  {
    "name": "PictureInPictureEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[PictureInPictureEvent]* interface represents picture-in-picture-related events, including [enterpictureinpicture], [leavepictureinpicture] and [resize]\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PictureInPictureWindow",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*PictureInPictureWindow*] interface represents an object able to programmatically obtain the *[width]* and [*height*] and *[resize event]* of the floating video window.\n\nAn object with this interface is obtained using the [HTMLVideoElement.requestPictureInPicture()] promise return value.",
    "abstract": true,
    "category": "interface",
    "props": {
      "width": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Determines the width of the floating video window.",
        "event": false
      },
      "height": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Determines the height of the floating video window.",
        "event": false
      }
    }
  },
  {
    "name": "Plugin",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe [Plugin] interface provides information about a browser plugin.\n\n\n*Note*: Own properties of [Plugin] objects are no longer enumerable in the latest browser versions.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "description": {
        "type": "undefined",
        "array": false,
        "dartType": "undefined",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A human readable description of the plugin.",
        "event": false
      },
      "filename": {
        "type": "undefined",
        "array": false,
        "dartType": "undefined",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The filename of the plugin file.",
        "event": false
      },
      "name": {
        "type": "undefined",
        "array": false,
        "dartType": "undefined",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The name of the plugin.",
        "event": false
      }
    }
  },
  {
    "name": "PluginArray",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe [PluginArray] interface is used to store a list of [Plugin] objects describing the available plugins; it's returned by the [navigator.plugins] property. The [PluginArray] is not a JavaScript array, but has the [length] property and supports accessing individual items using bracket notation ([plugins[2]]), as well as via [item(index)] and [namedItem(\"name\")] methods.\n\n\n*Note*: Own properties of [PluginArray] objects are no longer enumerable in the latest browser versions.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The number of plugins in the array.",
        "event": false
      }
    }
  },
  {
    "name": "Point",
    "experimental": false,
    "deprecated": false,
    "standard": false,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n        Non-standard\n        This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n      \n\n*[Point]* is an interface, which existed only briefly in the CSS Transforms Level 1 specification, which represents a point in 2-dimensional space. It is non-standard, not broadly compatible, and should not be used.\n\n\nAlthough it is not directly related to this defunct interface, you are probably looking for [DOMPoint], which is part of the Geometry Interfaces Module Level 1 specification.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PointerEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[PointerEvent]* interface represents the state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.\n\nA pointer is a hardware agnostic representation of input devices (such as a mouse, pen or contact point on a touch-enable surface). The pointer can target a specific coordinate (or set of coordinates) on the contact surface such as a screen.\n\nA pointer's hit test is the process a browser uses to determine the target element for a pointer event. Typically, this is determined by considering the pointer's location and also the visual layout of elements in a document on screen media.",
    "abstract": true,
    "category": "interface",
    "props": {
      "pointerId": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A unique identifier for the pointer causing the event.",
        "event": false
      },
      "width": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer.",
        "event": false
      },
      "height": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer.",
        "event": false
      },
      "pressure": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The normalized pressure of the pointer input in the range [0] to [1], where [0] and [1] represent the minimum and maximum pressure the hardware is capable of detecting, respectively.",
        "event": false
      },
      "tangentialPressure": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The normalized tangential pressure of the pointer input (also known as barrel pressure or cylinder stress) in the range [-1] to [1], where [0] is the neutral position of the control.",
        "event": false
      },
      "tiltX": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The plane angle (in degrees, in the range of [-90] to [90]) between the Y–Z plane and the plane containing both the pointer (e.g. pen stylus) axis and the Y axis.",
        "event": false
      },
      "tiltY": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The plane angle (in degrees, in the range of [-90] to [90]) between the X–Z plane and the plane containing both the pointer (e.g. pen stylus) axis and the X axis.",
        "event": false
      },
      "twist": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The clockwise rotation of the pointer (e.g. pen stylus) around its major axis in degrees, with a value in the range [0] to [359].",
        "event": false
      },
      "pointerType": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates the device type that caused the event (mouse, pen, touch, etc.)",
        "event": false
      },
      "isPrimary": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates if the pointer represents the primary pointer of this pointer type.",
        "event": false
      }
    }
  },
  {
    "name": "PopStateEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n[*PopStateEvent*] is an event handler for the\n  [popstate] event on the window.\n\nA [popstate] event is dispatched to the window every time the active history\n  entry changes between two history entries for the same document. If the history entry\n  being activated was created by a call to [history.pushState()] or was\n  affected by a call to [history.replaceState()], the [popstate]\n  event's [state] property contains a copy of the history entry's state object.\n\n\n\n  *Note*: Just calling [history.pushState()] or\n    [history.replaceState()] won't trigger a [popstate] event. The\n    [popstate] event is only triggered by doing a browser action such as a\n    clicking on the back button (or calling [history.back()] in JavaScript).\n    And the event is only triggered when the user navigates between two history entries\n    for the same document.\n\n\n\n  *Note*: Browsers used to handle the [popstate] event\n    differently on page load, but now they behave the same. Firefox never emitted a\n    popstate event on page load. Chrome did until version 34, while Safari did until\n    version 10.0.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PositionOptions",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[PositionOptions]* dictionary describes an object containing option properties to pass as a parameter of [Geolocation.getCurrentPosition()] and [Geolocation.watchPosition()].",
    "abstract": true,
    "category": "interface",
    "props": {
      "enableHighAccuracy": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Boolean] that indicates the application would like to receive the best possible results. If [true] and if the device is able to provide a more accurate position, it will do so. Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example). On the other hand, if [false], the device can take the liberty to save resources by responding more quickly and/or using less power. Default: [false].",
        "event": false,
        "default": "false"
      },
      "timeout": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a positive [long] value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position. The default value is [Infinity], meaning that [getCurrentPosition()] won't return until the position is available.",
        "event": false,
        "default": "0xFFFFFFFF"
      },
      "maximumAge": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a positive [long] value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return. If set to [0], it means that the device cannot use a cached position and must attempt to retrieve the real current position. If set to [Infinity] the device must return a cached position regardless of its age. Default: 0.",
        "event": false,
        "default": "0"
      }
    }
  },
  {
    "name": "Presentation",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\nSecure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [Presentation] can be defined as two possible user agents in the context: Controlling user agent and Receiving user agent.\n\nIn controlling browsing context, the [Presentation] interface provides a mechanism to override the browser default behavior of launching presentation to external screen. In receiving browsing context, [Presentation] interface provides the access to the available presentation connections.",
    "abstract": true,
    "category": "interface",
    "props": {
      "defaultRequest": {
        "type": "PresentationRequest",
        "array": false,
        "dartType": "PresentationRequest",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "In a controlling user agent, the [defaultRequest] attribute MUST return the default presentation request if any, [null] otherwise. In a receiving browsing context, it MUST return [null].",
        "event": false
      },
      "receiver": {
        "type": "PresentationReceiver",
        "array": false,
        "dartType": "PresentationReceiver",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "In a receiving user agent, the [receiver] attribute MUST return the [PresentationReceiver] instance associated with the receiving browsing context and created by the receiving user agent when the receiving browsing context is created.",
        "event": false
      }
    }
  },
  {
    "name": "PresentationAvailability",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\nSecure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nA [PresentationAvailability] object is associated with available presentation displays and represents the presentation display availability for a presentation request. If the controlling user agent can monitor the list of available presentation displays in the background (without a pending request to [start()]), the [PresentationAvailability] object MUST be implemented in a controlling browsing context.\n\nThe [value] attribute MUST return the last value it was set to. The value is updated by the monitor the list of available presentation displays algorithm.\n\nThe [onchange] attribute is an event handler whose corresponding event handler event type is [change].",
    "abstract": true,
    "category": "interface",
    "props": {
      "value": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A boolean value indicating whether the given presentation display is available. The [value] attribute MUST return the last value it was set to.",
        "event": false
      },
      "onchange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates that the availability of the presentation display has changed.",
        "event": false
      }
    }
  },
  {
    "name": "PresentationConnection",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\nSecure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[PresentationConnection]* interface of the Presentation API provides methods and properties for managing a single presentation. Each presentation connection is represented by a [PresentationConnection] object. Both the controlling user agent and receiving user agent MUST implement [PresentationConnection].",
    "abstract": true,
    "category": "interface",
    "props": {
      "binaryType": {
        "type": "BinaryType",
        "array": false,
        "dartType": "BinaryType",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns either blob or arrayBuffer. When a [PresentationConnection] object is created, its [binaryType] IDL attribute MUST be set to the string \" [arraybuffer]\".",
        "event": false
      },
      "id": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Provides the presentation connection identifier.",
        "event": false
      },
      "state": {
        "type": "PresentationConnectionState",
        "array": false,
        "dartType": "PresentationConnectionState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the presentation connection's current state.",
        "event": false
      },
      "url": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the URL used to create or reconnect to the presentation.",
        "event": false
      },
      "onclose": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Fired when there is a call to [PresentationConnection.close()].",
        "event": false
      },
      "onconnect": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Fired when a presentation connection is established.",
        "event": false
      },
      "onmessage": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Fired when there is a call to [PresentationConnection.send()].",
        "event": false
      }
    }
  },
  {
    "name": "PresentationConnectionAvailableEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\nSecure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[PresentationConnectionAvailableEvent]* interface of the Presentation API is fired on a [PresentationRequest] when a connection associated with the object is created.\n\nA controlling user agent fires a trusted event named [connectionavailable] on a [PresentationRequest] when a connection associated with the object is created. It is fired at the [PresentationRequest] instance, using the [PresentationConnectionAvailableEvent] interface, with the [connection] attribute set to the [PresentationConnection] object that was created. The event is fired for each connection that is created for the controller, either by the controller calling [start()] or [reconnect()], or by the controlling user agent creating a connection on the controller's behalf via [defaultRequest].",
    "abstract": false,
    "category": "interface",
    "props": {
      "connection": {
        "type": "PresentationConnection",
        "array": false,
        "dartType": "PresentationConnection",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a references to the [PresentationConnection] object that fired the event.",
        "event": false
      }
    }
  },
  {
    "name": "PresentationConnectionCloseEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\nSecure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[PresentationConnectionCloseEvent]* interface of the Presentation API is fired on a [PresentationConnection] when it is closed.",
    "abstract": false,
    "category": "interface",
    "props": {
      "message": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A human-readable message that provides more information about why the connection was closed.",
        "event": false
      },
      "reason": {
        "type": "PresentationConnectionCloseReason",
        "array": false,
        "dartType": "PresentationConnectionCloseReason",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates why the connection was closed. This property takes one of the following values: [error], [closed], or [wentaway].",
        "event": false
      }
    }
  },
  {
    "name": "PresentationConnectionList",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\n[PresentationConnectionList] is the collection of incoming presentation connections.",
    "abstract": true,
    "category": "interface",
    "props": {
      "connections": {
        "type": "FrozenArray<PresentationConnection>",
        "array": false,
        "dartType": "FrozenArray<PresentationConnection>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the non-terminated set of [PresentationConnection]s in the set of presentation controllers.",
        "event": false
      }
    }
  },
  {
    "name": "PresentationReceiver",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[PresentationReceiver]* interface of the Presentation API provides a means for a receiving browsing context to access controlling browsing contexts and communicate with them.",
    "abstract": true,
    "category": "interface",
    "props": {
      "connectionList": {
        "type": "Promise<PresentationConnectionList>",
        "array": false,
        "dartType": "Promise<PresentationConnectionList>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Promise] that resolves with a [PresentationConnectionList] object containing a list of incoming presentation connections.",
        "event": false
      }
    }
  },
  {
    "name": "PresentationRequest",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\nSecure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nA [PresentationRequest] object is used to initiate or reconnect to a presentation made by a controlling browsing context. The [PresentationRequest] object MUST be implemented in a controlling browsing context provided by a controlling user agent.\n\nWhen a [PresentationRequest] is constructed, the given [urls] MUST be used as the list of presentation request URLs which are each a possible presentation URL for the [PresentationRequest] instance.",
    "abstract": false,
    "category": "interface",
    "props": {
      "onconnectionavailable": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Fires on a successful call to [PresentationRequest.start()] or [PresentationRequest.join()]. This method provides a object with a reference to the created or joined object.",
        "event": false
      }
    }
  },
  {
    "name": "ProcessingInstruction",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*ProcessingInstruction*] interface represents a processing instruction; that is, a [Node] which embeds an instruction targeting a specific application but that can be ignored by any other applications which don't recognize the instruction.\n\nA processing instruction is different from the XML declaration.\n\n\nUser-defined processing instructions cannot begin with \"[xml]\", as [xml]-prefixed processing-instruction target names are reserved by the XML specification for particular, standard uses (see, for example, [<?xml-stylesheet ?>]).\n\n\nThe [ProcessingInstruction] interface inherits methods and properties from [Node].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "ProgressEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ProgressEvent]* interface represents events measuring progress of an underlying process, like an HTTP request (for an [XMLHttpRequest], or the loading of the underlying resource of an [<img>], [<audio>], [<video>], [<style>] or [<link>]).\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "lengthComputable": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] flag indicating if the total work to be done, and the amount of work already done, by the underlying process is calculable. In other words, it tells if the progress is measurable or not.",
        "event": false
      },
      "loaded": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A 64-bit unsigned integer value indicating the amount of work already performed by the underlying process. The ratio of work done can be calculated by dividing [total] by the value of this property. When downloading a resource using HTTP, this only counts the body of the HTTP message, and doesn't include headers and other overhead.",
        "event": false
      },
      "total": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A 64-bit unsigned integer representing the total amount of work that the underlying process is in the progress of performing. When downloading a resource using HTTP, this is the [Content-Length] (the size of the body of the message), and doesn't include the headers and other overhead.",
        "event": false
      }
    }
  },
  {
    "name": "PromiseRejectionEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[PromiseRejectionEvent]* interface represents events which are sent to the global script context when JavaScript [Promise]s are rejected. These events are particularly useful for telemetry and debugging purposes.\n\nFor details on promise rejection events, see Promise rejection events in Using Promises.\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "promise": {
        "type": "Promise<any>",
        "array": false,
        "dartType": "Promise<any>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The JavaScript [Promise] that was rejected.",
        "event": false
      },
      "reason": {
        "type": "any",
        "array": false,
        "dartType": "any",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A value or [Object] indicating why the promise was rejected, as passed to [Promise.reject()].",
        "event": false
      }
    }
  },
  {
    "name": "PublicKeyCredential",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [*PublicKeyCredential*] interface provides information about a public key / private key pair, which is a credential for logging in to a service using an un-phishable and data-breach resistant asymmetric key pair instead of a password. It inherits from [Credential], and was created by the Web Authentication API extension to the Credential Management API. Other interfaces that inherit from [Credential] are [PasswordCredential] and [FederatedCredential].\n\n\n*Note:* This API is restricted to top-level contexts. Use from within an [<iframe>] element will not have any effect.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Inherited from [Credential]. Always set to [public-key] for [PublicKeyCredential] instances.",
        "event": false
      },
      "id": {
        "type": "BufferSource",
        "array": false,
        "dartType": "BufferSource",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Inherited from [Credential] and overridden to be the base64url encoding of [PublicKeyCredential.rawId].",
        "event": false
      },
      "rawId": {
        "type": "ArrayBuffer",
        "array": false,
        "dartType": "ArrayBuffer",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [ArrayBuffer] that holds the globally unique identifier for this [PublicKeyCredential]. This identifier can be used to look up credentials for future calls to [CredentialsContainer.get].",
        "event": false
      },
      "response": {
        "type": "AuthenticatorResponse",
        "array": false,
        "dartType": "AuthenticatorResponse",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An instance of an [AuthenticatorResponse] object. It is either of type [AuthenticatorAttestationResponse] if the [PublicKeyCredential] was the results of a [navigator.credentials.create()] call, or of type [AuthenticatorAssertionResponse] if the [PublicKeyCredential] was the result of a [navigator.credentials.get()] call.",
        "event": false
      }
    }
  },
  {
    "name": "PublicKeyCredentialCreationOptions",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [*PublicKeyCredentialCreationOptions*] dictionary of the Web Authentication API holds options passed to [navigators.credentials.create()] in order to create a [PublicKeyCredential].",
    "abstract": true,
    "category": "interface",
    "props": {
      "rp": {
        "type": "PublicKeyCredentialRpEntity",
        "array": false,
        "dartType": "PublicKeyCredentialRpEntity",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An object describing the relying party which requested the credential creation.",
        "event": false
      },
      "user": {
        "type": "PublicKeyCredentialUserEntity",
        "array": false,
        "dartType": "PublicKeyCredentialUserEntity",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An object describing the user account for which the credential is generated.",
        "event": false
      },
      "challenge": {
        "type": "BufferSource",
        "array": false,
        "dartType": "BufferSource",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [BufferSource], emitted by the relying party's server and used as a cryptographic challenge. This value will be signed by the authenticator and the signature will be sent back as part of [AuthenticatorAttestationResponse.attestationObject].",
        "event": false
      },
      "pubKeyCredParams": {
        "type": "PublicKeyCredentialParameters",
        "array": true,
        "dartType": "PublicKeyCredentialParameters",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [Array] of element which specify the desired features of the credential, including its type and the algorithm used for the cryptographic signature operations. This array is sorted by descending order of preference.",
        "event": false
      },
      "timeout": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A numerical hint, in milliseconds, which indicates the time the caller is willing to wait for the creation operation to complete. This hint may be overridden by the browser.",
        "event": false
      },
      "excludeCredentials": {
        "type": "PublicKeyCredentialDescriptor",
        "array": true,
        "dartType": "PublicKeyCredentialDescriptor",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [Array] of descriptors for existing credentials. This is provided by the relying party to avoid creating new public key credentials for an existing user who already have some.",
        "event": false,
        "default": "[]"
      },
      "authenticatorSelection": {
        "type": "AuthenticatorSelectionCriteria",
        "array": false,
        "dartType": "AuthenticatorSelectionCriteria",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An object whose properties are criteria used to filter out the potential authenticators for the creation operation.",
        "event": false
      },
      "attestation": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [String] which indicates how the attestation (for the authenticator's origin) should be transported.",
        "event": false,
        "default": "\"none\""
      },
      "extensions": {
        "type": "AuthenticationExtensionsClientInputs",
        "array": false,
        "dartType": "AuthenticationExtensionsClientInputs",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An object with several client extensions' inputs. Those extensions are used to request additional processing (e.g. dealing with legacy FIDO APIs credentials, prompting a specific text on the authenticator, etc.).",
        "event": false
      }
    }
  },
  {
    "name": "PublicKeyCredentialRequestOptions",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [*PublicKeyCredentialRequestOptions*] dictionary of the Web Authentication API holds the options passed to [navigator.credentials.get()] in order to fetch a given [PublicKeyCredential].",
    "abstract": true,
    "category": "interface",
    "props": {
      "challenge": {
        "type": "BufferSource",
        "array": false,
        "dartType": "BufferSource",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [BufferSource], emitted by the relying party's server and used as a cryptographic challenge. This value will be signed by the authenticator and the signature will be sent back as part of [AuthenticatorAssertionResponse.signature].",
        "event": false
      },
      "timeout": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A numerical hint, in milliseconds, which indicates the time the caller is willing to wait for the retrieval operation to complete. This hint may be overridden by the browser.",
        "event": false
      },
      "rpId": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [USVString] which indicates the relying party's identifier (ex. [\"login.example.org\"]). If this option is not provided, the client will use the current origin's domain.",
        "event": false
      },
      "allowCredentials": {
        "type": "PublicKeyCredentialDescriptor",
        "array": true,
        "dartType": "PublicKeyCredentialDescriptor",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [Array] of credentials descriptor which restricts the acceptable existing credentials for retrieval.",
        "event": false,
        "default": "[]"
      },
      "userVerification": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A string qualifying how the user verification should be part of the authentication process.",
        "event": false,
        "default": "\"preferred\""
      },
      "extensions": {
        "type": "AuthenticationExtensionsClientInputs",
        "array": false,
        "dartType": "AuthenticationExtensionsClientInputs",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An object with several client extensions' inputs. Those extensions are used to request additional processing (e.g. dealing with legacy FIDO APIs credentials, prompting a specific text on the authenticator, etc.).",
        "event": false
      }
    }
  },
  {
    "name": "PushEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[PushEvent]* interface of the Push API represents a push message that has been received. This event is sent to the global scope of a [ServiceWorker]. It contains the information sent from an application server to a [PushSubscription].",
    "abstract": false,
    "category": "interface",
    "props": {
      "data": {
        "type": "PushMessageData",
        "array": false,
        "dartType": "PushMessageData",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to a [PushMessageData] object containing data sent to the [PushSubscription].",
        "event": false
      }
    }
  },
  {
    "name": "PushManager",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[PushManager]* interface of the Push API provides a way to receive notifications from third-party servers as well as request URLs for push notifications.\n\nThis interface is accessed via the [ServiceWorkerRegistration.pushManager] property.\n\n\n*Note*: This interface replaces functionality previously offered by the obsolete [PushRegistrationManager] interface.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "supportedContentEncodings": {
        "type": "FrozenArray<DOMString>",
        "array": false,
        "dartType": "FrozenArray<DOMString>",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an array of supported content codings that can be used to encrypt the payload of a push message.",
        "event": false
      }
    }
  },
  {
    "name": "PushMessageData",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [*PushMessageData*] interface of the Push API provides methods which let you retrieve the push data sent by a server in various formats.\n\nUnlike the similar methods in the Fetch API, which only allow the method to be invoked once, these methods can be called multiple times.\n\nMessages received through the Push API are sent encrypted by push services and then automatically decrypted by browsers before they are made accessible through the methods of the [PushMessageData] interface.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "PushSubscription",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n \n\nThe [PushSubscription] interface of the Push API provides a subcription's URL endpoint and allows unsubscription from a push service.\n\nAn instance of this interface can be serialized.",
    "abstract": true,
    "category": "interface",
    "props": {
      "endpoint": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [USVString] containing the endpoint associated with the push subscription.",
        "event": false
      },
      "expirationTime": {
        "type": "DOMTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMHighResTimeStamp] of the subscription expiration time associated with the push subscription, if there is one, or null otherwise. ",
        "event": false
      },
      "options": {
        "type": "PushSubscriptionOptions",
        "array": false,
        "dartType": "PushSubscriptionOptions",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An object containing the options used to create the subscription.",
        "event": false
      }
    }
  },
  {
    "name": "PushSubscriptionOptions",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[PushSubscriptionOptions]* interface of the Push API represents the options associated with a push subscription.\n\nThe read-only [PushSubscriptionOptions] object is returned by calling [PushSubscription.options] on a [PushSubscription]. This interface has no constructor of its own.",
    "abstract": true,
    "category": "interface",
    "props": {
      "userVisibleOnly": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] indicating that the returned push\n    subscription will only be used for messages whose effect is made visible to the user.",
        "event": false
      },
      "applicationServerKey": {
        "type": "ArrayBuffer",
        "array": false,
        "dartType": "ArrayBuffer",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A public key your push server will use to send\n    messages to client apps via a push server.",
        "event": false
      }
    }
  },
  {
    "name": "RadioNodeList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[RadioNodeList]* interface represents a collection of radio elements in a [<form>] or a [<fieldset>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "value": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "If the underlying element collection contains radio buttons, the [value] property represents the checked radio button. On retrieving the [value] property, the [value] of the currently [checked] radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in [checked] state, the empty string is returned. On setting the [value] property, the first radio button input element whose [value] property is equal to the new value will be set to [checked].",
        "event": false
      }
    }
  },
  {
    "name": "Range",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Range]* interface represents a fragment of a document that can contain nodes and parts of text nodes.\n\nA range can be created by using the [Document.createRange()] method. Range objects can also be retrieved by using the [getRangeAt()] method of the [Selection] object or the [caretRangeFromPoint()] method of the [Document] object.\n\nThere also is the [Range()] constructor available.",
    "abstract": false,
    "category": "interface",
    "props": {
      "collapsed": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] indicating whether the range's start and end points are at the same position.",
        "event": false
      },
      "commonAncestorContainer": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the deepest [Node] that contains the [startContainer] and [endContainer] nodes.",
        "event": false
      },
      "endContainer": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [Node] within which the [Range] ends.",
        "event": false
      },
      "endOffset": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a number representing where in the [endContainer] the [Range] ends.",
        "event": false
      },
      "startContainer": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [Node] within which the [Range] starts.",
        "event": false
      },
      "startOffset": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a number representing where in the [startContainer] the [Range] starts.",
        "event": false
      }
    }
  },
  {
    "name": "ReadableByteStreamController",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[ReadableByteStreamController]* interface of the Streams API represents a controller allowing control of a [ReadableStream]'s state and internal queue. Byte stream controllers are for byte streams.",
    "abstract": false,
    "category": "interface",
    "props": {
      "byobRequest": {
        "type": "ReadableStreamBYOBRequest",
        "array": false,
        "dartType": "ReadableStreamBYOBRequest",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the current BYOB pull request.",
        "event": false
      },
      "desiredSize": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the desired size required to fill the stream's internal queue.",
        "event": false
      }
    }
  },
  {
    "name": "ReadableStream",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [ReadableStream] interface of the Streams API represents a readable stream of byte data. The Fetch API offers a concrete instance of a [ReadableStream] through the [body] property of a [Response] object.",
    "abstract": false,
    "category": "interface",
    "props": {
      "locked": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [locked] getter returns whether or not the readable stream is locked to a reader.",
        "event": false
      }
    }
  },
  {
    "name": "ReadableStreamBYOBReader",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [ReadableStreamBYOBReader] interface of the Streams API represents a BYOB (\"bring your own buffer\") reader that can be used to read stream data supplied by the developer (e.g. a custom [ReadableStream()] constructor).",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "ReadableStreamDefaultController",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ReadableStreamDefaultController]* interface of the Streams API represents a controller allowing control of a [ReadableStream]'s state and internal queue. Default controllers are for streams that are not byte streams. ",
    "abstract": false,
    "category": "interface",
    "props": {
      "desiredSize": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the desired size required to fill the stream's internal queue.",
        "event": false
      }
    }
  },
  {
    "name": "ReadableStreamDefaultReader",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ReadableStreamDefaultReader]* interface of the Streams API represents a default reader that can be used to read stream data supplied from a network (e.g. a fetch request). ",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RelativeOrientationSensor",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[RelativeOrientationSensor]* interface of the Sensor APIs describes the device's physical orientation without regard to the Earth's reference coordinate system. \n\nTo use this sensor, the user must grant permission to the ['accelerometer'], and ['gyroscope'] device sensors through the [Permissions] API.\n\nIf a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. See [Feature-Policy] for implementation instructions.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Report",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [Report] interface of the Reporting API represents a single report.\n\nReports can be accessed in a number of ways:\n\n\n Via the [ReportingObserver.takeRecords()] method — this returns all reports in an observer's report queue, and then empties the queue.\n Via the [reports] parameter of the callback function passed into the [ReportingObserver()] constructor upon creation of a new observer instance. This contains the list of reports currently contained in the observer's report queue.\n By sending requests to the endpoints defined via the [Report-To] HTTP header.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "body": {
        "type": "ReportBody",
        "array": false,
        "dartType": "ReportBody",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The body of the report, which is a [ReportBody] object containing the detailed report information.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The type of report generated, e.g. [deprecation] or [intervention].",
        "event": false
      },
      "url": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The URL of the document that generated the report.",
        "event": false
      }
    }
  },
  {
    "name": "ReportingObserver",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [ReportingObserver] interface of the Reporting API allows you to collect and access reports.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "ReportingObserverOptions",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [ReportingObserverOptions] dictionary of the Reporting API allows options to be set in the constructor when creating a [ReportingObserver].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Request",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Request]* interface of the Fetch API represents a resource request.\n\nYou can create a new [Request] object using the [Request()] constructor, but you are more likely to encounter a [Request] object being returned as the result of another API operation, such as a service worker [FetchEvent.request].",
    "abstract": false,
    "category": "interface",
    "props": {
      "cache": {
        "type": "RequestCache",
        "array": false,
        "dartType": "RequestCache",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the cache mode of the request (e.g., [default], [reload], [no-cache]).",
        "event": false
      },
      "credentials": {
        "type": "RequestCredentials",
        "array": false,
        "dartType": "RequestCredentials",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the credentials of the request (e.g., [omit], [same-origin], [include]). The default is [same-origin].",
        "event": false
      },
      "destination": {
        "type": "RequestDestination",
        "array": false,
        "dartType": "RequestDestination",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a string from the [RequestDestination] enum describing the request's destination. This is a string indicating the type of content being requested.",
        "event": false
      },
      "headers": {
        "type": "Headers",
        "array": false,
        "dartType": "Headers",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the associated [Headers] object of the request.",
        "event": false
      },
      "integrity": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the subresource integrity value of the request (e.g., [sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=]).",
        "event": false
      },
      "method": {
        "type": "ByteString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the request's method ([GET], [POST], etc.)",
        "event": false
      },
      "mode": {
        "type": "RequestMode",
        "array": false,
        "dartType": "RequestMode",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the mode of the request (e.g., [cors], [no-cors], [same-origin], [navigate].)",
        "event": false
      },
      "redirect": {
        "type": "RequestRedirect",
        "array": false,
        "dartType": "RequestRedirect",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the mode for how redirects are handled. It may be one of [follow], [error], or [manual].",
        "event": false
      },
      "referrer": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the referrer of the request (e.g., [client]).",
        "event": false
      },
      "referrerPolicy": {
        "type": "ReferrerPolicy",
        "array": false,
        "dartType": "ReferrerPolicy",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the referrer policy of the request (e.g., [no-referrer]).",
        "event": false
      },
      "url": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the URL of the request.",
        "event": false
      }
    }
  },
  {
    "name": "ResizeObserver",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ResizeObserver]* interface reports changes to the dimensions of an [Element]'s content or border box, or the bounding box of an [SVGElement].\n\n\n*Note*: The content box is the box in which content can be placed, meaning the border box minus the padding and border width. The border box encompasses the content, padding, and border. See The box model for further explanation.\n\n\n[ResizeObserver] avoids infinite callback loops and cyclic dependencies that are often created when resizing via a callback function. It does this by only processing elements deeper in the DOM in subsequent frames. Implementations should, if they follow the specification, invoke resize events before paint and after layout.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "ResizeObserverEntry",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ResizeObserverEntry]* interface represents the object passed to the [ResizeObserver()] constructor's callback function, which allows you to access the new dimensions of the [Element] or [SVGElement] being observed.",
    "abstract": true,
    "category": "interface",
    "props": {
      "borderBoxSize": {
        "type": "ResizeObserverSize",
        "array": true,
        "dartType": "ResizeObserverSize",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An object containing the new border box size of the observed element when the callback is run.",
        "event": false
      },
      "contentBoxSize": {
        "type": "ResizeObserverSize",
        "array": true,
        "dartType": "ResizeObserverSize",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An object containing the new content box size of the observed element when the callback is run.",
        "event": false
      },
      "devicePixelContentBoxSize": {
        "type": "ResizeObserverSize",
        "array": true,
        "dartType": "ResizeObserverSize",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An object containing the new content box size in device pixels of the observed element when the callback is run.",
        "event": false
      },
      "contentRect": {
        "type": "DOMRectReadOnly",
        "array": false,
        "dartType": "DOMRectReadOnly",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMRectReadOnly] object containing the new size of the observed element when the callback is run. Note that this is better supported than the above two properties, but it is left over from an earlier implementation of the Resize Observer API, is still included in the spec for web compat reasons, and may be deprecated in future versions.",
        "event": false
      },
      "target": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A reference to the [Element] or [SVGElement] being observed.",
        "event": false
      }
    }
  },
  {
    "name": "ResizeObserverSize",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ResizeObserverSize]* interface of the [Resize Observer API] is used by the [ResizeObserverEntry] interface to access the box sizing properties of the element being observed.\n\n\n  Note:\n  In multi-column layout, which is a fragmented context, the sizing returned by [ResizeObserverSize] will be the size of the first column.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "blockSize": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The length of the observed element's border box in the block dimension. For boxes with a horizontal [writing-mode], this is the vertical dimension, or height; if the writing-mode is vertical, this is the horizontal dimension, or width.\n  ",
        "event": false
      },
      "inlineSize": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The length of the observed element's border box in the inline dimension. For boxes with a horizontal [writing-mode], this is the horizontal dimension, or width; if the writing-mode is vertical, this is the vertical dimension, or height.\n  ",
        "event": false
      }
    }
  },
  {
    "name": "Response",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Response]* interface of the Fetch API represents the response to a request.\n\nYou can create a new [Response] object using the [Response.Response()] constructor, but you are more likely to encounter a [Response] object being returned as the result of another API operation—for example, a service worker [Fetchevent.respondWith], or a simple [WindowOrWorkerGlobalScope.fetch()].",
    "abstract": false,
    "category": "interface",
    "props": {
      "headers": {
        "type": "Headers",
        "array": false,
        "dartType": "Headers",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [Headers] object associated with the response.",
        "event": false
      },
      "ok": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A boolean indicating whether the response was successful (status in the range [200]–[299]) or not.",
        "event": false
      },
      "redirected": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates whether or not the response is the result of a redirect (that is, its URL list has more than one entry).",
        "event": false
      },
      "status": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The status code of the response. (This will be [200] for a success).",
        "event": false,
        "default": "302)"
      },
      "statusText": {
        "type": "ByteString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The status message corresponding to the status code. (e.g., [OK] for [200]).",
        "event": false
      },
      "type": {
        "type": "ResponseType",
        "array": false,
        "dartType": "ResponseType",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The type of the response (e.g., [basic], [cors]).",
        "event": false
      },
      "url": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The URL of the response.",
        "event": false
      }
    }
  },
  {
    "name": "RsaHashedImportParams",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[RsaHashedImportParams]* dictionary of the Web Crypto API represents the object that should be passed as the [algorithm] parameter into [SubtleCrypto.importKey()] or [SubtleCrypto.unwrapKey()], when importing any RSA-based key pair: that is, when the algorithm is identified as any of RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RsaHashedKeyGenParams",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[RsaHashedKeyGenParams]* dictionary of the Web Crypto API represents the object that should be passed as the [algorithm] parameter into [SubtleCrypto.generateKey()], when generating any RSA-based key pair: that is, when the algorithm is identified as any of RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RsaOaepParams",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[RsaOaepParams]* dictionary of the Web Crypto API represents the object that should be passed as the [algorithm] parameter into [SubtleCrypto.encrypt()], [SubtleCrypto.decrypt()], [SubtleCrypto.wrapKey()], or [SubtleCrypto.unwrapKey()], when using the RSA_OAEP algorithm.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RsaPssParams",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[RsaPssParams]* dictionary of the Web Crypto API represents the object that should be passed as the [algorithm] parameter into [SubtleCrypto.sign()] or [SubtleCrypto.verify()], when using the RSA-PSS algorithm.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCAnswerOptions",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*RTCAnswerOptions*] dictionary is used to provide optional settings when creating an SDP answer using [RTCPeerConnection.createOffer()] after receiving an offer from a remote peer. The [createOffer()] method's [options] parameter is of this type.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCCertificate",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe interface of the WebRTC API provides an object represents a certificate that an [RTCPeerConnection] uses to authenticate.",
    "abstract": true,
    "category": "interface",
    "props": {
      "expires": {
        "type": "DOMTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the expiration date of the certificate.",
        "event": false
      }
    }
  },
  {
    "name": "RTCConfiguration",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[RTCConfiguration]* dictionary is used to provide configuration options for an [RTCPeerConnection]. It may be passed into the constructor when instantiating a connection, or used with the [RTCPeerConnection.getConfiguration()] and [RTCPeerConnection.setConfiguration()] methods, which allow inspecting and changing the configuration while a connection is established.\n\nThe options include ICE server and transport settings and identity information.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCDataChannel",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCDataChannelEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCDtlsTransport",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCDTMFSender",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\nThe *[RTCDTMFSender]* interface provides a mechanism for transmitting DTMF codes on a WebRTC [RTCPeerConnection]. You gain access to the connection's [RTCDTMFSender] through the [RTCRtpSender.dtmf] property on the audio track you wish to send DTMF with.\n\nThe primary purpose for WebRTC's DTMF support is to allow WebRTC-based communication clients to be connected to a public-switched telephone network (PSTN) or other legacy telephone service, including extant voice over IP (VoIP) services. For that reason, DTMF can't be used between two WebRTC-based devices, because there is no mechanism provided by WebRTC for receiving DTMF codes.\n\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "toneBuffer": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] which contains the list of DTMF tones currently in the queue to be transmitted (tones which have already been played are no longer included in the string). See [toneBuffer] for details on the format of the tone buffer.",
        "event": false
      }
    }
  },
  {
    "name": "RTCDTMFToneChangeEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[RTCDTMFToneChangeEvent]* interface represents events sent to indicate that DTMF tones have started or finished playing. This interface is used by the [tonechange] event.",
    "abstract": true,
    "category": "interface",
    "props": {
      "tone": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] specifying the tone which has begun playing, or an empty string ([\"\"]) if the previous tone has finished playing.",
        "event": false
      }
    }
  },
  {
    "name": "RTCError",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*RTCError*] interface describes an error which has occurred while handling WebRTC operations. It's based upon the standard [DOMException] interface that describes general DOM errors.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCErrorEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe WebRTC API's *[RTCErrorEvent]* interface represents an error sent to a WebRTC object. It's based on the standard [Event] interface, but adds RTC-specific information describing the error, as shown below.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCIceCandidate",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[RTCIceCandidate]* interface—part of the WebRTC API—represents a candidate Internet Connectivity Establishment (ICE) configuration which may be used to establish an [RTCPeerConnection].\n\nAn ICE candidate describes the protocols and routing needed for WebRTC to be able to communicate with a remote device. When starting a WebRTC peer connection, typically a number of candidates are proposed by each end of the connection, until they mutually agree upon one which describes the connection they decide will be best. WebRTC then uses that candidate's details to initiate the connection.\n\nFor details on how the ICE process works, see Lifetime of a WebRTC session. The article WebRTC connectivity provides additional useful details.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCIceCandidateInit",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe WebRTC API's [RTCIceCandidateInit] dictionary, which contains the information needed to fundamentally describe an [RTCIceCandidate]. [RTCIceCandidateInit] is used when using [new RTCIceCandidate()] to create a new ICE candidate object. It's also used as the return value from the [RTCIceCandidate.toJSON()] method, and can be passed directly into [RTCPeerConnection.addIceCandidate()] to add a candidate to the peer connection.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCIceCandidatePair",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*RTCIceCandidatePair*] dictionary describes a pair of ICE candidates which together comprise a description of a viable connection between two WebRTC endpoints. It is used as the return value from [RTCIceTransport.getSelectedCandidatePair()] to identify the currently-selected candidate pair identified by the ICE agent.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCIceCandidatePairStats",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe WebRTC [*RTCIceCandidatePairStats*] dictionary reports statistics which provide insight into the quality and performance of an [RTCPeerConnection] while connected and configured as described by the specified pair of ICE candidates.\n\nIf a [RTCStats]-based object's [type] is [candidate-pair], it's an [RTCIceCandidatePairStats] object.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCIceCandidateStats",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe WebRTC API's [*RTCIceCandidateStats*] dictionary provides statistics related to an [RTCIceCandidate].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCIceParameters",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*RTCIceParameters*] dictionary specifies the username fragment and password assigned to an ICE session. During ICE negotiation, each peer's username fragment and password are recorded in an [RTCIceParameters] object, which can be obtained from the [RTCIceTransport] by calling its [getLocalParameters()] or [getRemoteParameters()] method, depending on which end interests you.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCIceServer",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*RTCIceServer*] dictionary defines how to connect to a single ICE server (such as a STUN or TURN server). Objects of this type are provided in the configuration of an [RTCPeerConnection], in the [iceServers] array.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCIceTransport",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*RTCIceTransport*] interface provides access to information about the ICE transport layer over which the data is being sent and received. This is particularly useful if you need to access state information about the connection.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCIdentityAssertion",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[RTCIdentityAssertion]* interface of the WebRTC API represents the identity of the a remote peer of the current connection. If no peer has yet been set and verified this interface returns [null]. Once set it can't be changed.",
    "abstract": true,
    "category": "interface",
    "props": {
      "idp": {
        "type": "RTCIdentityProviderDetails",
        "array": false,
        "dartType": "RTCIdentityProviderDetails",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates the provider of the identity assertion.",
        "event": false
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates the name of the identity assertion provider.",
        "event": false
      }
    }
  },
  {
    "name": "RTCInboundRtpStreamStats",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe WebRTC API's [*RTCInboundRtpStreamStats*] dictionary, based upon [RTCReceivedRtpStreamStats] and [RTCStats], contains statistics related to the receiving end of an RTP stream on the local end of the [RTCPeerConnection].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCOfferAnswerOptions",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe WebRTC API's [*RTCOfferAnswerOptions*] dictionary is used to specify options that configure and control the process of creating WebRTC offers or answers. It's used as the base type for the [options] parameter when calling [createOffer()] or [createAnswer()] on an [RTCPeerConnection].\n\nEach of [createOffer()] and [createAnswer()] use [RTCOfferAnswerOptions] as the base type for their [options] parameter's dictionary. [createOffer()] uses [RTCOfferOptions] and [createAnswer()] uses [RTCAnswerOptions].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCOfferOptions",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*RTCOfferOptions*] dictionary is used to provide optional settings when creating an [RTCPeerConnection] offer with the [createOffer()] method.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCOutboundRtpStreamStats",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*RTCOutboundRtpStreamStats*] dictionary is the [RTCStats]-based object which provides metrics and statistics related to an outbound RTP stream being sent by an [RTCRtpSender].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCPeerConnection",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCPeerConnectionIceErrorEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*RTCPeerConnectionIceErrorEvent*] interface—based upon the [Event] interface—provides details pertaining to an ICE error announced by sending an [icecandidateerror] event to the [RTCPeerConnection] object.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCPeerConnectionIceEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[RTCPeerConnectionIceEvent]* interface represents events that occurs in relation to ICE candidates with the target, usually an [RTCPeerConnection]. Only one event is of this type: [icecandidate].",
    "abstract": true,
    "category": "interface",
    "props": {
      "candidate": {
        "type": "RTCIceCandidate",
        "array": false,
        "dartType": "RTCIceCandidate",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the [RTCIceCandidate] containing the candidate associated with the event, or [null] if this event indicates that there are no further candidates to come.",
        "event": false
      }
    }
  },
  {
    "name": "RTCRemoteOutboundRtpStreamStats",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe WebRTC statistics model's *[RTCRemoteOutboundRtpStreamStats]* dictionary extends the underlying [RTCSentRtpStreamStats] dictionary with properties measuring metrics specific to outgoing RTP streams.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCRtcpParameters",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*RTCRtcpParameters*] dictionary provides parameters of an RTCP connection. It's used as the value of the [rtcp] property of the parameters of an [RTCRtpSender] or [RTCRtpReceiver].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCRtpCapabilities",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*RTCRtpCapabilities*] dictionary is a data type used to describe the capabilities of an [RTCRtpSender] or [RTCRtpReceiver] in response to a call to the [RTCRtpSender.getCapabilities()] or [RTCRtpReceiver.getCapabilities()] static functions, both of which return an array of [RTCRtpCapabilities] objects.\n\nAn [RTCRtpCapabilities] object contains an array of objects conforming to [RTCRtpCodecCapability] (each describing the capabilities of one codec) and an array of the supported RTP header extensions for that codec.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCRtpCodecCapability",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe WebRTC API's [*RTCRtpCodecCapability*] dictionary provides information describing the capabilities of a single media codec.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCRtpCodecParameters",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [RTCRtpCodecParameters] dictionary, part of the WebRTC API, is used to describe the configuration parameters for a single media codec. In addition to being the type of the [RTCRtpParameters.codecs] property, it's used when calling [RTCRtpTransceiver.setCodecPreferences()] to configure a transceiver's codecs before beginning the offer/answer process to establish a WebRTC peer connection.\n\nMost of the fields in this property take values which are defined and maintained by the Internet Assigned Numbers Authority (IANA). References to relevant IANA documents are provided in the see also section at the end of this article.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCRtpContributingSource",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[RTCRtpContributingSource]* dictionary of the WebRTC API is used by [getContributingSources()] to provide information about a given contributing source (CSRC), including the most recent time a packet that the source contributed was played out.\n\nThe information provided is based on the last ten seconds of media received.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCRtpEncodingParameters",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nAn instance of the WebRTC API's *[RTCRtpEncodingParameters]* dictionary describes a single configuration of a codec for an [RTCRtpSender]. It's used in the [RTCRtpSendParameters] describing the configuration of an RTP sender's [encodings]; [RTCRtpDecodingParameters] is used to describe the configuration of an RTP receiver's [encodings].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCRtpParameters",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*RTCRtpParameters*] dictionary is the basic object describing the parameters of an RTP transport. It is extended separately for senders and receivers in the form of the [RTCRtpSendParameters] and [RTCRtpReceiveParameters] dictionaries.\n\nTo obtain the parameters of a sender or receiver, call its [getParameters()] method:\n\n\n [getParameters()]\n [getParameters()]\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCRtpReceiveParameters",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*RTCRtpReceiveParameters*] dictionary, based upon the [RTCRtpParameters] dictionary, is returned by the [RTCRtpReceiver] method [getParameters()]. It describes the parameters being used by the receiver's RTP connection to the remote peer.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCRtpReceiver",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[RTCRtpReceiver]* interface of the WebRTC API manages the reception and decoding of data for a [MediaStreamTrack] on an [RTCPeerConnection].",
    "abstract": true,
    "category": "interface",
    "props": {
      "track": {
        "type": "MediaStreamTrack",
        "array": false,
        "dartType": "MediaStreamTrack",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [MediaStreamTrack] associated with the current [RTCRtpReceiver] instance. ",
        "event": false
      },
      "transport": {
        "type": "RTCDtlsTransport",
        "array": false,
        "dartType": "RTCDtlsTransport",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [RTCDtlsTransport] instance over which the media for the receiver's track is received.",
        "event": false
      }
    }
  },
  {
    "name": "RTCRtpSender",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\nThe *[RTCRtpSender]* interface provides the ability to control and obtain details about how a particular [MediaStreamTrack] is encoded and sent to a remote peer. With it, you can configure the encoding used for the corresponding track, get information about the device's media capabilities, and so forth. You can also obtain access to an [RTCDTMFSender] which can be used to send DTMF codes (to simulate the user pressing buttons on a telephone's dial pad) to the remote peer.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "dtmf": {
        "type": "RTCDTMFSender",
        "array": false,
        "dartType": "RTCDTMFSender",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [RTCDTMFSender] which can be used to send DTMF tones using [telephone-event] payloads on the RTP session represented by the [RTCRtpSender] object. If [null], the track and/or the connection doesn't support DTMF. Only audio tracks can support DTMF.",
        "event": false
      },
      "track": {
        "type": "MediaStreamTrack",
        "array": false,
        "dartType": "MediaStreamTrack",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [MediaStreamTrack] which is being handled by the [RTCRtpSender]. If [track] is [null], the [RTCRtpSender] doesn't transmit anything.",
        "event": false
      },
      "transport": {
        "type": "RTCDtlsTransport",
        "array": false,
        "dartType": "RTCDtlsTransport",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [RTCDtlsTransport] over which the sender is exchanging the RTP and RTCP packets used to manage transmission of media and control data. This value is [null] until the transport is established. When bundling is in use, more than transceiver may be sharing the same transport object.",
        "event": false
      }
    }
  },
  {
    "name": "RTCRtpSendParameters",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe WebRTC API's [*RTCRtpSendParameters*] dictionary is used to specify the parameters for an [RTCRtpSender] when calling its [setParameters()] method.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCRtpStreamStats",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [RTCRtpStreamStats] dictionary is returned by the [RTCPeerConnection.getStats()], [RTCRtpSender.getStats()], and [RTCRtpReceiver.getStats()] methods to provide detailed statistics about WebRTC connectivity. While the dictionary has a base set of properties that are present in each of these cases, there are also additional properties added depending on which interface the method is called on.\n\n[RTCRtpStreamStats] is the base class for all RTP-related statistics reports. It's based on RTCStats and adds the following additional fields.\n\n\n*Note:* This interface was called [RTCRTPStreamStats] until a specification update in the spring of 2017. Check the Browser compatibility table to know if and when the name change was implemented in specific browsers.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCRtpSynchronizationSource",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[RTCRtpSynchronizationSource]* dictionary of the WebRTC API is used by [getSynchronizationSources()] to describe a particular synchronization source (SSRC). A synchronization source is a single source that shares timing and sequence number space. Since [RTCRtpSynchronizationSource] implements [RTCRtpContributingSource], its properties are also available.\n\nThe information provided is based on the last ten seconds of media received.\n\n\nWhile the published specification describes this as an interface, it has since been changed to a dictionary in follow-up drafts.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCRtpTransceiver",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe WebRTC interface *[RTCRtpTransceiver]* describes a permanent pairing of an [RTCRtpSender] and an [RTCRtpReceiver], along with some shared state.\n\nEach SDP media section describes one bidirectional SRTP (\"Secure Real Time Protocol\") stream (excepting the media section for [RTCDataChannel], if present). This pairing of send and receive SRTP streams is significant for some applications, so [RTCRtpTransceiver] is used to represent this pairing, along with other important state from the media section. Each non-disabled SRTP media section is always represented by exactly one transceiver.\n\nA transceiver is uniquely identified using its [mid] property, which is the same as the media ID ([mid]) of its corresponding m-line. An [RTCRtpTransceiver] is *associated* with an m-line if its [mid] is non-null; otherwise it's considered disassociated.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCRtpTransceiverInit",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[RTCRtpTransceiverInit]* dictionary is used when calling the WebRTC function [RTCPeerConnection.addTransceiver()] to provide configuration options for the new transceiver.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCSctpTransport",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[RTCSctpTransport]* interface provides information which describes a Stream Control Transmission Protocol (*SCTP*) transport. This provides information about limitations of the transport, but also provides a way to access the underlying Datagram Transport Layer Security (*DTLS*) transport over which SCTP packets for all of an [RTCPeerConnection]'s data channels are sent and received.\n\nYou don't create [RTCSctpTransport] objects yourself; instead, you get access to the [RTCSctpTransport] for a given [RTCPeerConnection] through its *[sctp]* property.\n\nPossibly the most useful property on this interface is its [maxMessageSize] property, which you can use to determine the upper limit on the size of messages you can send over a data channel on the peer connection.",
    "abstract": true,
    "category": "interface",
    "props": {
      "maxChannels": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An integer value indicating the maximum number of [RTCDataChannel]s that can be open simultaneously.",
        "event": false
      },
      "maxMessageSize": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An integer value indicating the maximum size, in bytes, of a message which can be sent using the [RTCDataChannel.send()] method.",
        "event": false
      },
      "state": {
        "type": "RTCSctpTransportState",
        "array": false,
        "dartType": "RTCSctpTransportState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] enumerated value indicating the state of the SCTP transport.",
        "event": false
      },
      "transport": {
        "type": "RTCDtlsTransport",
        "array": false,
        "dartType": "RTCDtlsTransport",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [RTCDtlsTransport] object representing the DTLS transport used for the transmission and receipt of data packets.",
        "event": false
      },
      "onstatechange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Fired when the [RTCSctpTransport.state] changes.",
        "event": false
      }
    }
  },
  {
    "name": "RTCSessionDescription",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[RTCSessionDescription]* interface describes one end of a connection—or potential connection—and how it's configured. Each [RTCSessionDescription] consists of a description [type] indicating which part of the offer/answer negotiation process it describes and of the SDP descriptor of the session.\n\nThe process of negotiating a connection between two peers involves exchanging [RTCSessionDescription] objects back and forth, with each description suggesting one combination of connection configuration options that the sender of the description supports. Once the two peers agree upon a configuration for the connection, negotiation is complete.",
    "abstract": true,
    "category": "interface",
    "props": {
      "type": {
        "type": "RTCSdpType",
        "array": false,
        "dartType": "RTCSdpType",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An enum of type [RTCSdpType] describing the session description's type.",
        "event": false
      },
      "sdp": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] containing the SDP describing the session.",
        "event": false
      }
    }
  },
  {
    "name": "RTCStats",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[RTCStats]* dictionary is the basic statistics object used by WebRTC's statistics monitoring model, providing the properties required of all statistics data objects. Specific classes of statistic are defined as dictionaries based on [RTCStats]. For example, statistics about a received RTP stream are represented by [RTCReceivedRtpStreamStats].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCTrackEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe WebRTC API interface [*RTCTrackEvent*] represents the [track] event, which is sent when a new [MediaStreamTrack] is added to an [RTCRtpReceiver] which is part of the [RTCPeerConnection]. The target is the [RTCPeerConnection] object to which the track is being added.\n\nThis event is sent by the WebRTC layer to the web site or application, so you will not typically need to instantiate an [RTCTrackEvent] yourself.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "RTCTrackEventInit",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe WebRTC API's [*RTCTrackEventInit*] dictionary is used to provide information describing an [RTCTrackEvent] when instantiating a new [track] event using [new RTCTrackEvent()].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Screen",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [Screen] interface represents a screen, usually the one on which the current window is being rendered, and is obtained using [window.screen].\n\nNote that browsers determine which screen to report as current by detecting which screen has the center of the browser window.",
    "abstract": true,
    "category": "interface",
    "props": {
      "availHeight": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Specifies the height of the screen, in pixels, minus permanent or semipermanent user interface features displayed by the operating system, such as the Taskbar on Windows.",
        "event": false
      },
      "availWidth": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the amount of horizontal space in pixels available to the window.",
        "event": false
      },
      "colorDepth": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the color depth of the screen.",
        "event": false
      },
      "height": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the height of the screen in pixels.",
        "event": false
      },
      "orientation": {
        "type": "ScreenOrientation",
        "array": false,
        "dartType": "ScreenOrientation",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [ScreenOrientation] instance associated with this screen.",
        "event": false
      },
      "pixelDepth": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets the bit depth of the screen.",
        "event": false
      },
      "width": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the width of the screen.",
        "event": false
      }
    }
  },
  {
    "name": "ScreenOrientation",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[ScreenOrientation]* interface of the Screen Orientation API provides information about the current orientation of the document.\n\nA *[ScreenOrientation]* instance object can be retrieved using the [screen.orientation] property.",
    "abstract": true,
    "category": "interface",
    "props": {
      "type": {
        "type": "OrientationType",
        "array": false,
        "dartType": "OrientationType",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the document's current orientation type, one of \"portrait-primary\", \"portrait-secondary\", \"landscape-primary\", or \"landscape-secondary\".",
        "event": false
      },
      "angle": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the document's current orientation angle.",
        "event": false
      },
      "onchange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [event handler] called whenever the screen changes orientation.",
        "event": true
      }
    }
  },
  {
    "name": "ScriptProcessorNode",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe [ScriptProcessorNode] interface allows the generation, processing, or analyzing of audio using JavaScript.\n\n\n*Note*: As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and was replaced by AudioWorklet (see [AudioWorkletNode]).\n\n\nThe [ScriptProcessorNode] interface is an [AudioNode] audio-processing module that is linked to two buffers, one containing the input audio data, one containing the processed output audio data. An event, implementing the [AudioProcessingEvent] interface, is sent to the object each time the input buffer contains new data, and the event handler terminates when it has filled the output buffer with data.\n\n\n\nThe size of the input and output buffer are defined at the creation time, when the [BaseAudioContext.createScriptProcessor] method is called (both are defined by [BaseAudioContext.createScriptProcessor]'s [bufferSize] parameter). The buffer size must be a power of 2 between [256] and [16384], that is [256], [512], [1024], [2048], [4096], [8192] or [16384]. Small numbers lower the latency, but large number may be necessary to avoid audio breakup and glitches.\n\nIf the buffer size is not defined, which is recommended, the browser will pick one that its heuristic deems appropriate.\n\n\n \n  \n   Number of inputs\n   [1]\n  \n  \n   Number of outputs\n   [1]\n  \n  \n   Channel count mode\n   [\"max\"]\n  \n  \n   Channel count\n   [2] (not used in the default count mode)\n  \n  \n   Channel interpretation\n   [\"speakers\"]\n  \n \n",
    "abstract": true,
    "category": "interface",
    "props": {
      "bufferSize": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an integer representing both the input and output buffer size. Its value can be a power of 2 value in the range [256]–[16384].",
        "event": false
      }
    }
  },
  {
    "name": "ScrollToOptions",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ScrollToOptions]* dictionary of the CSSOM View spec contains properties specifying where an element should be scrolled to, and whether the scrolling should be smooth.\n\nA [ScrollToOptions] dictionary can be provided as a parameter for the following methods:\n\n\n [Window.scroll()]\n [Window.scrollBy()]\n [Window.scrollTo()]\n [Element.scroll()]\n [Element.scrollBy()]\n [Element.scrollTo()]\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "top": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Specifies the number of pixels along the Y axis to scroll the window or element.",
        "event": false
      },
      "left": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Specifies the number of pixels along the X axis to scroll the window or element.",
        "event": false
      }
    }
  },
  {
    "name": "SecurityPolicyViolationEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[SecurityPolicyViolationEvent]* interface inherits from [Event], and represents the event object of an event sent on a document or worker when its content security policy is violated.",
    "abstract": false,
    "category": "interface",
    "props": {
      "blockedURI": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [USVString] representing the URI of the resource that was blocked because it violates a policy.",
        "event": false
      },
      "columnNumber": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The column number in the document or worker at which the violation occurred.",
        "event": false
      },
      "disposition": {
        "type": "SecurityPolicyViolationEventDisposition",
        "array": false,
        "dartType": "SecurityPolicyViolationEventDisposition",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates how the violated policy is configured to be treated by the user agent. This will be [\"enforce\"] or [\"report\"].",
        "event": false
      },
      "documentURI": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [USVString] representing the URI of the document or worker in which the violation was found.",
        "event": false
      },
      "effectiveDirective": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] representing the directive whose enforcement uncovered the violation.",
        "event": false
      },
      "lineNumber": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The line number in the document or worker at which the violation occurred.",
        "event": false
      },
      "originalPolicy": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] containing the policy whose enforcement uncovered the violation.",
        "event": false
      },
      "referrer": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [USVString] representing the referrer of the resources whose policy was violated. This will be a URL or [null].",
        "event": false
      },
      "sample": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] representing a sample of the resource that caused the violation, usually the first 40 characters. This will only be populated if the resource is an inline script, event handler, or style — external resources causing a violation will not generate a sample.",
        "event": false
      },
      "sourceFile": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [USVString] representing the URI of the document or worker in which the violation was found.",
        "event": false
      },
      "statusCode": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A number representing the HTTP status code of the document or worker in which the violation occurred.",
        "event": false
      },
      "violatedDirective": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] representing the directive whose enforcement uncovered the violation.",
        "event": false
      }
    }
  },
  {
    "name": "Selection",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nA [*Selection*] object represents the range of text selected by the user or the current position of the caret. To obtain a [Selection] object for examination or manipulation, call [window.getSelection()].\n\nA user may make a selection from left to right (in document order) or right to left (reverse of document order). The *anchor* is where the user began the selection and the *focus* is where the user ends the selection. If you make a selection with a desktop mouse, the anchor is placed where you pressed the mouse button, and the focus is placed where you released the mouse button.\n\n\nAnchor and focus should not be confused with the start and end positions of a selection. The anchor can be placed before the focus or vice-versa, depending on the direction you made your selection.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "anchorNode": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [Node] in which the selection begins. Can return [null] if selection never existed in the document (e.g., an iframe that was never clicked on).",
        "event": false
      },
      "anchorOffset": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a number representing the offset of the selection's anchor within the [anchorNode]. If [anchorNode] is a text node, this is the number of characters within anchorNode preceding the anchor. If [anchorNode] is an element, this is the number of child nodes of the [anchorNode] preceding the anchor.",
        "event": false
      },
      "focusNode": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [Node] in which the selection ends. Can return [null] if selection never existed in the document (for example, in an [iframe] that was never clicked on).",
        "event": false
      },
      "focusOffset": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a number representing the offset of the selection's anchor within the [focusNode]. If [focusNode] is a text node, this is the number of characters within [focusNode] preceding the focus. If [focusNode] is an element, this is the number of child nodes of the [focusNode] preceding the focus.",
        "event": false
      },
      "isCollapsed": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a Boolean indicating whether the selection's start and end points are at the same position.",
        "event": false
      },
      "rangeCount": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the number of ranges in the selection.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] describing the type of the current selection.",
        "event": false
      }
    }
  },
  {
    "name": "Sensor",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Sensor]* interface of the Sensor APIs is the base class for all the other sensor interfaces. This interface cannot be used directly. Instead it provides properties, event handlers, and methods accessed by interfaces that inherit from it.\n\nIf a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. See [Feature-Policy] for implementation instructions.",
    "abstract": true,
    "category": "interface",
    "props": {
      "activated": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] indicating whether the sensor is active.",
        "event": false
      },
      "hasReading": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] indicating whether the sensor has a reading.",
        "event": false
      },
      "timestamp": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the time stamp of the latest sensor reading.",
        "event": false
      },
      "onerror": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Called when an error occurs on one of the child interfaces of the [Sensor] interface.",
        "event": false
      },
      "onreading": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Called when a reading is taken on one of the child interfaces of the Sensor interface.",
        "event": false
      },
      "onactivate": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Called when one of the Sensor interface's becomes active.",
        "event": false
      }
    }
  },
  {
    "name": "SensorErrorEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SensorErrorEvent]* interface of the Sensor APIs provides information about errors thrown by a [Sensor] or related interface. ",
    "abstract": false,
    "category": "interface",
    "props": {
      "error": {
        "type": "DOMException",
        "array": false,
        "dartType": "DOMException",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [DOMException] object passed in the event's contructor.",
        "event": false
      }
    }
  },
  {
    "name": "Serial",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
    "abstract": true,
    "category": "interface",
    "props": {
      "onconnect": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An event handler called when a port has been connected to the device.",
        "event": false
      },
      "ondisconnect": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An event handler called when a port has been disconnected from the device.",
        "event": false
      }
    }
  },
  {
    "name": "SerialPort",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
    "abstract": false,
    "category": "interface",
    "props": {
      "readable": {
        "type": "ReadableStream",
        "array": false,
        "dartType": "ReadableStream",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [ReadableStream] for receiving data from the device connected to the port.",
        "event": false
      },
      "writable": {
        "type": "WritableStream",
        "array": false,
        "dartType": "WritableStream",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [WritableStream] for sending data to the device connected to the port.",
        "event": false
      },
      "onconnect": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An event handler called when the port has connected to the device.",
        "event": false
      },
      "ondisconnect": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An event handler called when the port has disconnected from the device.",
        "event": false
      }
    }
  },
  {
    "name": "ServiceWorker",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\n\n\nThe *[ServiceWorker]* interface of the Service Worker API provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique [ServiceWorker] object.\n\nA [ServiceWorker] object is available in the [ServiceWorkerRegistration.active] property, and the [ServiceWorkerContainer.controller] property — this is a service worker that has been activated and is controlling the page (the service worker has been successfully registered, and the controlled page has been reloaded.)\n\nThe [ServiceWorker] interface is dispatched a set of lifecycle events — [install] and [activate] — and functional events including [fetch]. A [ServiceWorker] object has an associated [ServiceWorker.state], related to its lifecycle.",
    "abstract": true,
    "category": "interface",
    "props": {
      "scriptURL": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [ServiceWorker] serialized script URL defined as part of [ServiceWorkerRegistration]. The URL must be on the same origin as the document that registers the [ServiceWorker].",
        "event": false
      },
      "state": {
        "type": "ServiceWorkerState",
        "array": false,
        "dartType": "ServiceWorkerState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the state of the service worker. It returns one of the following values: [installing], [installed,] [activating], [activated], or [redundant].",
        "event": false
      },
      "onstatechange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [EventListener] property called whenever an event of type [statechange] is fired; it is basically fired anytime the [ServiceWorker.state] changes.",
        "event": false
      }
    }
  },
  {
    "name": "ServiceWorkerContainer",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [ServiceWorkerContainer] interface of the Service Worker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.\n\nMost importantly, it exposes the [ServiceWorkerContainer.register()] method used to register service workers, and the [ServiceWorkerContainer.controller] property used to determine whether or not the current page is actively controlled.",
    "abstract": true,
    "category": "interface",
    "props": {
      "controller": {
        "type": "ServiceWorker",
        "array": false,
        "dartType": "ServiceWorker",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [ServiceWorker] object if its state is [activating] or [activated] (the same object returned by [ServiceWorkerRegistration.active]). This property returns [null] during a force-refresh request (Shift + refresh) or if there is no active worker.",
        "event": false
      },
      "ready": {
        "type": "Promise<ServiceWorkerRegistration>",
        "array": false,
        "dartType": "Promise<ServiceWorkerRegistration>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Provides a way of delaying code execution until a service worker is active. It returns a [Promise] that will never reject, and which waits indefinitely until the [ServiceWorkerRegistration] associated with the current page has an [ServiceWorkerRegistration.active] worker. Once that condition is met, it resolves with the [ServiceWorkerRegistration].",
        "event": false
      }
    }
  },
  {
    "name": "ServiceWorkerGlobalScope",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ServiceWorkerGlobalScope]* interface of the Service Worker API represents the global execution context of a service worker.\n\nDevelopers should keep in mind that the ServiceWorker state is not persisted across the termination/restart cycle, so each event handler should assume it's being invoked with a bare, default global state.\n\nOnce successfully registered, a service worker can and will be terminated when idle to conserve memory and processor power. An active service worker is automatically restarted to respond to events, such as [ServiceWorkerGlobalScope.onfetch] or [ServiceWorkerGlobalScope.onmessage].\n\nAdditionally, synchronous requests are not allowed from within a service worker — only asynchronous requests, like those initiated via the [fetch()] method, can be used.\n\nThis interface inherits from the [WorkerGlobalScope] interface, and its parent [EventTarget], and therefore implements properties from [WindowTimers], [WindowBase64], and [WindowEventHandlers].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "clients": {
        "type": "Clients",
        "array": false,
        "dartType": "Clients",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the [Clients] object associated with the service worker.",
        "event": false
      },
      "registration": {
        "type": "ServiceWorkerRegistration",
        "array": false,
        "dartType": "ServiceWorkerRegistration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the [ServiceWorkerRegistration] object that represents the service worker's registration.",
        "event": false
      }
    }
  },
  {
    "name": "ServiceWorkerRegistration",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ServiceWorkerRegistration]* interface of the Service Worker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin.\n\nThe lifetime of a service worker registration is beyond that of the [ServiceWorkerRegistration] objects that represent them within the lifetime of their corresponding service worker clients. The browser maintains a persistent list of active [ServiceWorkerRegistration] objects.\n\n\n*Note*: This feature is available in Web Workers.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "scope": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a unique identifier for a service worker registration. This must be on the same origin as the document that registers the [ServiceWorker].",
        "event": false
      },
      "installing": {
        "type": "ServiceWorker",
        "array": false,
        "dartType": "ServiceWorker",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a service worker whose state is [installing]. This is initially set to [null].",
        "event": false
      },
      "waiting": {
        "type": "ServiceWorker",
        "array": false,
        "dartType": "ServiceWorker",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a service worker whose state is [installed]. This is initially set to [null].",
        "event": false
      },
      "active": {
        "type": "ServiceWorker",
        "array": false,
        "dartType": "ServiceWorker",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a service worker whose state is [activating] or [activated]. This is initially set to [null]. An active worker will control a [Client] if the client's URL falls within the scope of the registration (the [scope] option set when [ServiceWorkerContainer.register] is first called.)",
        "event": false
      },
      "navigationPreload": {
        "type": "NavigationPreloadManager",
        "array": false,
        "dartType": "NavigationPreloadManager",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the instance of [NavigationPreloadManager] associated with the current service worker registration.",
        "event": false
      },
      "pushManager": {
        "type": "PushManager",
        "array": false,
        "dartType": "PushManager",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the [PushManager] interface for managing push subscriptions including subscribing, getting an active subscription, and accessing push permission status.",
        "event": false
      },
      "sync": {
        "type": "SyncManager",
        "array": false,
        "dartType": "SyncManager",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": false,
        "desc": "Returns a reference to the [SyncManager] interface, which manages background synchronization processes.",
        "event": false
      },
      "index": {
        "type": "ContentIndex",
        "array": false,
        "dartType": "ContentIndex",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the [ContentIndex] interface, for managing indexed content for offline viewing.",
        "event": false
      },
      "onupdatefound": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [EventListener] property called whenever an event of type [updatefound] is fired; it is fired any time the [ServiceWorkerRegistration.installing] property acquires a new service worker.",
        "event": false
      }
    }
  },
  {
    "name": "ShadowRoot",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*ShadowRoot*] interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.\n\nYou can retrieve a reference to an element's shadow root using its [Element.shadowRoot] property, provided it was created using [Element.attachShadow()] with the [mode] option set to [open].",
    "abstract": true,
    "category": "interface",
    "props": {
      "activeElement": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [Element] within the shadow tree that has focus.",
        "event": false
      },
      "delegatesFocus": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": false,
        "desc": "Returns a boolean that indicates whether delegatesFocus was set when the shadow was attached (see [Element.attachShadow()]).",
        "event": false
      },
      "fullscreenElement": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The element that's currently in full screen mode for this shadow tree.",
        "event": false
      },
      "host": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the DOM element the [ShadowRoot] is attached to.",
        "event": false
      },
      "mode": {
        "type": "ShadowRootMode",
        "array": false,
        "dartType": "ShadowRootMode",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The mode of the [ShadowRoot] — either [open] or [closed]. This defines whether or not the shadow root's internal features are accessible from JavaScript.",
        "event": false
      },
      "pictureInPictureElement": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [Element] within the shadow tree that is currently being presented in picture-in-picture mode.",
        "event": false
      },
      "pointerLockElement": {
        "type": "",
        "array": false,
        "dartType": "",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [Element] set as the target for mouse events while the pointer is locked. [null] if lock is pending, pointer is unlocked, or if the target is in another tree.",
        "event": false
      },
      "styleSheets": {
        "type": "StyleSheetList",
        "array": false,
        "dartType": "StyleSheetList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [StyleSheetList] of [CSSStyleSheet] objects for stylesheets explicitly linked into, or embedded in a shadow tree.",
        "event": false
      }
    }
  },
  {
    "name": "SharedWorker",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*SharedWorker*] interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, [SharedWorkerGlobalScope].\n\n\n*Note:* If SharedWorker can be accessed from several browsing contexts, all those browsing contexts must share the exact same origin (same protocol, host and port).\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "port": {
        "type": "MessagePort",
        "array": false,
        "dartType": "MessagePort",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [MessagePort] object used to communicate with and control the shared worker.",
        "event": false
      }
    }
  },
  {
    "name": "SharedWorkerGlobalScope",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SharedWorkerGlobalScope]* object (the [SharedWorker] global scope) is accessible through the [self] keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See the complete list of functions available to workers.",
    "abstract": true,
    "category": "interface",
    "props": {
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The name that the [SharedWorker] was (optionally) given when it was created using the [SharedWorker()] constructor. This is mainly useful for debugging purposes.",
        "event": false
      },
      "onconnect": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [connect] event is raised — that is, when a [MessagePort] connection is opened between the associated [SharedWorker] and the main thread.",
        "event": true
      }
    }
  },
  {
    "name": "SourceBuffer",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SourceBuffer]* interface represents a chunk of media to be passed into an [HTMLMediaElement] and played, via a [MediaSource] object. This can be made up of one or several media segments.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "appendWindowEnd": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Controls the timestamp for the end of the append window.",
        "event": false
      },
      "appendWindowStart": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Controls the timestamp for the start of the append window. This is a timestamp range that can be used to filter what media data is appended to the [SourceBuffer]. Coded media frames with timestamps within this range will be appended, whereas those outside the range will be filtered out.",
        "event": false
      },
      "audioTracks": {
        "type": "AudioTrackList",
        "array": false,
        "dartType": "AudioTrackList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A list of the audio tracks currently contained inside the [SourceBuffer].",
        "event": false
      },
      "buffered": {
        "type": "TimeRanges",
        "array": false,
        "dartType": "TimeRanges",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the time ranges that are currently buffered in the [SourceBuffer].",
        "event": false
      },
      "mode": {
        "type": "AppendMode",
        "array": false,
        "dartType": "AppendMode",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Controls how the order of media segments in the [SourceBuffer] is handled, in terms of whether they can be appended in any order, or they have to be kept in a strict sequence.",
        "event": false
      },
      "textTracks": {
        "type": "TextTrackList",
        "array": false,
        "dartType": "TextTrackList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A list of the text tracks currently contained inside the [SourceBuffer].",
        "event": false
      },
      "timestampOffset": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Controls the offset applied to timestamps inside media segments that are subsequently appended to the [SourceBuffer].",
        "event": false
      },
      "updating": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A boolean indicating whether the [SourceBuffer] is currently being updated — i.e. whether an [SourceBuffer.appendBuffer()], [SourceBuffer.appendStream()], or [SourceBuffer.remove()] operation is currently in progress.",
        "event": false
      },
      "videoTracks": {
        "type": "VideoTrackList",
        "array": false,
        "dartType": "VideoTrackList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A list of the video tracks currently contained inside the [SourceBuffer].",
        "event": false
      },
      "onabort": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Fired whenever [SourceBuffer.appendBuffer()] or [SourceBuffer.appendStream()] is ended by a call to [SourceBuffer.abort()]. [SourceBuffer.updating] changes from [true] to [false].",
        "event": false
      },
      "onerror": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Fired whenever an error occurs during [SourceBuffer.appendBuffer()] or [SourceBuffer.appendStream()]. [SourceBuffer.updating] changes from [true] to [false].",
        "event": false
      },
      "onupdate": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Fired whenever [SourceBuffer.appendBuffer()] method or the [SourceBuffer.remove()] completes. [SourceBuffer.updating] changes from [true] to [false]. This event is fired before [onupdateend].",
        "event": false
      },
      "onupdateend": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Fired whenever [SourceBuffer.appendBuffer()] method or the [SourceBuffer.remove()] has ended. This event is fired after [onupdate].",
        "event": false
      },
      "onupdatestart": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Fired whenever the value of [SourceBuffer.updating] transitions from [false] to [true].",
        "event": false
      }
    }
  },
  {
    "name": "SpeechGrammar",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[SpeechGrammar]* interface of the Web Speech API represents a set of words or patterns of words that we want the recognition service to recognize.\n\nGrammar is defined using JSpeech Grammar Format (*JSGF*.) Other formats may also be supported in the future.",
    "abstract": false,
    "category": "interface",
    "props": {
      "src": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Sets and returns a string containing the grammar from within in the [SpeechGrammar] object instance.",
        "event": false
      },
      "weight": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Sets and returns the weight of the [SpeechGrammar] object.",
        "event": false
      }
    }
  },
  {
    "name": "SpeechGrammarList",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[SpeechGrammarList]* interface of the Web Speech API represents a list of [SpeechGrammar] objects containing words or patterns of words that we want the recognition service to recognize.\n\nGrammar is defined using JSpeech Grammar Format (*JSGF*.) Other formats may also be supported in the future.",
    "abstract": false,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the number of [SpeechGrammar] objects contained in the [SpeechGrammarList].",
        "event": false
      }
    }
  },
  {
    "name": "SpeechRecognition",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[SpeechRecognition]* interface of the Web Speech API is the controller interface for the recognition service; this also handles the [SpeechRecognitionEvent] sent from the recognition service.\n\n\n*Note*: On some browsers, like Chrome, using Speech Recognition on a web page involves a server-based recognition engine. Your audio is sent to a web service for recognition processing, so it won't work offline.\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "grammars": {
        "type": "SpeechGrammarList",
        "array": false,
        "dartType": "SpeechGrammarList",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns and sets a collection of [SpeechGrammar] objects that represent the grammars that will be understood by the current [SpeechRecognition].",
        "event": false
      },
      "lang": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns and sets the language of the current [SpeechRecognition]. If not specified, this defaults to the HTML [lang] attribute value, or the user agent's language setting if that isn't set either.",
        "event": false
      },
      "continuous": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Controls whether continuous results are returned for each recognition, or only a single result. Defaults to single ([false].)",
        "event": false
      },
      "interimResults": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Controls whether interim results should be returned ([true]) or not ([false].) Interim results are results that are not yet final (e.g. the [SpeechRecognitionResult.isFinal] property is [false].)",
        "event": false
      },
      "maxAlternatives": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Sets the maximum number of [SpeechRecognitionAlternative]s provided per result. The default value is 1.",
        "event": false
      }
    }
  },
  {
    "name": "SpeechRecognitionAlternative",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[SpeechRecognitionAlternative]* interface of the Web Speech API represents a single word that has been recognized by the speech recognition service.",
    "abstract": true,
    "category": "interface",
    "props": {
      "transcript": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a string containing the transcript of the recognized word.",
        "event": false
      },
      "confidence": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a numeric estimate of how confident the speech recognition system is that the recognition is correct.",
        "event": false
      }
    }
  },
  {
    "name": "SpeechRecognitionErrorEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[SpeechRecognitionErrorEvent]* interface of the Web Speech API represents error messages from the recognition service.",
    "abstract": true,
    "category": "interface",
    "props": {
      "error": {
        "type": "SpeechRecognitionErrorCode",
        "array": false,
        "dartType": "SpeechRecognitionErrorCode",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the type of error raised.",
        "event": false
      },
      "message": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a message describing the error in more detail.",
        "event": false
      }
    }
  },
  {
    "name": "SpeechRecognitionEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SpeechRecognitionEvent]* interface of the Web Speech API represents the event object for the [result] and [nomatch] events, and contains all the data associated with an interim or final speech recognition result.",
    "abstract": true,
    "category": "interface",
    "props": {
      "resultIndex": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the lowest index value result in the [SpeechRecognitionResultList] \"array\" that has actually changed.",
        "event": false
      },
      "results": {
        "type": "SpeechRecognitionResultList",
        "array": false,
        "dartType": "SpeechRecognitionResultList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [SpeechRecognitionResultList] object representing all the speech recognition results for the current session.",
        "event": false
      }
    }
  },
  {
    "name": "SpeechRecognitionResult",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[SpeechRecognitionResult]* interface of the Web Speech API represents a single recognition match, which may contain multiple [SpeechRecognitionAlternative] objects.",
    "abstract": true,
    "category": "interface",
    "props": {
      "isFinal": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] that states whether this result is final (true) or not (false) — if so, then this is the final time this result will be returned; if not, then this result is an interim result, and may be updated later on.",
        "event": false
      },
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the length of the \"array\" — the number of [SpeechRecognitionAlternative] objects contained in the result (also referred to as \"n-best alternatives\".)",
        "event": false
      }
    }
  },
  {
    "name": "SpeechRecognitionResultList",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[SpeechRecognitionResultList]* interface of the Web Speech API represents a list of [SpeechRecognitionResult] objects, or a single one if results are being captured in [continuous] mode.",
    "abstract": true,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the length of the \"array\" — the number of [SpeechRecognitionResult] objects in the list.",
        "event": false
      }
    }
  },
  {
    "name": "SpeechSynthesis",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[SpeechSynthesis]* interface of the Web Speech API is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.",
    "abstract": true,
    "category": "interface",
    "props": {
      "paused": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] that returns [true] if the [SpeechSynthesis] object is in a paused state.",
        "event": false
      },
      "pending": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] that returns [true] if the utterance queue contains as-yet-unspoken utterances.",
        "event": false
      },
      "speaking": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] that returns [true] if an utterance is currently in the process of being spoken — even if [SpeechSynthesis] is in a paused state.",
        "event": false
      }
    }
  },
  {
    "name": "SpeechSynthesisErrorEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[SpeechSynthesisErrorEvent]* interface of the Web Speech API contains information about any errors that occur while processing [SpeechSynthesisUtterance] objects in the speech service.",
    "abstract": true,
    "category": "interface",
    "props": {
      "error": {
        "type": "SpeechSynthesisErrorCode",
        "array": false,
        "dartType": "SpeechSynthesisErrorCode",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an error code indicating what has gone wrong with a speech synthesis attempt.",
        "event": false
      }
    }
  },
  {
    "name": "SpeechSynthesisEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[SpeechSynthesisEvent]* interface of the Web Speech API contains information about the current state of [SpeechSynthesisUtterance] objects that have been processed in the speech service.",
    "abstract": true,
    "category": "interface",
    "props": {
      "charIndex": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the index position of the character in the [SpeechSynthesisUtterance.text] that was being spoken when the event was triggered.",
        "event": false
      },
      "elapsedTime": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the elapsed time in milliseconds after the [SpeechSynthesisUtterance.text] started being spoken that the event was triggered at.",
        "event": false
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the name associated with certain types of events occurring as the [SpeechSynthesisUtterance.text] is being spoken: the name of the SSML marker reached in the case of a [mark] event, or the type of boundary reached in the case of a [boundary] event.",
        "event": false
      },
      "utterance": {
        "type": "SpeechSynthesisUtterance",
        "array": false,
        "dartType": "SpeechSynthesisUtterance",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [SpeechSynthesisUtterance] instance that the event was triggered on.",
        "event": false
      }
    }
  },
  {
    "name": "SpeechSynthesisUtterance",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[SpeechSynthesisUtterance]* interface of the Web Speech API represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)",
    "abstract": false,
    "category": "interface",
    "props": {
      "lang": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets and sets the language of the utterance.",
        "event": false
      },
      "pitch": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets and sets the pitch at which the utterance will be spoken at.",
        "event": false
      },
      "rate": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets and sets the speed at which the utterance will be spoken at.",
        "event": false
      },
      "text": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets and sets the text that will be synthesised when the utterance is spoken.",
        "event": false
      },
      "voice": {
        "type": "SpeechSynthesisVoice",
        "array": false,
        "dartType": "SpeechSynthesisVoice",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets and sets the voice that will be used to speak the utterance.",
        "event": false
      },
      "volume": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets and sets the volume that the utterance will be spoken at.",
        "event": false
      }
    }
  },
  {
    "name": "SpeechSynthesisVoice",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[SpeechSynthesisVoice]* interface of the Web Speech API represents a voice that the system supports. Every [SpeechSynthesisVoice] has its own relative speech service including information about language, name and URI.",
    "abstract": true,
    "category": "interface",
    "props": {
      "default": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] indicating whether the voice is the default voice for the current app language ([true]), or not ([false].)",
        "event": false
      },
      "lang": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a BCP 47 language tag indicating the language of the voice.",
        "event": false
      },
      "localService": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Boolean] indicating whether the voice is supplied by a local speech synthesizer service ([true]), or a remote speech synthesizer service ([false].)",
        "event": false
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a human-readable name that represents the voice.",
        "event": false
      },
      "voiceURI": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the type of URI and location of the speech synthesis service for this voice.",
        "event": false
      }
    }
  },
  {
    "name": "StaticRange",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe DOM *[StaticRange]* interface extends [AbstractRange] to provide a method to specify a range of content in the DOM whose contents don't update to reflect changes which occur within the DOM tree. It offers the same set of properties and methods as [AbstractRange].\n\n[AbstractRange] and [StaticRange] are not available from web workers.\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "endContainer": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the DOM [Node] which contains the ending point of the range. The offset into the node at which the end position is located is indicated by [endOffset].",
        "event": false
      },
      "endOffset": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an integer value indicating the offset into the node given by [endContainer] at which the last character of the range is found.",
        "event": false
      },
      "startContainer": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the DOM [Node] which contains the starting point of the range (which is in turn identified by [startOffset].",
        "event": false
      },
      "startOffset": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an integer value indicating the offset into the node specified by [startContainer] at which the first character of the range is located.",
        "event": false
      }
    }
  },
  {
    "name": "StereoPannerNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\nThe [StereoPannerNode] interface of the Web Audio API represents a simple stereo panner node that can be used to pan an audio stream left or right. It is an [AudioNode] audio-processing module that positions an incoming audio stream in a stereo image using a low-cost equal-power panning algorithm.\n\n\nThe [pan] property takes a unitless value between [-1] (full left pan) and [1] (full right pan). This interface was introduced as a much simpler way to apply a simple panning effect than having to use a full [PannerNode].\n\n\n\n\n \n  \n   Number of inputs\n   [1]\n  \n  \n   Number of outputs\n   [1]\n  \n  \n   Channel count mode\n   [\"clamped-max\"]\n  \n  \n   Channel count\n   [2]\n  \n  \n   Channel interpretation\n   [\"speakers\"]\n  \n \n",
    "abstract": false,
    "category": "interface",
    "props": {
      "pan": {
        "type": "AudioParam",
        "array": false,
        "dartType": "AudioParam",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an a-rate [AudioParam] representing the amount of panning to apply.",
        "event": false
      }
    }
  },
  {
    "name": "Storage",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Storage]* interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.\n\nTo manipulate, for instance, the session storage for a domain, a call to [Window.sessionStorage] is made; whereas for local storage the call is made to [Window.localStorage].",
    "abstract": true,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an integer representing the number of data items stored in the [Storage] object.",
        "event": false
      }
    }
  },
  {
    "name": "StorageEstimate",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[StorageEstimate]* dictionary is used by the [StorageManager] to provide estimates of the size of a site's or application's data store and how much of it is in use. The [estimate()] method returns an object that conforms to this dictionary when its [Promise] resolves.\n\nThese values are only estimates for several reasons, including both performance and preventing storage capacity data from being used for fingerprinting purposes. See the individual property pages for details.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "StorageEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nA *[StorageEvent]* is sent to a window when a storage area it\n  has access to is changed within the context of another document.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "StorageManager",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[StorageManager]* interface of the Storage API provides an interface for managing persistance permissions and estimating available storage. You can get a reference to this interface using either [navigator.storage] or [WorkerNavigator.storage].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "StylePropertyMap",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[StylePropertyMap]* interface of the CSS Typed Object Model API provides a representation of a CSS declaration block that is an alternative to [CSSStyleDeclaration].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "StylePropertyMapReadOnly",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[StylePropertyMapReadOnly]* interface of the CSS Typed Object Model API provides a read-only representation of a CSS declaration block that is an alternative to [CSSStyleDeclaration]. Retrieve an instance of this interface using [Element.computedStyleMap()].",
    "abstract": true,
    "category": "interface",
    "props": {
      "size": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an unsinged long integer containing the size of the [StylePropertyMapReadOnly] object.",
        "event": false
      }
    }
  },
  {
    "name": "StyleSheet",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nAn object implementing the [StyleSheet] interface represents a single style sheet. CSS style sheets will further implement the more specialized [CSSStyleSheet] interface.",
    "abstract": true,
    "category": "interface",
    "props": {
      "disabled": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Boolean] representing whether the current stylesheet has been applied or not.",
        "event": false
      },
      "href": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] representing the location of the stylesheet.",
        "event": false
      },
      "media": {
        "type": "MediaList",
        "array": false,
        "dartType": "MediaList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [MediaList] representing the intended destination medium for style information.",
        "event": false
      },
      "ownerNode": {
        "type": "ProcessingInstruction)",
        "array": false,
        "dartType": "ProcessingInstruction)",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Node] associating this style sheet with the current document.",
        "event": false
      },
      "parentStyleSheet": {
        "type": "StyleSheet",
        "array": false,
        "dartType": "StyleSheet",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [StyleSheet] including this one, if any; returns [null] if there aren't any.",
        "event": false
      },
      "title": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] representing the advisory title of the current style sheet.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] representing the style sheet language for this style sheet.",
        "event": false
      }
    }
  },
  {
    "name": "StyleSheetList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [StyleSheetList] interface represents a list of [StyleSheet].\n\nIt is an array-like object but can't be iterated over using [Array] methods. However It can be iterated over in a standard [for] loop over its indices, or converted to an [Array].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SubmitEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*SubmitEvent*] interface defines the object used to represent an HTML form's [submit] event. This event is fired at the [<form>] when the form's submit action is invoked.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SubtleCrypto",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [*SubtleCrypto*] interface of the Web Crypto API provides a number of low-level cryptographic functions. Access to the features of [SubtleCrypto] is obtained through the [subtle] property of the [Crypto] object you get from [Window.crypto].\n\n\n*Warning:* This API provides a number of low-level cryptographic primitives. It's very easy to misuse them, and the pitfalls involved can be very subtle.\n\nEven assuming you use the basic cryptographic functions correctly, secure key management and overall security system design are extremely hard to get right, and are generally the domain of specialist security experts.\n\nErrors in security system design and implementation can make the security of the system completely ineffective.\n\n*If you're not sure you know what you are doing, you probably shouldn't be using this API.*\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGAElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGAElement]* interface provides access to the properties of [<a>] element, as well as methods to manipulate them.",
    "abstract": true,
    "category": "interface",
    "props": {
      "download": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "See [HTMLAnchorElement.download].",
        "event": false
      },
      "hreflang": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [hreflang] attribute, indicating the language of the linked resource.",
        "event": false
      },
      "ping": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the ping attribute, containing a space-separated list of URLs to which, when the hyperlink is followed, [POST] requests with the body [PING] will be sent by the browser (in the background). Typically used for tracking.",
        "event": false
      },
      "referrerPolicy": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "See [HTMLAnchorElement.referrerPolicy].",
        "event": false
      },
      "rel": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "See [HTMLAnchorElement.rel].",
        "event": false
      },
      "relList": {
        "type": "DOMTokenList",
        "array": false,
        "dartType": "DOMTokenList",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "See [HTMLAnchorElement.relList].",
        "event": false
      },
      "target": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "It corresponds to the [target] attribute of the given element.",
        "event": false
      },
      "text": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] being a synonym for the [Node.textContent] property.",
        "event": false
      },
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] that reflects the [type] attribute, indicating the MIME type of the linked resource.",
        "event": false
      }
    }
  },
  {
    "name": "SVGAltGlyphDefElement",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[SVGAltGlyphDefElement]* interface corresponds to the [<altGlyphDef>] element.\n\n\n\n\n\n\n*Warning:* This interface was removed in the SVG 2 specification.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGAltGlyphItemElement",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[SVGAltGlyphItemElement]* interface corresponds to the [<altGlyphItem>] element.\n\n\n\n\n\n\n*Warning:* This interface was removed in the SVG 2 specification.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGAngle",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGAnimatedAngle",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGAnimatedBoolean",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGAnimatedEnumeration",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGAnimatedInteger",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGAnimatedLength",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGAnimatedLengthList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGAnimatedNumber",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGAnimatedNumberList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {
      "baseVal": {
        "type": "SVGNumberList",
        "array": false,
        "dartType": "SVGNumberList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [SVGNumberList] that represents the base value of the given attribute before applying any animations.",
        "event": false
      },
      "animVal": {
        "type": "SVGNumberList",
        "array": false,
        "dartType": "SVGNumberList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a read only [SVGNumberList] that represents the current animated value of the given attribute. If the given attribute is not currently being animated, then the [SVGNumberList] will have the same contents as [baseVal]. The object referenced by [animVal] will always be distinct from the one referenced by [baseVal], even when the attribute is not animated.",
        "event": false
      }
    }
  },
  {
    "name": "SVGAnimatedPreserveAspectRatio",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {
      "baseVal": {
        "type": "SVGPreserveAspectRatio",
        "array": false,
        "dartType": "SVGPreserveAspectRatio",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [SVGPreserveAspectRatio] that represents the base value of the given attribute before applying any animations.",
        "event": false
      },
      "animVal": {
        "type": "SVGPreserveAspectRatio",
        "array": false,
        "dartType": "SVGPreserveAspectRatio",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [SVGPreserveAspectRatio] that represents the current animated value of the given attribute. If the given attribute is not currently being animated, then the [SVGPreserveAspectRatio] will have the same contents as [baseVal]. The object referenced by [animVal] is always distinct from the one referenced by [baseVal], even when the attribute is not animated.",
        "event": false
      }
    }
  },
  {
    "name": "SVGAnimatedRect",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [SVGAnimatedRect] interface is used for attributes of basic [SVGRect] which can be animated.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGAnimatedString",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*SVGAnimatedString*] interface represents string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this.",
    "abstract": true,
    "category": "interface",
    "props": {
      "animVal": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "This is a [DOMString] representing the animation value. If the given attribute or property is being animated it contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, it contains the same value as baseVal.",
        "event": false
      },
      "baseVal": {
        "type": "TrustedScriptURL)",
        "array": false,
        "dartType": "TrustedScriptURL)",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "This is a [DOMString] representing the base value. The base value of the given attribute before applying any animations. Setter throws DOMException.",
        "event": false
      }
    }
  },
  {
    "name": "SVGAnimatedTransformList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGAnimateElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGAnimateElement]* interface corresponds to the [<animate>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGAnimateMotionElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGAnimateMotionElement]* interface corresponds to the [<animateMotion>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGAnimateTransformElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [SVGAnimateTransformElement] interface corresponds to the [<animateTransform>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGAnimationElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGAnimationElement]* interface is the base interface for all of the animation element interfaces: [SVGAnimateElement], [SVGSetElement], [SVGAnimateColorElement], [SVGAnimateMotionElement] and [SVGAnimateTransformElement].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "targetElement": {
        "type": "SVGElement",
        "array": false,
        "dartType": "SVGElement",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGElement] representing the element which is being animated. If no target element is being animated (for example, because the [href] specifies an unknown element) the value returned is [null].",
        "event": false
      }
    }
  },
  {
    "name": "SVGCircleElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGCircleElement]* interface is an interface for the [<circle>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "cx": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "This property defines the x-coordinate of the center of the [<circle>] element. It is denoted by the [cx] attribute of the element.\n ",
        "event": false
      },
      "cy": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "This property defines the y-coordinate of the center of the [<circle>] element. It is denoted by the [cy] attribute of the element.\n ",
        "event": false
      },
      "r": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "This property defines the radius of the [<circle>] element. It is denoted by the [r] of the element.\n ",
        "event": false
      }
    }
  },
  {
    "name": "SVGClipPathElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGClipPathElement]* interface provides access to the properties of [<clipPath>] elements, as well as methods to manipulate them.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "clipPathUnits": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [clipPathUnits] attribute of the given [<clipPath>] element. Takes one of the constants defined in [SVGUnitTypes].",
        "event": false
      }
    }
  },
  {
    "name": "SVGComponentTransferFunctionElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGComponentTransferFunctionElement]* interface defines a base interface used by the component transfer function interfaces.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "type": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [type] attribute of the given element. It takes one of the [SVG_FECOMPONENTTRANSFER_TYPE_*] constants defined on this interface.",
        "event": false
      },
      "tableValues": {
        "type": "SVGAnimatedNumberList",
        "array": false,
        "dartType": "SVGAnimatedNumberList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumberList] corresponding to the [tableValues] attribute of the given element.",
        "event": false
      },
      "slope": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [slope] attribute of the given element.",
        "event": false
      },
      "intercept": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [intercept] attribute of the given element.",
        "event": false
      },
      "amplitude": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [amplitude] attribute of the given element.",
        "event": false
      },
      "exponent": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [exponent] attribute of the given element.",
        "event": false
      },
      "offset": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [offset] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGDefsElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGDefsElement]* interface corresponds to the [<defs>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGDescElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGDescElement]* interface corresponds to the [<desc>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nAll of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the [SVGElement] interface.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "dataset": {
        "type": "DOMStringMap",
        "array": false,
        "dartType": "DOMStringMap",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMStringMap] object which provides a list of key/value pairs of named data attributes which correspond to custom data attributes attached to the element. These can also be defined in SVG using attributes of the form [data-*], where [*] is the key name for the pair. This works just like HTML's [HTMLElement.dataset] property and HTML's [data-*] global attribute.",
        "event": false
      },
      "className": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "An [SVGAnimatedString] that reflects the value of the [class] attribute on the given element, or the empty string if [class] is not present. This attribute is deprecated and may be removed in a future version of this specification. Authors are advised to use [Element.classList] instead.",
        "event": false
      },
      "ownerSVGElement": {
        "type": "SVGSVGElement",
        "array": false,
        "dartType": "SVGSVGElement",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGSVGElement] referring to the nearest ancestor [<svg>] element. [null] if the given element is the outermost [<svg>] element.",
        "event": false
      },
      "viewportElement": {
        "type": "SVGElement",
        "array": false,
        "dartType": "SVGElement",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [SVGElement], which established the current viewport. Often, the nearest ancestor [<svg>] element. [null] if the given element is the outermost [<svg>] element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGEllipseElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGEllipseElement]* interface provides access to the properties of [<ellipse>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "cx": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "This property returns a [SVGAnimatedLength] reflecting the [cx] attribute of the given [<ellipse>] element.",
        "event": false
      },
      "cy": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "This property returns a [SVGAnimatedLength] reflecting the [cy] attribute of the given [<ellipse>] element.",
        "event": false
      },
      "rx": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "This property returns a [SVGAnimatedLength] reflecting the [rx] attribute of the given [<ellipse>] element.",
        "event": false
      },
      "ry": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "This property returns a [SVGAnimatedLength] reflecting the [ry] attribute of the given [<ellipse>] element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFEBlendElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEBlendElement]* interface corresponds to the [<feBlend>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "in1": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedString] corresponding to the [in] attribute of the given element.",
        "event": false
      },
      "in2": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedString] corresponding to the [in2] attribute of the given element.",
        "event": false
      },
      "mode": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [mode] attribute of the given element. It takes one of the [SVG_FEBLEND_MODE_*] constants defined on this interface.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFEColorMatrixElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEColorMatrixElement]* interface corresponds to the [<feColorMatrix>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "in1": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedString] corresponding to the [in] attribute of the given element.",
        "event": false
      },
      "type": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [type] attribute of the given element. It takes one of the [SVG_FECOLORMATRIX_TYPE_*] constants defined on this interface.",
        "event": false
      },
      "values": {
        "type": "SVGAnimatedNumberList",
        "array": false,
        "dartType": "SVGAnimatedNumberList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumberList] corresponding to the [values] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFEComponentTransferElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEComponentTransferElement]* interface corresponds to the [<feComponentTransfer>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "in1": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedString] corresponding to the [in] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFECompositeElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFECompositeElement]* interface corresponds to the [<feComposite>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "in1": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedString] corresponding to the [in] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFEConvolveMatrixElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEConvolveMatrixElement]* interface corresponds to the [<feConvolveMatrix>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "bias": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [bias] attribute of the given element.",
        "event": false
      },
      "divisor": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [divisor] attribute of the given element.",
        "event": false
      },
      "edgeMode": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [edgeMode] attribute of the given element. Takes one of the [SVG_EDGEMODE_*] constants defined on this interface.",
        "event": false
      },
      "in1": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedString] corresponding to the [in] attribute of the given element.",
        "event": false
      },
      "kernelMatrix": {
        "type": "SVGAnimatedNumberList",
        "array": false,
        "dartType": "SVGAnimatedNumberList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumberList] corresponding to the [kernelMatrix] attribute of the given element.",
        "event": false
      },
      "kernelUnitLengthX": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [kernelUnitLength] attribute of the given element.",
        "event": false
      },
      "kernelUnitLengthY": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [kernelUnitLength] attribute of the given element.",
        "event": false
      },
      "orderX": {
        "type": "SVGAnimatedInteger",
        "array": false,
        "dartType": "SVGAnimatedInteger",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedInteger] corresponding to the [order] attribute of the given element.",
        "event": false
      },
      "orderY": {
        "type": "SVGAnimatedInteger",
        "array": false,
        "dartType": "SVGAnimatedInteger",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedInteger] corresponding to the [order] attribute of the given element.",
        "event": false
      },
      "preserveAlpha": {
        "type": "SVGAnimatedBoolean",
        "array": false,
        "dartType": "SVGAnimatedBoolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedBoolean] corresponding to the [preserveAlpha] attribute of the given element.",
        "event": false
      },
      "targetX": {
        "type": "SVGAnimatedInteger",
        "array": false,
        "dartType": "SVGAnimatedInteger",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedInteger] corresponding to the [targetX] attribute of the given element.",
        "event": false
      },
      "targetY": {
        "type": "SVGAnimatedInteger",
        "array": false,
        "dartType": "SVGAnimatedInteger",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedInteger] corresponding to the [targetY] attribute of the given element.",
        "event": false
      },
      "x": {
        "type": "SVGAnimatedNumberList",
        "array": false,
        "dartType": "SVGAnimatedNumberList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [x] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFEDiffuseLightingElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEDiffuseLightingElement]* interface corresponds to the [<feDiffuseLighting>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "diffuseConstant": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [diffuseConstant] attribute of the given element.",
        "event": false
      },
      "in1": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedString] corresponding to the [in] attribute of the given element.",
        "event": false
      },
      "kernelUnitLengthX": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the X component of the [kernelUnitLength] attribute of the given element.",
        "event": false
      },
      "kernelUnitLengthY": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the Y component of the [kernelUnitLength] attribute of the given element.",
        "event": false
      },
      "surfaceScale": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [surfaceScale] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFEDisplacementMapElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEDisplacementMapElement]* interface corresponds to the [<feDisplacementMap>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "in1": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedString] corresponding to the [in] attribute of the given element.",
        "event": false
      },
      "in2": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedString] corresponding to the [in2] attribute of the given element.",
        "event": false
      },
      "scale": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [scale] attribute of the given element.",
        "event": false
      },
      "xChannelSelector": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [xChannelSelect] attribute of the given element. It takes one of the [SVG_CHANNEL_*] constants defined on this interface.",
        "event": false
      },
      "yChannelSelector": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [yChannelSelect] attribute of the given element. It takes one of the [SVG_CHANNEL_*] constants defined on this interface.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFEDistantLightElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEDistantLightElement]* interface corresponds to the [<feDistantLight>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "azimuth": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [azimuth] attribute of the given element.",
        "event": false
      },
      "elevation": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [elevation] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFEDropShadowElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEDropShadowElement]* interface corresponds to the [<feDropShadow>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "dx": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [dx] attribute of the given element.",
        "event": false
      },
      "dy": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [dy] attribute of the given element.",
        "event": false
      },
      "in1": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedString] corresponding to the [in] attribute of the given element.",
        "event": false
      },
      "stdDeviationX": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the (possibly automatically computed) X component of the [stdDeviationX] attribute of the given element.",
        "event": false
      },
      "stdDeviationY": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the (possibly automatically computed) Y component of the [stdDeviationY] attribute of the given element.",
        "event": false
      },
      "x": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [x] attribute of the given element.",
        "event": false
      },
      "y": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [y] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFEFloodElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEFloodElement]* interface corresponds to the [<feFlood>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGFEFuncAElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEFuncAElement]* interface corresponds to the [<feFuncA>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGFEFuncBElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEFuncBElement]* interface corresponds to the [<feFuncB>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGFEFuncGElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEFuncGElement]* interface corresponds to the [<feFuncG>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGFEFuncRElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEFuncRElement]* interface corresponds to the [<feFuncR>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGFEGaussianBlurElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEGaussianBlurElement]* interface corresponds to the [<feGaussianBlur>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "edgeMode": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [edgeMode] attribute of the given element. Takes one of the [SVG_EDGEMODE_*] constants defined on this interface.",
        "event": false
      },
      "in1": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedString] corresponding to the [in] attribute of the given element.",
        "event": false
      },
      "stdDeviationX": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the (possibly automatically computed) X component of the [stdDeviation] attribute of the given element.",
        "event": false
      },
      "stdDeviationY": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the (possibly automatically computed) Y component of the [stdDeviation] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFEImageElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEImageElement]* interface corresponds to the [<feImage>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "crossOrigin": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedString] reflects the [crossorigin] attribute of the given element, limited to only known values.",
        "event": false
      },
      "preserveAspectRatio": {
        "type": "SVGAnimatedPreserveAspectRatio",
        "array": false,
        "dartType": "SVGAnimatedPreserveAspectRatio",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedPreserveAspectRatio] corresponding to the [preserveAspectRatio] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFEMergeElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEMergeElement]* interface corresponds to the [<feMerge>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGFEMergeNodeElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEMergeNodeElement]* interface corresponds to the [<feMergeNode>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "in1": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedString] corresponding to the [in] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFEMorphologyElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEMorphologyElement]* interface corresponds to the [<feMorphology>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "in1": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedString] corresponding to the [in] attribute of the given element.",
        "event": false
      },
      "operator": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [operator] attribute of the given element. It takes one of the [SVG_MORPHOLOGY_OPERATOR_*] constants defined on this interface.",
        "event": false
      },
      "radiusX": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the X component of the [radius] attribute of the given element.",
        "event": false
      },
      "radiusY": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the Y component of the [radius] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFEOffsetElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEOffsetElement]* interface corresponds to the [<feOffset>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "in1": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedString] corresponding to the [in] attribute of the given element.",
        "event": false
      },
      "dx": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [dx] attribute of the given element.",
        "event": false
      },
      "dy": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [dy] attribute of the given element.",
        "event": false
      },
      "x": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [x] attribute of the given element.",
        "event": false
      },
      "y": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [y] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFEPointLightElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFEPointLightElement]* interface corresponds to the [<fePointLight>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "x": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [x] attribute of the given element.",
        "event": false
      },
      "y": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [y] attribute of the given element.",
        "event": false
      },
      "z": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [z] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFESpecularLightingElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFESpecularLightingElement]* interface corresponds to the [<feSpecularLighting>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "in1": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedString] corresponding to the [in] attribute of the given element.",
        "event": false
      },
      "kernelUnitLengthX": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the X component of the [kernelUnitLength] attribute of the given element.",
        "event": false
      },
      "kernelUnitLengthY": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the Y component of the [kernelUnitLength] attribute of the given element.",
        "event": false
      },
      "specularConstant": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [specularConstant] attribute of the given element.",
        "event": false
      },
      "specularExponent": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [specularExponent] attribute of the given element.",
        "event": false
      },
      "surfaceScale": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [surfaceScale] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFESpotLightElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFESpotLightElement]* interface corresponds to the [<feSpotLight>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "x": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [x] attribute of the given element.",
        "event": false
      },
      "y": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [y] attribute of the given element.",
        "event": false
      },
      "z": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [z] attribute of the given element.",
        "event": false
      },
      "specularExponent": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [specularExponent] attribute of the given element.",
        "event": false
      },
      "limitingConeAngle": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [limitingConeAngle] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFETileElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFETileElement]* interface corresponds to the [<feTile>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "in1": {
        "type": "SVGAnimatedString",
        "array": false,
        "dartType": "SVGAnimatedString",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedString] corresponding to the [in] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFETurbulenceElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFETurbulenceElement]* interface corresponds to the [<feTurbulence>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "baseFrequencyX": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the X component of the [baseFrequency] attribute of the given element.",
        "event": false
      },
      "baseFrequencyY": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the Y component of the [baseFrequency] attribute of the given element.",
        "event": false
      },
      "numOctaves": {
        "type": "SVGAnimatedInteger",
        "array": false,
        "dartType": "SVGAnimatedInteger",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedInteger] corresponding to the [numOctaves] attribute of the given element.",
        "event": false
      },
      "seed": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [seed] attribute of the given element.",
        "event": false
      },
      "stitchTiles": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [stitchTiles] attribute of the given element. It takes one of the [SVG_STITCHTYPE_*] constants defined on this interface.",
        "event": false
      },
      "type": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [type] attribute of the given element. It takes one of the [SVG_TURBULENCE_TYPE_*] constants defined on this interface.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFilterElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGFilterElement]* interface provides access to the properties of [<filter>] elements, as well as methods to manipulate them.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "filterUnits": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] that corresponds to the [filterUnits] attribute of the given [<filter>] element. Takes one of the constants defined in [SVGUnitTypes].",
        "event": false
      },
      "primitiveUnits": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] that corresponds to the [primitiveUnits] attribute of the given [<filter>] element. Takes one of the constants defined in [SVGUnitTypes].",
        "event": false
      },
      "x": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] that corresponds to the [x] attribute on the given [<filter>] element.",
        "event": false
      },
      "y": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] that corresponds to the [y] attribute of the given [<filter>] element.",
        "event": false
      },
      "width": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] that corresponds to the [width] attribute of the given [<filter>] element.",
        "event": false
      },
      "height": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] that corresponds to the [height] attribute of the given [<filter>] element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGFontFaceElement",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[SVGFontFaceElement]* interface corresponds to the [<font-face>] elements.\n\nObject-oriented access to the attributes of the [<font-face>] element via the SVG DOM is not possible.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGFontFaceFormatElement",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[SVGFontFaceFormatElement]* interface corresponds to the [<font-face-format>] elements.\n\nObject-oriented access to the attributes of the [<font-face-format>] element via the SVG DOM is not possible.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGFontFaceNameElement",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[SVGFontFaceNameElement]* interface corresponds to the [<font-face-name>] elements.\n\nObject-oriented access to the attributes of the [<font-face-name>] element via the SVG DOM is not possible.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGFontFaceSrcElement",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[SVGFontFaceSrcElement]* interface corresponds to the [<font-face-src>] elements.\n\nObject-oriented access to the attributes of the [<font-face-src>] element via the SVG DOM is not possible.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGFontFaceUriElement",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[SVGFontFaceUriElement]* interface corresponds to the [<font-face-uri>] elements.\n\nObject-oriented access to the attributes of the [<font-face-uri>] element via the SVG DOM is not possible.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGForeignObjectElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGForeignObjectElement]* interface provides access to the properties of [<foreignObject>] elements, as well as methods to manipulate them.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "x": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [x] attribute of the given [<foreignObject>] element.",
        "event": false
      },
      "y": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [x] attribute of the given [<foreignObject>] element.",
        "event": false
      },
      "width": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [width] attribute of the given [<foreignObject>] element.",
        "event": false
      },
      "height": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [height] attribute of the given [<foreignObject>] element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGGElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGGElement]* interface corresponds to the [<g>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGGeometryElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [SVGGeometryElement] interface represents SVG elements whose rendering is defined by geometry with an equivalent path, and which can be filled and stroked. This includes paths and the basic shapes.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "pathLength": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "This property reflects the [pathLength] attribute.",
        "event": false
      }
    }
  },
  {
    "name": "SVGGradientElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGGradient]* interface is a base interface used by [SVGLinearGradientElement] and [SVGRadialGradientElement].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "gradientUnits": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [gradientUnits] attribute on the given element. This property takes one of the constants defined in [SVGUnitTypes].",
        "event": false
      },
      "gradientTransform": {
        "type": "SVGAnimatedTransformList",
        "array": false,
        "dartType": "SVGAnimatedTransformList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedTransformList] corresponding to the [gradientTransform] attribute on the given element.",
        "event": false
      },
      "spreadMethod": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [spreadMethod] attribute on the given element. One of the spread method types defined on this interface.",
        "event": false
      }
    }
  },
  {
    "name": "SVGGraphicsElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGGraphicsElement]* interface represents SVG elements whose primary purpose is to directly render graphics into a group.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "transform": {
        "type": "SVGAnimatedTransformList",
        "array": false,
        "dartType": "SVGAnimatedTransformList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedTransformList] reflecting the computed value of the [transform] property and its corresponding [transform] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGHKernElement",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[SVGHKernElement]* interface corresponds to the [<hkern>] elements.\n\nObject-oriented access to the attributes of the [<hkern>] element via the SVG DOM is not possible.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGImageElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGImageElement]* interface corresponds to the [<image>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "crossOrigin": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] corresponding to the [crossorigin] attribute of the given [<image>] element.",
        "event": false
      },
      "height": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [height] attribute of the given [<image>] element.",
        "event": false
      },
      "preserveAspectRatio": {
        "type": "SVGAnimatedPreserveAspectRatio",
        "array": false,
        "dartType": "SVGAnimatedPreserveAspectRatio",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedPreserveAspectRatio] corresponding to the [preserveAspectRatio] attribute of the given [<image>] element.",
        "event": false
      },
      "width": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [width] attribute of the given [<image>] element.",
        "event": false
      },
      "x": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [x] attribute of the given [<image>] element.",
        "event": false
      },
      "y": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [y] attribute of the given [<image>] element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGLength",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGLengthList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGLinearGradientElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGLinearGradientElement]* interface corresponds to the [<linearGradient>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "x1": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [x1] attribute of the given [<linearGradient>] element.",
        "event": false
      },
      "y1": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [y1] attribute of the given [<linearGradient>] element.",
        "event": false
      },
      "x2": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [x2] attribute of the given [<linearGradient>] element.",
        "event": false
      },
      "y2": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [y2] attribute of the given [<linearGradient>] element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGLineElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGLineElement]* interface provides access to the properties of [<line>] elements, as well as methods to manipulate them.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "x1": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLength] that corresponds to attribute [x1] on the given [<line>] element.",
        "event": false
      },
      "y1": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLength] that corresponds to attribute [y1] on the given [<line>] element.",
        "event": false
      },
      "x2": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLength] that corresponds to attribute [x2] on the given [<line>] element.",
        "event": false
      },
      "y2": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLength] that corresponds to attribute [y2] on the given [<line>] element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGMarkerElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGMarkerElement]* interface provides access to the properties of [<marker>] elements, as well as methods to manipulate them. The [<marker>] element defines the graphics used for drawing marks on a shape.\n\n\n\n\n\nThe following properties and methods all return, or act on the attributes of the [<marker>] element represented by [SVGMarkerElement].",
    "abstract": true,
    "category": "interface",
    "props": {
      "markerUnits": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedEnumeration] object, with one of the following values:\n    \n      0\n      [SVG_MARKERUNITS_UNKNOWN] which means that the [markerUnits] attribute has a value other than the two predefined keywords.\n      1\n      [SVG_MARKERUNITS_USERSPACEONUSE] which means that the [markerUnits] attribute has the keyword value [userSpaceOnUse].\n      2\n      [SVG_MARKERUNITS_STROKEWIDTH] which means that the [markerUnits] attribute has the keyword value [strokeWidth].\n    \n  ",
        "event": false
      },
      "markerWidth": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLength] object containing the width of the [<marker>] viewport.",
        "event": false
      },
      "markerHeight": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLength] object containing the height of the [<marker>] viewport.",
        "event": false
      },
      "orientType": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedEnumeration] object, with one of the following values:\n    \n      0\n      [SVG_MARKER_ORIENT_UNKNOWN] which means that the [orient] attribute has a value other than the two predefined keywords.\n      1\n      [SVG_MARKERUNITS_ORIENT_AUTO] which means that the [orient] attribute has the keyword value [auto].\n      2\n      [SVG_MARKERUNITS_ORIENT_ANGLE] which means that the [orient] attribute has an [<angle>] or [<number>] value indicating the angle.\n    \n  ",
        "event": false
      },
      "orientAngle": {
        "type": "SVGAnimatedAngle",
        "array": false,
        "dartType": "SVGAnimatedAngle",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedAngle] object containing the angle of the [orient] attribute.",
        "event": false
      },
      "refX": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLength] object containing the value of the [refX] attribute of the [<marker>].",
        "event": false
      },
      "refY": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLength] object containing the value of the [refY] attribute of the [<marker>].",
        "event": false
      }
    }
  },
  {
    "name": "SVGMaskElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGMaskElement]* interface provides access to the properties of [<mask>] elements, as well as methods to manipulate them.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "maskUnits": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [maskUnits] attribute of the given [<mask>] element. Takes one of the constants defined in [SVGUnitTypes].",
        "event": false
      },
      "maskContentUnits": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [maskContentUnits] attribute of the given [<mask>] element. Takes one of the constants defined in [SVGUnitTypes].",
        "event": false
      },
      "x": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [x] attribute of the given [<mask>] element.",
        "event": false
      },
      "y": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [y] attribute of the given [<mask>] element.",
        "event": false
      },
      "width": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [width] attribute of the given [<mask>] element.",
        "event": false
      },
      "height": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [height] attribute of the given [<mask>] element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGMatrix",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nMany of SVG's graphics operations utilize 2x3 matrices of the form:\n\n[a c e]\n[b d f]\n\nwhich, when expanded into a 3x3 matrix for the purposes of matrix arithmetic, become:\n\n[a c e]\n[b d f]\n[0 0 1]\n\n\nAn *[SVGMatrix]* object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.\n\n\n*Warning:* SVG 2 replaced the [SVGMatrix] interface by the more general [DOMMatrix] and [DOMMatrixReadOnly] interfaces.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGMetadataElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGMetadataElement]* interface corresponds to the [<metadata>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGMPathElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGMPathElement]* interface corresponds to the [<mpath>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGNumber",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGNumber]* interface corresponds to the [<number>] basic data type.\n\nAn [SVGNumber] object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.",
    "abstract": true,
    "category": "interface",
    "props": {
      "value": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A float representing the number.\n Note: If the [SVGNumber] is read-only, a [DOMException] with the code NO_MODIFICATION_ALLOWED_ERR is raised on an attempt to change the value.\n ",
        "event": false
      }
    }
  },
  {
    "name": "SVGNumberList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGPathElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGPathElement]* interface corresponds to the [<path>] element.\n\n\n\n\n\n\n*Note:* In SVG 2 the [getPathSegAtLength()] and [createSVGPathSeg*] methods were removed and the [pathLength] property and the [getTotalLength()] and [getPointAtLength()] methods were moved to [SVGGeometryElement].\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGPatternElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGPatternElement]* interface corresponds to the [<pattern>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "patternUnits": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [patternUnits] attribute of the given [<pattern>] element. Takes one of the constants defined in [SVGUnitTypes].",
        "event": false
      },
      "patternContentUnits": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [patternContentUnits] attribute of the given [<pattern>] element. Takes one of the constants defined in [SVGUnitTypes].",
        "event": false
      },
      "patternTransform": {
        "type": "SVGAnimatedTransformList",
        "array": false,
        "dartType": "SVGAnimatedTransformList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedTransformList] corresponding to the [patternTransform] attribute of the given [<pattern>] element.",
        "event": false
      },
      "x": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [x] attribute of the given [<pattern>] element.",
        "event": false
      },
      "y": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [y] attribute of the given [<pattern>] element.",
        "event": false
      },
      "width": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [width] attribute of the given [<pattern>] element.",
        "event": false
      },
      "height": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [height] attribute of the given [<pattern>] element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGPoint",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nAn [SVGPoint] represents a 2D or 3D point in the SVG coordinate system.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGPointList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGPointList]* interface represents a list of [SVGPoint] objects.\n\nAn [SVGPointList] can be designated as read-only, which means that attempts to modify the object will result in an exception being thrown.",
    "abstract": true,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the number of points in the list.",
        "event": false
      },
      "numberOfItems": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the number of points in the list.",
        "event": false
      }
    }
  },
  {
    "name": "SVGPolygonElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGPolygonElement]* interface provides access to the properties of [<polygon>] elements, as well as methods to manipulate them.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGPolylineElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGPolylineElement]* interface provides access to the properties of [<polyline>] elements, as well as methods to manipulate them.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGPreserveAspectRatio",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGRadialGradientElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGRadialGradientElement]* interface corresponds to the [<RadialGradient>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "cx": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [cy] attribute of the given [<RadialGradient>] element.",
        "event": false
      },
      "r": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [r] attribute of the given [<RadialGradient>] element.",
        "event": false
      },
      "fx": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [fx] attribute of the given [<RadialGradient>] element.",
        "event": false
      },
      "fy": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [fy] attribute of the given [<RadialGradient>] element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGRect",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGRect]* represents a rectangle. Rectangles consist of an [x] and [y] coordinate pair identifying a minimum [x] value, a minimum [y] value, and a [width] and [height], which are constrained to be non-negative.\n\nAn *[SVGRect]* object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGRectElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [SVGRectElement] interface provides access to the properties of [<rect>] elements, as well as methods to manipulate them.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "x": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLength] corresponding to the [x] attribute of the given [<rect>] element.",
        "event": false
      },
      "y": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLength] corresponding to the [y] attribute of the given [<rect>] element.",
        "event": false
      },
      "width": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLength] corresponding to the [width] attribute of the given [<rect>] element.",
        "event": false
      },
      "height": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLength] corresponding to the [height] attribute of the given [<rect>] element.",
        "event": false
      },
      "rx": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLength] corresponding to the [rx] attribute of the given [<rect>] element.",
        "event": false
      },
      "ry": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLength] corresponding to the [ry] attribute of the given [<rect>] element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGRenderingIntent",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[SVGRenderingIntent]* interface defines the enumerated list of possible values for [rendering-intent] attributes or descriptors.\n\n\n\n\n\n\n*Warning:* This interface was removed in the SVG 2 specification.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGScriptElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGScriptElement]* interface corresponds to the SVG [<script>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] corresponding to the [type] attribute of the given [<script>] element. A [DOMException] is raised with the code [NO_MODIFICATION_ALLOWED_ERR] on an attempt to change the value of a read only attribute.",
        "event": false
      },
      "crossOrigin": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] corresponding to the [crossorigin] attribute of the given [<script>] element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGSetElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGSetElement]* interface corresponds to the [<set>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGStopElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGStopElement]* interface corresponds to the [<stop>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "offset": {
        "type": "SVGAnimatedNumber",
        "array": false,
        "dartType": "SVGAnimatedNumber",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedNumber] corresponding to the [offset] of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGStringList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGStyleElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {
      "type": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] corresponding to the [type] attribute of the given element.\n SVG 1.1 defined that a [DOMException] is raised with code [NO_MODIFICATION_ALLOWED_ERR] on an attempt to change the value of a read-only attribute. This restriction was removed in SVG 2.\n ",
        "event": false
      },
      "media": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] corresponding to the [media] attribute of the given element.\n SVG 1.1 defined that a [DOMException] is raised with code [NO_MODIFICATION_ALLOWED_ERR] on an attempt to change the value of a read-only attribute. This restriction was removed in SVG 2.\n ",
        "event": false
      },
      "title": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] corresponding to the [title] attribute of the given element.\n SVG 1.1 defined that a [DOMException] is raised with code [NO_MODIFICATION_ALLOWED_ERR] on an attempt to change the value of a read-only attribute. This restriction was removed in SVG 2.\n ",
        "event": false
      }
    }
  },
  {
    "name": "SVGSVGElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGSVGElement]* interface provides access to the properties of [<svg>] elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "x": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [x] attribute of the given [<svg>] element.",
        "event": false
      },
      "y": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [y] attribute of the given [<svg>] element.",
        "event": false
      },
      "width": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [width] attribute of the given [<svg>] element.",
        "event": false
      },
      "height": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [height] attribute of the given [<svg>] element.",
        "event": false
      },
      "currentScale": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "On an outermost [<svg>] element, this float attribute indicates the current scale factor relative to the initial view to take into account user magnification and panning operations. DOM attributes [currentScale] and [currentTranslate] are equivalent to the 2×3 matrix [[a b c d e f] = [currentScale 0 0 currentScale currentTranslate.x currentTranslate.y]]. If \"magnification\" is enabled (i.e., [zoomAndPan=\"magnify\"]), then the effect is as if an extra transformation were placed at the outermost level on the SVG document fragment (i.e., outside the outermost [<svg>] element).",
        "event": false
      },
      "currentTranslate": {
        "type": "DOMPointReadOnly",
        "array": false,
        "dartType": "DOMPointReadOnly",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGPoint] representing the translation factor that takes into account user \"magnification\" corresponding to an outermost [<svg>] element. The behavior is undefined for [<svg>] elements that are not at the outermost level.",
        "event": false
      }
    }
  },
  {
    "name": "SVGSwitchElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGSwitchElement]* interface corresponds to the [<switch>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGSymbolElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGSymbolElement]* interface corresponds to the [<symbol>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGTextContentElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGTextContentElement]* interface is implemented by elements that support rendering child text content. It is inherited by various text-related interfaces, such as [SVGTextElement], [SVGTSpanElement], [SVGTRefElement], [SVGAltGlyphElement] and [SVGTextPathElement].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "textLength": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] reflecting the [textLength] attribute of the given element.",
        "event": false
      },
      "lengthAdjust": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] reflecting the [lengthAdjust] attribute of the given element. The numeric type values represent one of the constant values above.",
        "event": false
      }
    }
  },
  {
    "name": "SVGTextElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGTextElement]* interface corresponds to the [<text>] elements.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGTextPathElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGTextPathElement]* interface corresponds to the [<textPath>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "startOffset": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the X component of the [startOffset] attribute of the given element.",
        "event": false
      },
      "method": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [method] attribute of the given element. It takes one of the [TEXTPATH_METHODTYPE_*] constants defined on this interface.",
        "event": false
      },
      "spacing": {
        "type": "SVGAnimatedEnumeration",
        "array": false,
        "dartType": "SVGAnimatedEnumeration",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedEnumeration] corresponding to the [spacing] attribute of the given element. It takes one of the [TEXTPATH_SPACINGTYPE_*] constants defined on this interface.",
        "event": false
      }
    }
  },
  {
    "name": "SVGTextPositioningElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGTextPositioningElement]* interface is implemented by elements that support attributes that position individual text glyphs. It is inherited by [SVGTextElement], [SVGTSpanElement], [SVGTRefElement] and [SVGAltGlyphElement].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "x": {
        "type": "SVGAnimatedLengthList",
        "array": false,
        "dartType": "SVGAnimatedLengthList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLengthList] reflecting the [x] attribute of the given element.",
        "event": false
      },
      "y": {
        "type": "SVGAnimatedLengthList",
        "array": false,
        "dartType": "SVGAnimatedLengthList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLengthList] reflecting the [y] attribute of the given element.",
        "event": false
      },
      "dx": {
        "type": "SVGAnimatedLengthList",
        "array": false,
        "dartType": "SVGAnimatedLengthList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLengthList] reflecting the [dx] attribute of the given element.",
        "event": false
      },
      "dy": {
        "type": "SVGAnimatedLengthList",
        "array": false,
        "dartType": "SVGAnimatedLengthList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedLengthList] reflecting the [dy] attribute of the given element.",
        "event": false
      },
      "rotate": {
        "type": "SVGAnimatedNumberList",
        "array": false,
        "dartType": "SVGAnimatedNumberList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [SVGAnimatedNumberList] reflecting the [rotate] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGTitleElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGTitleElement]* interface corresponds to the [<title>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGTransform",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGTransformList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGTSpanElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGTSpanElement]* interface represents a [<tspan>] element.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGUnitTypes",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGUnitTypes]* interface defines a commonly used set of constants used for reflecting [gradientUnits], [patternContentUnits] and other similar attributes.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGUseElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "",
    "abstract": true,
    "category": "interface",
    "props": {
      "x": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [x] attribute of the given element.",
        "event": false
      },
      "y": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [y] attribute of the given element.",
        "event": false
      },
      "width": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [width] attribute of the given element.",
        "event": false
      },
      "height": {
        "type": "SVGAnimatedLength",
        "array": false,
        "dartType": "SVGAnimatedLength",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [SVGAnimatedLength] corresponding to the [height] attribute of the given element.",
        "event": false
      }
    }
  },
  {
    "name": "SVGViewElement",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[SVGViewElement]* interface provides access to the properties of [<view>] elements, as well as methods to manipulate them.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGVKernElement",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[SVGVKernElement]* interface corresponds to the [<vkern>] elements.\n\nObject-oriented access to the attributes of the [<vkern>] element via the SVG DOM is not possible.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SVGZoomAndPan",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[SVGZoomAndPan]* interface is used to reflect the [zoomAndPan] attribute, and is mixed in to other interfaces for elements that support this attribute.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "SyncEvent",
    "experimental": false,
    "deprecated": false,
    "standard": false,
    "inheritance": [],
    "desc": " \n        Non-standard\n        This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n      \n\nThe [*SyncEvent*] interface represents a sync action that is dispatched on the [ServiceWorkerGlobalScope] of a ServiceWorker.\n\nThis interface inherits from the [ExtendableEvent] interface.\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "tag": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the developer-defined identifier for this [SyncEvent].",
        "event": false
      },
      "lastChance": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns [true] if the user agent will not make further synchronization attempts after the current attempt.",
        "event": false
      }
    }
  },
  {
    "name": "SyncManager",
    "experimental": false,
    "deprecated": false,
    "standard": false,
    "inheritance": [],
    "desc": "\n\nThe *[SyncManager]* interface of the ServiceWorker API provides an interface for registering and listing sync registrations.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "TaskAttributionTiming",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[TaskAttributionTiming]* interface of the Long Tasks API returns information about the work involved in a long task and its associate frame context. The frame context, also called the container, is the iframe, embed or object that is being implicated, on the whole, for a long task.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "containerType": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the type of frame container, one of [iframe], [embed], or [object].",
        "event": false
      },
      "containerSrc": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the container's [src] attribute.",
        "event": false
      },
      "containerId": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the container's [id] attribute.",
        "event": false
      },
      "containerName": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the container's [name] attribute.",
        "event": false
      }
    }
  },
  {
    "name": "Text",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Text]* interface represents the textual content of [Element] or [Attr]. \n\nIf an element has no markup within its content, it has a single child implementing [Text] that contains the element's text. However, if the element contains markup, it is parsed into information items and [Text] nodes that form its children.\n\nNew documents have a single [Text] node for each block of text. Over time, more [Text] nodes may be created as the document's content changes. The [Node.normalize()] method merges adjacent [Text] objects back into a single node for each block of text.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "isElementContentWhitespace": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Returns a [Boolean] flag indicating whether or not the text node contains only whitespace.\n ",
        "event": false
      },
      "wholeText": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] containing the text of all [Text] nodes logically adjacent to this [Node], concatenated in document order.",
        "event": false
      }
    }
  },
  {
    "name": "TextDecoder",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*TextDecoder*] interface represents a decoder for a specific text encoding, such as [UTF-8], [ISO-8859-2], [KOI8-R], [GBK], etc. A decoder takes a stream of bytes as input and emits a stream of code points.\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "encoding": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] containing the name of the decoder, that is a string describing the method the [TextDecoder] will use.",
        "event": false
      },
      "fatal": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Boolean] indicating whether the error mode is fatal.",
        "event": false
      },
      "ignoreBOM": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Boolean] indicating whether the byte order marker is ignored.",
        "event": false
      }
    }
  },
  {
    "name": "TextDecoderStream",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[TextDecoderStream]* interface of the Encoding API converts a stream of strings into bytes in the UTF-8 encoding. It is the streaming equivalent of [TextDecoder].",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "TextEncoder",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n[*TextEncoder*] takes a stream of code points as input and emits a stream of UTF-8 bytes.\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "encoding": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Always returns \"[utf-8]\".",
        "event": false
      }
    }
  },
  {
    "name": "TextEncoderStream",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[TextEncoderStream]* interface of the Encoding API converts a stream of strings into bytes in the UTF-8 encoding. It is the streaming equivalent of [TextEncoder].",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "TextMetrics",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[TextMetrics]* interface represents the dimensions of a piece of text in the canvas; a [TextMetrics] instance can be retrieved using the [CanvasRenderingContext2D.measureText()] method.",
    "abstract": true,
    "category": "interface",
    "props": {
      "width": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [double] giving the calculated width of a segment of inline text in CSS pixels. It takes into account the current font of the context.",
        "event": false
      },
      "actualBoundingBoxLeft": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [double] giving the distance from the alignment point given by the [CanvasRenderingContext2D.textAlign] property to the left side of the bounding rectangle of the given text, in CSS pixels. The distance is measured parallel to the baseline.",
        "event": false
      },
      "actualBoundingBoxRight": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [double] giving the distance from the alignment point given by the [CanvasRenderingContext2D.textAlign] property to the right side of the bounding rectangle of the given text, in CSS pixels. The distance is measured parallel to the baseline.",
        "event": false
      },
      "fontBoundingBoxAscent": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [double] giving the distance from the horizontal line indicated by the [CanvasRenderingContext2D.textBaseline] attribute to the top of the highest bounding rectangle of all the fonts used to render the text, in CSS pixels.",
        "event": false
      },
      "fontBoundingBoxDescent": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [double] giving the distance from the horizontal line indicated by the [CanvasRenderingContext2D.textBaseline] attribute to the bottom of the bounding rectangle of all the fonts used to render the text, in CSS pixels.",
        "event": false
      },
      "actualBoundingBoxAscent": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [double] giving the distance from the horizontal line indicated by the [CanvasRenderingContext2D.textBaseline] attribute to the top of the bounding rectangle used to render the text, in CSS pixels.",
        "event": false
      },
      "actualBoundingBoxDescent": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [double] giving the distance from the horizontal line indicated by the [CanvasRenderingContext2D.textBaseline] attribute to the bottom of the bounding rectangle used to render the text, in CSS pixels.",
        "event": false
      },
      "emHeightAscent": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [double] giving the distance from the horizontal line indicated by the [CanvasRenderingContext2D.textBaseline] property to the top of the em square in the line box, in CSS pixels.",
        "event": false
      },
      "emHeightDescent": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [double] giving the distance from the horizontal line indicated by the [CanvasRenderingContext2D.textBaseline] property to the bottom of the em square in the line box, in CSS pixels.",
        "event": false
      },
      "hangingBaseline": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [double] giving the distance from the horizontal line indicated by the [CanvasRenderingContext2D.textBaseline] property to the hanging baseline of the line box, in CSS pixels.",
        "event": false
      },
      "alphabeticBaseline": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [double] giving the distance from the horizontal line indicated by the [CanvasRenderingContext2D.textBaseline] property to the alphabetic baseline of the line box, in CSS pixels.",
        "event": false
      },
      "ideographicBaseline": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [double] giving the distance from the horizontal line indicated by the [CanvasRenderingContext2D.textBaseline] property to the ideographic baseline of the line box, in CSS pixels.",
        "event": false
      }
    }
  },
  {
    "name": "TextTrack",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\nThe [TextTrack] interface—part of the API for handling WebVTT (text tracks on media presentations)—describes and controls the text track associated with a particular [<track>] element.\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "activeCues": {
        "type": "TextTrackCueList",
        "array": false,
        "dartType": "TextTrackCueList",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [TextTrackCueList] object listing the currently active set of text track cues. Track cues are active if the current playback position of the media is between the cues' start and end times. Thus, for displayed cues such as captions or subtitles, the active cues are currently being displayed.",
        "event": false
      },
      "cues": {
        "type": "TextTrackCueList",
        "array": false,
        "dartType": "TextTrackCueList",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [TextTrackCueList] which contains all of the track's cues.",
        "event": false
      },
      "id": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] which identifies the track, if it has one. If it doesn't have an ID, then this value is an empty string ([\"\"]). If the [TextTrack] is associated with a [<track>] element, then the track's ID matches the element's ID.",
        "event": false
      },
      "inBandMetadataTrackDispatchType": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] which indicates the track's in-band metadata track dispatch type. *needs details*",
        "event": false
      },
      "kind": {
        "type": "TextTrackKind",
        "array": false,
        "dartType": "TextTrackKind",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] indicating what kind of text track the [TextTrack] describes. The value must be one of those in the TextTrackKind enum.",
        "event": false
      },
      "label": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A human-readable [DOMString] which contains the text track's label, if one is present; otherwise, this is an empty string ([\"\"]), in which case a custom label may need to be generated by your code using other attributes of the track, if the track's label needs to be exposed to the user.",
        "event": false
      },
      "language": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] which specifies the text language in which the text track's contents is written. The value must adhere to the format specified in the Tags for Identifying Languages (BCP 47) document from the IETF, just like the HTML [lang] attribute. For example, this can be [\"en-US\"] for United States English or [\"pt-BR\"] for Brazilian Portuguese.",
        "event": false
      },
      "mode": {
        "type": "TextTrackMode",
        "array": false,
        "dartType": "TextTrackMode",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] specifying the track's current mode. Changing this property's value changes the track's current mode to match. Permitted values are listed under Text track mode constants. The default is [disabled], unless the [<track>] element's [default] Boolean attribute is specified, in which case the default mode is [started].",
        "event": false
      }
    }
  },
  {
    "name": "TextTrackCue",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n[*TextTrackCue*] is an abstract class which is used as the basis for the various derived cue types, such as [VTTCue]; you will instead work with those derived types. These cues represent a string of text that is presented for some duration of time during the performance of a [TextTrack]. The cue includes the start time (the time at which the text will be displayed) and the end time (the time at which it will be removed from the display), as well as other information.",
    "abstract": true,
    "category": "interface",
    "props": {
      "track": {
        "type": "TextTrack",
        "array": false,
        "dartType": "TextTrack",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [TextTrack] that this cue belongs to, or [null] if it doesn't belong to any.",
        "event": false
      },
      "id": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] that identifies the cue.",
        "event": false
      },
      "startTime": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [double] that represents the video time that the cue will start being displayed, in seconds.",
        "event": false
      },
      "endTime": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [double] that represents the video time that the cue will stop being displayed, in seconds.",
        "event": false
      },
      "pauseOnExit": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [boolean] for whether the video will pause when this cue stops being displayed.",
        "event": false
      },
      "onenter": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The event handler for the [enter] event.",
        "event": false
      },
      "onexit": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The event handler for the [exit] event.",
        "event": false
      }
    }
  },
  {
    "name": "TextTrackCueList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[TextTrackCueList]* array-like object represents a dynamically updating list of [TextTrackCue] objects.\n\nThis interface has no constructor. Retrieve an instance of this object with [TextTrack.cues] which returns all of the cues in a [TextTrack] object.",
    "abstract": true,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [unsigned long] that is the number of cues in the list.",
        "event": false
      }
    }
  },
  {
    "name": "TextTrackList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[TextTrackList]* interface is used to represent a list of the text tracks defined by the [<track>] element, with each track represented by a separate [textTrack] object in the list.\n\nRetrieve an instance of this object with [HTMLMediaElement.textTracks]. The individual tracks can be accessed using array syntax or functions such as [forEach()] for example.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "TimeEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[TimeEvent]* interface, a part of SVG SMIL animation, provides specific contextual information associated with Time events.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "detail": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [long] that specifies some detail information about the Event, depending on the type of the event. For this event type, indicates the repeat number for the animation.",
        "event": false
      },
      "view": {
        "type": "AbstractView",
        "array": false,
        "dartType": "AbstractView",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [WindowProxy] that identifies the Window from which the event was generated.",
        "event": false
      }
    }
  },
  {
    "name": "TimeRanges",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nWhen loading a media resource for use by an [<audio>] or [<video>] element, the *[TimeRanges]* interface is used for representing the time ranges of the media resource that have been buffered, the time ranges that have been played, and the time ranges that are seekable.\n\nA [TimeRanges] object includes one or more ranges of time, each specified by a starting time offset and an ending time offset. You reference each time range by using the [start()] and [end()] methods, passing the index number of the time range you want to retrieve.",
    "abstract": true,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [unsigned long] representing the number of time ranges represented by the time range object.",
        "event": false
      }
    }
  },
  {
    "name": "Touch",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Touch]* interface represents a single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.\n\nThe [Touch.radiusX], [Touch.radiusY], and [Touch.rotationAngle] describe the area of contact between the user and the screen, the touch area. This can be helpful when dealing with imprecise pointing devices such as fingers. These values are set to describe an ellipse that as closely as possible matches the entire area of contact (such as the user's fingertip). \n    \n\n\n\n*Note:* Many of the properties' values are hardware-dependent; for example, if the device doesn't have a way to detect the amount of pressure placed on the surface, the [force] value will always be 0. This may also be the case for [radiusX] and [radiusY]; if the hardware reports only a single point, these values will be 1.\n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "TouchEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[TouchEvent]* interface represents an [UIEvent] which is sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth.\n\nTouches are represented by the [Touch] object; each touch is described by a position, size and shape, amount of pressure, and target element. Lists of touches are represented by [TouchList] objects.\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "altKey": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A Boolean value indicating whether or not the alt key was down when the touch event was fired.",
        "event": false
      },
      "changedTouches": {
        "type": "TouchList",
        "array": false,
        "dartType": "TouchList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [TouchList] of all the [Touch] objects representing individual points of contact whose states changed between the previous touch event and this one.",
        "event": false
      },
      "ctrlKey": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A Boolean value indicating whether or not the control key was down when the touch event was fired.",
        "event": false
      },
      "metaKey": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A Boolean value indicating whether or not the meta key was down when the touch event was fired.",
        "event": false
      },
      "shiftKey": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A Boolean value indicating whether or not the shift key was down when the touch event was fired.",
        "event": false
      },
      "targetTouches": {
        "type": "TouchList",
        "array": false,
        "dartType": "TouchList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [TouchList] of all the [Touch] objects that are both currently in contact with the touch surface *and* were also started on the same element that is the target of the event.",
        "event": false
      },
      "touches": {
        "type": "TouchList",
        "array": false,
        "dartType": "TouchList",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [TouchList] of all the [Touch] objects representing all current points of contact with the surface, regardless of target or changed status.",
        "event": false
      }
    }
  },
  {
    "name": "TouchList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[TouchList]* interface represents a list of contact points on a touch surface. For example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding [TouchList] object would have one [Touch] object for each finger, for a total of three entries.",
    "abstract": true,
    "category": "interface",
    "props": {
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The number of [Touch] objects in the [TouchList].",
        "event": false
      }
    }
  },
  {
    "name": "TrackEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[TrackEvent]* interface, which is part of the HTML DOM specification, is used for events which represent changes to a set of available tracks on an HTML media element; these events are [addtrack] and [removetrack]. It's important not to confuse [TrackEvent] with the [RTCTrackEvent] interface, which is used for tracks which are part of an [RTCPeerConnection].\n\nEvents based on [TrackEvent] are always sent to one of the media track list types:\n\n\n Events involving video tracks are always sent to the [VideoTrackList] found in [HTMLMediaElement.videoTracks]\n Events involving audio tracks are always sent to the [AudioTrackList] specified in [HTMLMediaElement.audioTracks]\n Events affecting text tracks are sent to the [TextTrackList] object indicated by [HTMLMediaElement.textTracks].\n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "TransformStream",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [TransformStream] interface of the Streams API represents a set of transformable data.",
    "abstract": false,
    "category": "interface",
    "props": {
      "readable": {
        "type": "ReadableStream",
        "array": false,
        "dartType": "ReadableStream",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [readable] end of a TransformStream.",
        "event": false
      },
      "writable": {
        "type": "WritableStream",
        "array": false,
        "dartType": "WritableStream",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [writable] end of a TransformStream.",
        "event": false
      }
    }
  },
  {
    "name": "TransitionEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": " \n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe [*TransitionEvent*] interface represents events providing information related to transitions.",
    "abstract": false,
    "category": "interface",
    "props": {
      "propertyName": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString] containing the name CSS property associated with the transition.",
        "event": false
      },
      "elapsedTime": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [float] giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the [transition-delay] property.",
        "event": false
      },
      "pseudoElement": {
        "type": "CSSOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [DOMString], starting with [::], containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string: [''].",
        "event": false
      }
    }
  },
  {
    "name": "TreeWalker",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[TreeWalker]* object represents the nodes of a document subtree and a position within them.\n\nA [TreeWalker] can be created using the [Document.createTreeWalker()] method.",
    "abstract": true,
    "category": "interface",
    "props": {
      "root": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Node] representing the root node as specified when the [TreeWalker] was created.",
        "event": false
      },
      "whatToShow": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [unsigned long] being a bitmask made of constants describing the types of [Node] that must be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:\n \n  \n   \n    Constant\n    Numerical value\n    Description\n   \n  \n  \n   \n    [NodeFilter.SHOW_ALL]\n    [-1] (that is the max value of [unsigned long])\n    Shows all nodes.\n   \n   \n    [NodeFilter.SHOW_ATTRIBUTE] \n    \n\n    [2]\n    Shows attribute [Attr] nodes. This is meaningful only when creating a [TreeWalker] with an [Attr] node as its root. In this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.\n   \n   \n    [NodeFilter.SHOW_CDATA_SECTION] \n    \n\n    [8]\n    Shows [CDATASection] nodes.\n   \n   \n    [NodeFilter.SHOW_COMMENT]\n    [128]\n    Shows [Comment] nodes.\n   \n   \n    [NodeFilter.SHOW_DOCUMENT]\n    [256]\n    Shows [Document] nodes.\n   \n   \n    [NodeFilter.SHOW_DOCUMENT_FRAGMENT]\n    [1024]\n    Shows [DocumentFragment] nodes.\n   \n   \n    [NodeFilter.SHOW_DOCUMENT_TYPE]\n    [512]\n    Shows [DocumentType] nodes.\n   \n   \n    [NodeFilter.SHOW_ELEMENT]\n    [1]\n    Shows [Element] nodes.\n   \n   \n    [NodeFilter.SHOW_ENTITY] \n    \n\n    [32]\n    Shows [Entity] nodes. This is meaningful only when creating a [TreeWalker] with an [Entity] node as its root; in this case, it means that the [Entity] node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.\n   \n   \n    [NodeFilter.SHOW_ENTITY_REFERENCE] \n    \n\n    [16]\n    Shows [EntityReference] nodes.\n   \n   \n    [NodeFilter.SHOW_NOTATION] \n    \n\n    [2048]\n    Shows [Notation] nodes. This is meaningful only when creating a [TreeWalker] with a [Notation] node as its root; in this case, it means that the [Notation] node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.\n   \n   \n    [NodeFilter.SHOW_PROCESSING_INSTRUCTION]\n    [64]\n    Shows [ProcessingInstruction] nodes.\n   \n   \n    [NodeFilter.SHOW_TEXT]\n    [4]\n    Shows [Text] nodes.\n   \n  \n \n ",
        "event": false
      },
      "filter": {
        "type": "NodeFilter",
        "array": false,
        "dartType": "NodeFilter",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [NodeFilter] used to select the relevant nodes.",
        "event": false
      },
      "currentNode": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is the [Node] on which the [TreeWalker] is currently pointing at.",
        "event": false
      }
    }
  },
  {
    "name": "TrustedHTML",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[TrustedHTML]* interface of the [Trusted Types API] represents a string that a developer can insert into an injection sink that will render it as HTML. These objects are created via [TrustedTypePolicy.createHTML()] and therefore have no constructor.\n\nThe value of a *TrustedHTML* object is set when the object is created and cannot be changed by JavaScript as there is no setter exposed.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "TrustedScript",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[TrustedScript]* interface of the [Trusted Types API] represents a string with an uncompiled script body that a developer can insert into an injection sink that might execute the script. These objects are created via [TrustedTypePolicy.createScript()] and therefore have no constructor.\n\nThe value of a *TrustedScript* object is set when the object is created and cannot be changed by JavaScript as there is no setter exposed.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "TrustedScriptURL",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[TrustedScriptURL]* interface of the [Trusted Types API] represents a string that a developer can insert into an injection sink that will parse it as a URL of an external script. These objects are created via [TrustedTypePolicy.createScriptURL()] and therefore have no constructor.\n\nThe value of a *TrustedScriptURL* object is set when the object is created and cannot be changed by JavaScript as there is no setter exposed.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "TrustedTypePolicy",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[TrustedTypePolicy]* interface of the [Trusted Types API] defines a group of functions which create [TrustedType] objects.\n\nA [TrustedTypePolicy] object is created by [TrustedTypePolicyFactory.createPolicy()] to define a policy for enforcing security rules on input. Therefore, [TrustedTypePolicy] has no constructor.",
    "abstract": true,
    "category": "interface",
    "props": {
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] containing the name of the policy.",
        "event": false
      }
    }
  },
  {
    "name": "TrustedTypePolicyFactory",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[TrustedTypePolicyFactory]* interface of the [Trusted Types API] creates policies and allows the verification of Trusted Type objects against created policies.",
    "abstract": true,
    "category": "interface",
    "props": {
      "emptyHTML": {
        "type": "TrustedHTML",
        "array": false,
        "dartType": "TrustedHTML",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [TrustedHTML] object containing an empty string.",
        "event": false
      },
      "emptyScript": {
        "type": "TrustedScript",
        "array": false,
        "dartType": "TrustedScript",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [TrustedScript] object containing an empty string.",
        "event": false
      },
      "defaultPolicy": {
        "type": "TrustedTypePolicy",
        "array": false,
        "dartType": "TrustedTypePolicy",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the default [TrustedTypePolicy] or null if this is empty.",
        "event": false
      }
    }
  },
  {
    "name": "TypeInfo",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe obsolete [TypeInfo] interface was intended to be used to describe a DOM data type by keying its name to a namespace within the document's schema.",
    "abstract": true,
    "category": "interface",
    "props": {
      "typeName": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] indicating the type's name.",
        "event": false
      },
      "typeNamespace": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] indicating the type's namespace within the schema.",
        "event": false
      }
    }
  },
  {
    "name": "UIEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[UIEvent]* interface represents simple user interface events.\n\n[UIEvent] derives from [Event]. Although the [UIEvent.initUIEvent()] method is kept for backward compatibility, you should create a [UIEvent] object using the [UIEvent()] constructor.\n\nSeveral interfaces are direct or indirect descendants of this one: [MouseEvent], [TouchEvent], [FocusEvent], [KeyboardEvent], [WheelEvent], [InputEvent], and [CompositionEvent].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "detail": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [long] with details about the event, depending on the event type.",
        "event": false
      },
      "sourceCapabilities": {
        "type": "InputDeviceCapabilities",
        "array": false,
        "dartType": "InputDeviceCapabilities",
        "nullable": true,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an instance of the [InputDeviceCapabilities] interface, which provides information about the physical device responsible for generating a touch event.",
        "event": false
      },
      "view": {
        "type": "Window",
        "array": false,
        "dartType": "Window",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [WindowProxy] that contains the view that generated the event.",
        "event": false
      },
      "which": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": false,
        "desc": "Returns the numeric [keyCode] of the key pressed, or the character code ([charCode]) for an alphanumeric key pressed.",
        "event": false
      }
    }
  },
  {
    "name": "ULongRange",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ULongRange]* dictionary is used to define a range of permitted integer values for a property, with either or both a maximum and minimum value specified. The [ConstrainULongRange] dictionary is based on this, augmenting it to support exact and ideal values as well.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "URL",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[URL]* interface is used to parse, construct, normalize, and encode URLs. It works by providing properties which allow you to easily read and modify the components of a URL. You normally create a new [URL] object by specifying the URL as a string when calling its constructor, or by providing a relative URL and a base URL. You can then easily read the parsed components of the URL or make changes to the URL.\n\nIf a browser doesn't yet support the [URL()] constructor, you can access a URL object using the [Window] interface's [URL] property. Be sure to check to see if any of your target browsers require this to be prefixed.\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "URLSearchParams",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[URLSearchParams]* interface defines utility methods to work with the query string of a URL.\n\nAn object implementing [URLSearchParams] can directly be used in a [for...of] structure, for example the following two lines are equivalent:\n\n[for (const [key, value] of mySearchParams) {}\nfor (const [key, value] of mySearchParams.entries()) {}]\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "USB",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\nSecure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[USB]* interface of the WebUSB API provides attributes and methods for finding and connecting USB devices from a web page.",
    "abstract": true,
    "category": "interface",
    "props": {
      "onconnect": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An event handler called whenever a previously paired device is connected.",
        "event": false
      },
      "ondisconnect": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An event handler called whenever a paired device is disconnected.",
        "event": false
      }
    }
  },
  {
    "name": "USBConfiguration",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [USBConfiguration] interface of the WebUSB API provides information about a particular configuration of a USB device and the interfaces that it supports.",
    "abstract": false,
    "category": "interface",
    "props": {
      "configurationValue": {
        "type": "octet",
        "array": false,
        "dartType": "octet",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the configuration value of this configuration. This is equal to the [bConfigurationValue] field of the configuration descriptor provided by the device defining this configuration.",
        "event": false
      },
      "configurationName": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the name provided by the device to describe this configuration. This is equal to the value of the string descriptor with the index provided in the [iConfiguration] field of the configuration descriptor defining this configuration.",
        "event": false
      },
      "interfaces": {
        "type": "FrozenArray<USBInterface>",
        "array": false,
        "dartType": "FrozenArray<USBInterface>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an array containing instances of the [USBInterface] describing each interface supported by this configuration.",
        "event": false
      }
    }
  },
  {
    "name": "USBConnectionEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[USBConnectionEvent]* interface of the WebUSB API is the event type passed to [USB.onconnect] and [USB.ondisconnect] when the user agent detects that a new USB device has been connected or disconnected.",
    "abstract": false,
    "category": "interface",
    "props": {
      "device": {
        "type": "USBDevice",
        "array": false,
        "dartType": "USBDevice",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [USBDevice] object representing the current device.",
        "event": false
      }
    }
  },
  {
    "name": "USBDevice",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[USBDevice]* interface of the WebUSB API provides access to metadata about a paired USB device and methods for controlling it.",
    "abstract": true,
    "category": "interface",
    "props": {
      "configuration": {
        "type": "USBConfiguration",
        "array": false,
        "dartType": "USBConfiguration",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [USBConfiguration] object for the currently selected interface for a paired USB device.",
        "event": false
      },
      "configurations": {
        "type": "FrozenArray<USBConfiguration>",
        "array": false,
        "dartType": "FrozenArray<USBConfiguration>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [array] of device-specific interfaces for controlling a paired USB device.",
        "event": false
      },
      "deviceClass": {
        "type": "octet",
        "array": false,
        "dartType": "octet",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are [USBDevice.deviceSubclass] and [USBDevice.deviceProtocol].",
        "event": false
      },
      "deviceProtocol": {
        "type": "octet",
        "array": false,
        "dartType": "octet",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are [USBDevice.deviceClass] and [USBDevice.deviceSubclass].",
        "event": false
      },
      "deviceSubclass": {
        "type": "octet",
        "array": false,
        "dartType": "octet",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are [USBDevice.deviceClass] and [USBDevice.deviceProtocol].",
        "event": false
      },
      "deviceVersionMajor": {
        "type": "octet",
        "array": false,
        "dartType": "octet",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The major version number of the device in a semantic versioning scheme.",
        "event": false
      },
      "deviceVersionMinor": {
        "type": "octet",
        "array": false,
        "dartType": "octet",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The minor version number of the device in a semantic versioning scheme.",
        "event": false
      },
      "deviceVersionSubminor": {
        "type": "octet",
        "array": false,
        "dartType": "octet",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The patch version number of the device in a semantic versioning scheme.",
        "event": false
      },
      "manufacturerName": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The of the organization that manufactured the USB device.",
        "event": false
      },
      "opened": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates whether a session has been started with a paired USB device.",
        "event": false
      },
      "productId": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The manufacturer-defined code that identifies a USB device.",
        "event": false
      },
      "productName": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The manufacturer-defined name that identifies a USB device.",
        "event": false
      },
      "serialNumber": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The manufacturer-defined serial number for the specific USB device.",
        "event": false
      },
      "usbVersionMajor": {
        "type": "octet",
        "array": false,
        "dartType": "octet",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "One of three properties that declare the USB protocol version supported by the device. The other two properties are [USBDevice.usbVersionMinor] and [USBDevice.usbVersionSubminor].",
        "event": false
      },
      "usbVersionMinor": {
        "type": "octet",
        "array": false,
        "dartType": "octet",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "One of three properties that declare the USB protocol version supported by the device. The other two properties are [USBDevice.usbVersionMajor] and [USBDevice.usbVersionSubminor].",
        "event": false
      },
      "usbVersionSubminor": {
        "type": "octet",
        "array": false,
        "dartType": "octet",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "One of three properties that declare the USB protocol version supported by the device. The other two properties are [USBDevice.usbVersionMajor] and [USBDevice.usbVersionMinor].",
        "event": false
      },
      "vendorId": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The official usg.org-assigned vendor ID.",
        "event": false
      }
    }
  },
  {
    "name": "USBEndpoint",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\nThe [USBEndpoint] interface of the WebUSB API provides information about an endpoint provided by the USB device. An endpoint represents a unidirectional data stream into or out of a device.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "UserDataHandler",
    "experimental": false,
    "deprecated": true,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\n\n  *Note:*This method was removed from Firefox 26 and onward.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "ValidityState",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[ValidityState]* interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "VideoConfiguration",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[VideoConfiguration]* dictionary of the Media Capabilities API is used to define the video file being tested when calling the [MediaCapabilities] methods [encodingInfo()] and [decodingInfo()] to determine whether or not the described video configuration is supported, and how smoothly and how smoooth and power-efficient it can be handled.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "VideoTrack",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [VideoTrack] interface represents a single video track from a [<video>] element. The most common use for accessing a [VideoTrack] object is to toggle its [selected] property in order to make it the active video track for its [<video>] element.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "VideoTrackList",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[VideoTrackList]* interface is used to represent a list of the video tracks contained within a [<video>] element, with each track represented by a separate [VideoTrack] object in the list.\n\nRetrieve an instance of this object with [HTMLMediaElement.videoTracks]. The individual tracks can be accessed using array syntax or functions such as [forEach()] for example.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "VisualViewport",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[VisualViewport]* interface of the Visual Viewport API represents the visual viewport for a given window. For a page containing iframes, each iframe, as well as the containing page, will have a unique window object. Each window on a page will have a unique [VisualViewport] representing the properties associated with that window.\n\nYou can get a window's visual viewport using [Window.visualViewport].\n\n\n*Note*: Only the top-level window has a visual viewport that's distinct from the layout viewport. Therefore, it's generally only the [VisualViewport] object of the top-level window that's useful. For an [<iframe>], visual viewport metrics like [VisualViewport.width] always correspond to layout viewport metrics like [document.documentElement.clientWidth].\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "offsetLeft": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the offset of the left edge of the visual viewport from the left edge of the layout viewport in CSS pixels.",
        "event": false
      },
      "offsetTop": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the offset of the top edge of the visual viewport from the top edge of the layout viewport in CSS pixels.",
        "event": false
      },
      "pageLeft": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the x coordinate of the visual viewport relative to the initial containing block origin of the top edge in CSS pixels.",
        "event": false
      },
      "pageTop": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the y coordinate of the visual viewport relative to the initial containing block origin of the top edge in CSS pixels.",
        "event": false
      },
      "width": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the width of the visual viewport in CSS pixels.",
        "event": false
      },
      "height": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the height of the visual viewport in CSS pixels.",
        "event": false
      },
      "scale": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the pinch-zoom scaling factor applied to the visual viewport.",
        "event": false
      }
    }
  },
  {
    "name": "VRDisplay",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[VRDisplay]* interface of the WebVR API represents any VR device supported by this API. It includes generic information such as device IDs and descriptions, as well as methods for starting to present a VR scene, retrieving eye parameters and display capabilities, and other important functionality.\n\nAn array of all connected VR Devices can be returned by invoking the [Navigator.getVRDisplays()] method.",
    "abstract": true,
    "category": "interface",
    "props": {
      "capabilities": {
        "type": "VRDisplayCapabilities",
        "array": false,
        "dartType": "VRDisplayCapabilities",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Returns a [VRDisplayCapabilities] object that indicates the various capabilities of the [VRDisplay].",
        "event": false
      },
      "depthFar": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Gets and sets the z-depth defining the far plane of the eye view frustum, i.e. the furthest viewable boundary of the scene.",
        "event": false
      },
      "depthNear": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Gets and sets the z-depth defining the near plane of the eye view frustum, i.e. the nearest viewable boundary of the scene.",
        "event": false
      },
      "displayId": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Returns an identifier for this particular VRDisplay, which is also used as an association point in the Gamepad API (see [Gamepad.displayId]).",
        "event": false
      },
      "displayName": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Returns a human-readable name to identify the [VRDisplay].",
        "event": false
      },
      "isConnected": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Returns a [Boolean] indicating whether the [VRDisplay] is connected to the computer.",
        "event": false
      },
      "isPresenting": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Returns a [Boolean] indicating whether the [VRDisplay] is currently having content presented through it.",
        "event": false
      },
      "stageParameters": {
        "type": "VRStageParameters",
        "array": false,
        "dartType": "VRStageParameters",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Returns a [VRStageParameters] object containing room-scale parameters, if the [VRDisplay] is capable of supporting room-scale experiences.",
        "event": false
      }
    }
  },
  {
    "name": "VRDisplayCapabilities",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[VRDisplayCapabilities]* interface of the WebVR API describes the capabilities of a [VRDisplay] — its features can be used to perform VR device capability tests, for example can it return position information.\n\nThis interface is accessible through the [VRDisplay.capabilities] property.",
    "abstract": true,
    "category": "interface",
    "props": {
      "canPresent": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] stating whether the VR display is capable of presenting content (e.g. through an HMD).",
        "event": false
      },
      "hasExternalDisplay": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] stating whether the VR display is separate from the device's primary display.",
        "event": false
      },
      "hasOrientation": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Returns a [Boolean] stating whether the VR display can track and return orientation information.",
        "event": false
      },
      "hasPosition": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Boolean] stating whether the VR display can track and return position information.",
        "event": false
      },
      "maxLayers": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a number indicating the maximum number of [VRLayerInit]s that the VR display can present at once (e.g. the maximum length of the array that [VRDisplay.requestPresent()] can accept.)",
        "event": false
      }
    }
  },
  {
    "name": "VRDisplayEvent",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[VRDisplayEvent]* interface of the WebVR API represents the event object of WebVR-related events (see the list of WebVR window extensions).",
    "abstract": false,
    "category": "interface",
    "props": {
      "display": {
        "type": "VRDisplay",
        "array": false,
        "dartType": "VRDisplay",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [VRDisplay] associated with this event.",
        "event": false
      },
      "reason": {
        "type": "VRDisplayEventReason",
        "array": false,
        "dartType": "VRDisplayEventReason",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A human-readable reason why the event was fired.",
        "event": false
      }
    }
  },
  {
    "name": "VREyeParameters",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[VREyeParameters]* interface of the WebVR API represents all the information required to correctly render a scene for a given eye, including field of view information.\n\nThis interface is accessible through the [VRDisplay.getEyeParameters()] method.\n\n\nThe values in this interface should not be used to compute view or projection matrices. In order to ensure the widest possible hardware compatibility use the matrices provided by [VRFrameData].\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "offset": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Represents the offset from the center point between the user's eyes to the center of the eye, measured in meters.",
        "event": false
      },
      "fieldOfView": {
        "type": "VRFieldOfView",
        "array": false,
        "dartType": "VRFieldOfView",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Describes the current field of view for the eye, which can vary as the user adjusts their interpupillary distance (IPD).",
        "event": false
      },
      "renderWidth": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Describes the recommended render target width of each eye viewport, in pixels.",
        "event": false
      },
      "renderHeight": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Describes the recommended render target height of each eye viewport, in pixels.",
        "event": false
      }
    }
  },
  {
    "name": "VRFieldOfView",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[VRFieldOfView]* interface of the WebVR API represents a field of view defined by 4 different degree values describing the view from a center point.",
    "abstract": true,
    "category": "interface",
    "props": {
      "upDegrees": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "The number of degrees upwards that the field of view extends in.",
        "event": false
      },
      "rightDegrees": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "The number of degrees to the right that the field of view extends in.",
        "event": false
      },
      "downDegrees": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "The number of degrees downwards that the field of view extends in.",
        "event": false
      },
      "leftDegrees": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "The number of degrees to the left that the field of view extends in.",
        "event": false
      }
    }
  },
  {
    "name": "VRFrameData",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[VRFrameData]* interface of the WebVR API represents all the information needed to render a single frame of a VR scene; constructed by [VRDisplay.getFrameData()].",
    "abstract": false,
    "category": "interface",
    "props": {
      "leftProjectionMatrix": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Float32Array] representing a 4x4 matrix that describes the projection to be used for the left eye’s rendering.",
        "event": false
      },
      "leftViewMatrix": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Float32Array] representing a 4x4 matrix that describes the view transform to be used for the left eye’s rendering.",
        "event": false
      },
      "pose": {
        "type": "VRPose",
        "array": false,
        "dartType": "VRPose",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The [VRPose] of the [VRDisplay] at the current [VRFrameData.timestamp].",
        "event": false
      },
      "rightProjectionMatrix": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Float32Array] representing a 4x4 matrix that describes the projection to be used for the right eye’s rendering.",
        "event": false
      },
      "rightViewMatrix": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Float32Array] representing a 4x4 matrix that describes the view transform to be used for the right eye’s rendering.",
        "event": false
      },
      "timestamp": {
        "type": "DOMHighResTimeStamp",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A constantly increasing timestamp value representing the time a frame update occurred.",
        "event": false
      }
    }
  },
  {
    "name": "VRLayerInit",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[VRLayerInit]* interface (dictionary) of the WebVR API represents a content layer (an [HTMLCanvasElement] or [OffscreenCanvas]) that you want to present in a VR display.\n\nYou can retrieve [VRLayerInit] objects using [VRDisplay.getLayers()], and present them using the [VRDisplay.requestPresent()] method.",
    "abstract": true,
    "category": "interface",
    "props": {
      "leftBounds": {
        "type": "float",
        "array": true,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Defines the left texture bounds of the canvas whose contents will be presented by the [VRDisplay].",
        "event": false,
        "default": "[ ]"
      },
      "rightBounds": {
        "type": "float",
        "array": true,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Defines the right texture bounds of the canvas whose contents will be presented by the [VRDisplay].",
        "event": false,
        "default": "[ ]"
      },
      "source": {
        "type": "VRSource",
        "array": false,
        "dartType": "VRSource",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Defines the canvas whose contents will be presented by the [VRDisplay] when [VRDisplay.submitFrame()] is called.",
        "event": false,
        "default": "null"
      }
    }
  },
  {
    "name": "VRPose",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[VRPose]* interface of the WebVR API represents the state of a VR sensor at a given timestamp (which includes orientation, position, velocity, and acceleration information.)\n\nThis interface is accessible through the [VRDisplay.getPose()] and [VRDisplay.getFrameData()] methods. [VRDisplay.getPose()] is deprecated.",
    "abstract": true,
    "category": "interface",
    "props": {
      "position": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the position of the [VRDisplay] at the current [VRPose.timestamp] as a 3D vector",
        "event": false
      },
      "linearVelocity": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the linear velocity of the [VRDisplay] at the current [VRPose.timestamp], in meters per second.",
        "event": false
      },
      "linearAcceleration": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the linear acceleration of the [VRDisplay] at the current [VRPose.timestamp], in meters per second per second.",
        "event": false
      },
      "orientation": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the orientation of the sensor at the current [VRPose.timestamp], as a quarternion value.",
        "event": false
      },
      "angularVelocity": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the angular velocity of the [VRDisplay] at the current [VRPose.timestamp], in radians per second.",
        "event": false
      },
      "angularAcceleration": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the angular acceleration of the [VRDisplay] at the current [VRPose.timestamp], in meters per second per second.",
        "event": false
      }
    }
  },
  {
    "name": "VRStageParameters",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n            Deprecated\n            This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n        \n\nThe *[VRStageParameters]* interface of the WebVR API represents the values describing the stage area for devices that support room-scale experiences.\n\nThis interface is accessible through the [VRDisplay.stageParameters] property.",
    "abstract": true,
    "category": "interface",
    "props": {
      "sittingToStandingTransform": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains a matrix that transforms the sitting-space view matrices of [VRFrameData] to standing-space.",
        "event": false
      },
      "sizeX": {
        "type": "float",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the width of the play-area bounds in meters.",
        "event": false
      }
    }
  },
  {
    "name": "VTTCue",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n The [VTTCue] interface—part of the API for handling WebVTT (text tracks on media presentations)—describes and controls the text track associated with a particular [<track>] element.",
    "abstract": false,
    "category": "interface",
    "props": {
      "region": {
        "type": "VTTRegion",
        "array": false,
        "dartType": "VTTRegion",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [VTTRegion] object describing the video's sub-region that the cue will be drawn onto, or [null] if none is assigned.",
        "event": false
      },
      "vertical": {
        "type": "DirectionSetting",
        "array": false,
        "dartType": "DirectionSetting",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an enum representing the cue writing direction.",
        "event": false
      },
      "snapToLines": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns true if the [VTTCue.line] attribute is an integer number of lines or a percentage of the video size.",
        "event": false
      },
      "line": {
        "type": "LineAndPositionSetting",
        "array": false,
        "dartType": "LineAndPositionSetting",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the line positioning of the cue. This can be the string [auto] or a number whose interpretation depends on the value of [VTTCue.snapToLines].",
        "event": false
      },
      "lineAlign": {
        "type": "LineAlignSetting",
        "array": false,
        "dartType": "LineAlignSetting",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an enum representing the alignment of the [VTTCue.line].",
        "event": false
      },
      "position": {
        "type": "LineAndPositionSetting",
        "array": false,
        "dartType": "LineAndPositionSetting",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the indentation of the cue within the line. This can be the string [auto] or a number representing the percentage of the [VTTCue.region], or the video size if [VTTCue.region] is [null].",
        "event": false
      },
      "positionAlign": {
        "type": "PositionAlignSetting",
        "array": false,
        "dartType": "PositionAlignSetting",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an enum representing the alignment of the cue. This is used to determine what the [VTTCue.position] is anchored to. The default is [auto].",
        "event": false
      },
      "size": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [double] representing the size of the cue, as a percentage of the video size.",
        "event": false
      },
      "text": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [DOMString] with the contents of the cue.",
        "event": false
      }
    }
  },
  {
    "name": "VTTRegion",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [VTTRegion] interface—part of the API for handling WebVTT (text tracks on media presentations)—describes a portion of the video to render a [VTTCue] onto.",
    "abstract": false,
    "category": "interface",
    "props": {
      "id": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMString] that identifies the region.",
        "event": false
      },
      "width": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [double] representing the width of the region, as a percentage of the video.",
        "event": false
      },
      "lines": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [double] representing the height of the region, in number of lines.",
        "event": false
      },
      "regionAnchorX": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [double] representing the region anchor X offset, as a percentage of the region.",
        "event": false
      },
      "regionAnchorY": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [double] representing the region anchor Y offset, as a percentage of the region.",
        "event": false
      },
      "viewportAnchorX": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [double] representing the viewport anchor X offset, as a percentage of the video.",
        "event": false
      },
      "viewportAnchorY": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [double] representing the viewport anchor Y offset, as a percentage of the video.",
        "event": false
      },
      "scroll": {
        "type": "ScrollSetting",
        "array": false,
        "dartType": "ScrollSetting",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An enum representing how adding new cues will move existing cues.",
        "event": false
      }
    }
  },
  {
    "name": "WaveShaperNode",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[WaveShaperNode]* interface represents a non-linear distorter. It is an [AudioNode] that uses a curve to apply a wave shaping distortion to the signal. Beside obvious distortion effects, it is often used to add a warm feeling to the signal.\n\nA [WaveShaperNode] always has exactly one input and one output.\n\n\n \n  \n   Number of inputs\n   [1]\n  \n  \n   Number of outputs\n   [1]\n  \n  \n   Channel count mode\n   [\"max\"]\n  \n  \n   Channel count\n   [2] (not used in the default count mode)\n  \n  \n   Channel interpretation\n   [\"speakers\"]\n  \n \n",
    "abstract": false,
    "category": "interface",
    "props": {
      "curve": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": true,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is a [Float32Array] of numbers describing the distortion to apply.",
        "event": false
      },
      "oversample": {
        "type": "OverSampleType",
        "array": false,
        "dartType": "OverSampleType",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an enumerated value indicating if oversampling must be used. Oversampling is a technique for creating more samples (up-sampling) before applying the distortion effect to the audio signal.",
        "event": false
      }
    }
  },
  {
    "name": "WEBGL_color_buffer_float",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*WEBGL_color_buffer_float*] extension is part of the WebGL API and adds the ability to render to 32-bit floating-point color buffers.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is available to WebGL 1 contexts only. For WebGL 2, use the [EXT_color_buffer_float] extension.\n\nThe [OES_texture_float] extension implicitly enables this extension.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WEBGL_compressed_texture_astc",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*WEBGL_compressed_texture_astc*] extension is part of the WebGL API and exposes Adaptive Scalable Texture Compression (ASTC) compressed texture formats to WebGL.\n\nFor more information, see the article Using ASTC Texture Compression for Game Assets by nvidia.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* ASTC compression is typically available on Mali ARM GPUs, Intel GPUs, and Nividia Tegra chips.\n\nThis extension is available to both, WebGL1 and WebGL2 contexts.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WEBGL_compressed_texture_etc",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*WEBGL_compressed_texture_etc*] extension is part of the WebGL API and exposes 10 ETC/EAC compressed texture formats.\n\nCompressed textures reduce the amount of memory needed to store a texture on the GPU, allowing for higher resolution textures or more of the same resolution textures.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is available to both, WebGL1 and WebGL2 contexts.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WEBGL_compressed_texture_etc1",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*WEBGL_compressed_texture_etc1*] extension is part of the WebGL API and exposes the ETC1 compressed texture format.\n\nCompressed textures reduce the amount of memory needed to store a texture on the GPU, allowing for higher resolution textures or more of the same resolution textures.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is available to both, WebGL1 and WebGL2 contexts.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WEBGL_compressed_texture_pvrtc",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*WEBGL_compressed_texture_pvrtc*] extension is part of the WebGL API and exposes four PVRTC compressed texture formats.\n\nCompressed textures reduce the amount of memory needed to store a texture on the GPU, allowing for higher resolution textures or more of the same resolution textures.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* PVRTC is typically only available on mobile devices with PowerVR chipsets. It is used in all generations of the iPhone, iPod Touch and iPad and supported on certain Android devices that use a PowerVR GPU.\n\nThis extension is available to both, WebGL1 and WebGL2 contexts.\n\n*Note*: On iOS devices, this extension is named [WEBKIT_WEBGL_compressed_texture_pvrtc].\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WEBGL_compressed_texture_s3tc_srgb",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*WEBGL_compressed_texture_s3tc_srgb*] extension is part of the WebGL API and exposes four S3TC compressed texture formats for the sRGB colorspace.\n\nCompressed textures reduce the amount of memory needed to store a texture on the GPU, allowing for higher resolution textures or more of the same resolution textures.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is available to both WebGL1 and WebGL2 contexts.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WEBGL_compressed_texture_s3tc",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*WEBGL_compressed_texture_s3tc*] extension is part of the WebGL API and exposes four S3TC compressed texture formats.\n\nCompressed textures reduce the amount of memory needed to store a texture on the GPU, allowing for higher resolution textures or more of the same resolution textures.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is available to both, WebGL1 and WebGL2 contexts.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WEBGL_debug_renderer_info",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*WEBGL_debug_renderer_info*] extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.\n\nDepending on the privacy settings of the browser, this extension might only be available to privileged contexts. Generally, the graphics driver information should only be used in edge cases to optimize your WebGL content or to debug GPU problems. The [WebGLRenderingContext.getParameter()] method can help you to detect which features are supported and the [failIfMajorPerformanceCaveat] context attribute lets you control if a context should be returned at all, if the performance would be dramatically slow.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* Depending on the privacy settings of the browser, this extension might only be available to privileged contexts or not work at all. In Firefox, if [privacy.resistFingerprinting] is set to [true], this extensions is disabled.\n\nThis extension is available to both, WebGL1 and WebGL2 contexts.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WEBGL_debug_shaders",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*WEBGL_debug_shaders*] extension is part of the WebGL API and exposes a method to debug shaders from privileged contexts.\n\nThis extension is not directly available to web sites as the way of how the shader is translated may uncover personally-identifiable information to the web page about the kind of graphics card in the user's computer.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* Depending on the privacy settings of the browser, this extension might only be available to privileged contexts.\n\nThis extension is available to both, WebGL1 and WebGL2 contexts.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WEBGL_depth_texture",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*WEBGL_depth_texture*] extension is part of the WebGL API and defines 2D depth and depth-stencil textures.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default. The constant in WebGL2 is [gl.UNSIGNED_INT_24_8].\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WEBGL_draw_buffers",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*WEBGL_draw_buffers*] extension is part of the WebGL API and enables a fragment shader to write to several textures, which is useful for deferred shading, for example.\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default. In WebGL 2, the constants are available without the \"WEBGL\" suffix and the new GLSL built-ins require GLSL [#version 300 es].\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WEBGL_lose_context",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *WEBGL_lose_context* extension is part of the WebGL API and exposes functions to simulate losing and restoring a [WebGLRenderingContext].\n\nWebGL extensions are available using the [WebGLRenderingContext.getExtension()] method. For more information, see also Using Extensions in the WebGL tutorial.\n\n\n*Availability:* This extension is available to both, WebGL1 and WebGL2 contexts.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WEBGL_multi_draw",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*WEBGL_multi_draw*] extension is part of the\nWebGL API and allows to render more\nthan one primitive with a single function call. This can improve a WebGL application's performance\nas it reduces binding costs in the renderer and speeds up GPU thread time with uniform data.\n\nWhen this extension is enabled:\n\n  New methods that handle multiple lists of arguments in one call are added\n    (see method list below).\n  The [gl_DrawID] built-in is added to the shading language.\n\n\n\n  *Availability:* This extension is available to both,\n  WebGL 1 and\n  WebGL 2 contexts.\n  In shader code, the directive [#extension GL_ANGLE_multi_draw]\n  needs to be called to enable the extension.\n  This extension enables the [ANGLE_instanced_arrays] extension implicitly.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WebGL2RenderingContext",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *WebGL2RenderingContext* interface provides the OpenGL ES 3.0 rendering context for the drawing surface of an HTML [<canvas>] element.\n\nTo get an object of this interface, call [getContext()] on a [<canvas>] element, supplying \"webgl2\" as the argument:\n\n[var canvas = document.getElementById('myCanvas');\nvar gl = canvas.getContext('webgl2');\n]\n\n\nWebGL 2 is an extension to WebGL 1. The [WebGL2RenderingContext] interface implements all members of the [WebGLRenderingContext] interface. Some methods of the WebGL 1 context can accept additional values when used in a WebGL 2 context. You will find this info noted on the WebGL 1 reference pages.\n\n\nThe WebGL tutorial has more information, examples, and resources on how to get started with WebGL.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WebGLActiveInfo",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *WebGLActiveInfo* interface is part of the WebGL API and represents the information returned by calling the [WebGLRenderingContext.getActiveAttrib()] and [WebGLRenderingContext.getActiveUniform()] methods.",
    "abstract": true,
    "category": "interface",
    "props": {
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The read-only name of the requested variable.",
        "event": false
      },
      "size": {
        "type": "GLint",
        "array": false,
        "dartType": "GLint",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The read-only size of the requested variable.",
        "event": false
      },
      "type": {
        "type": "GLenum",
        "array": false,
        "dartType": "GLenum",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The read-only type of the requested variable.",
        "event": false
      }
    }
  },
  {
    "name": "WebGLBuffer",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *WebGLBuffer* interface is part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WebGLContextEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *WebContextEvent* interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.",
    "abstract": true,
    "category": "interface",
    "props": {
      "statusMessage": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A read-only property containing additional information about the event.",
        "event": false
      }
    }
  },
  {
    "name": "WebGLFramebuffer",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *WebGLFramebuffer* interface is part of the WebGL API and represents a collection of buffers that serve as a rendering destination.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WebGLProgram",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*WebGLProgram*] is part of the WebGL API and is a combination of two compiled [WebGLShader]s consisting of a vertex shader and a fragment shader (both written in GLSL). To create a [WebGLProgram], call the GL context's [createProgram()] function. After attaching the shader programs using [attachShader()], you link them into a usable program. This is shown in the code below.\n\n[var program = gl.createProgram();\n\n// Attach pre-existing shaders\ngl.attachShader(program, vertexShader);\ngl.attachShader(program, fragmentShader);\n\ngl.linkProgram(program);\n\nif ( !gl.getProgramParameter( program, gl.LINK_STATUS) ) {\n  var info = gl.getProgramInfoLog(program);\n  throw 'Could not compile WebGL program. \\n\\n' + info;\n}\n]\n\nSee [WebGLShader] for information on creating the [vertexShader] and [fragmentShader] in the above example.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WebGLQuery",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[WebGLQuery]* interface is part of the WebGL 2 API and provides ways to asynchronously query for information. By default, occlusion queries and primitive queries are available.\n\nAnother kind of queries are disjoint timer queries, which allow you to measure performance and profiling of your GPU. Disjoint timer queries are available with the [EXT_disjoint_timer_query] extension only.\n\nWhen working with [WebGLQuery] objects, the following methods of the [WebGL2RenderingContext] are useful:\n\n\n [WebGL2RenderingContext.createQuery()]\n [WebGL2RenderingContext.deleteQuery()]\n [WebGL2RenderingContext.isQuery()]\n [WebGL2RenderingContext.beginQuery()]\n [WebGL2RenderingContext.endQuery()]\n [WebGL2RenderingContext.getQuery()]\n [WebGL2RenderingContext.getQueryParameter()]\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WebGLRenderbuffer",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *WebGLRenderbuffer* interface is part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WebGLSampler",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[WebGLSampler]* interface is part of the WebGL 2 API and stores sampling parameters for [WebGLTexture] access inside of a shader.\n\nWhen working with [WebGLSampler] objects, the following methods of the [WebGL2RenderingContext] are useful:\n\n\n [WebGL2RenderingContext.createSampler()]\n [WebGL2RenderingContext.deleteSampler()]\n [WebGL2RenderingContext.isSampler()]\n [WebGL2RenderingContext.bindSampler()]\n [WebGL2RenderingContext.getSamplerParameter()]\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WebGLShader",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *WebGLShader* is part of the WebGL API and can either be a vertex or a fragment shader. A [WebGLProgram] requires both types of shaders.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WebGLShaderPrecisionFormat",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *WebGLShaderPrecisionFormat* interface is part of the WebGL API and represents the information returned by calling the [WebGLRenderingContext.getShaderPrecisionFormat()] method.",
    "abstract": true,
    "category": "interface",
    "props": {
      "rangeMin": {
        "type": "GLint",
        "array": false,
        "dartType": "GLint",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The base 2 log of the absolute value of the minimum value that can be represented.",
        "event": false
      },
      "rangeMax": {
        "type": "GLint",
        "array": false,
        "dartType": "GLint",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The base 2 log of the absolute value of the maximum value that can be represented.",
        "event": false
      },
      "precision": {
        "type": "GLint",
        "array": false,
        "dartType": "GLint",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The number of bits of precision that can be represented. For integer formats this value is always 0.",
        "event": false
      }
    }
  },
  {
    "name": "WebGLSync",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[WebGLSync]* interface is part of the WebGL 2 API and is used to synchronize activities between the GPU and the application.\n\nWhen working with [WebGLSync] objects, the following methods of the [WebGL2RenderingContext] are useful:\n\n\n [WebGL2RenderingContext.fenceSync()]\n [WebGL2RenderingContext.deleteSync()]\n [WebGL2RenderingContext.isSync()]\n [WebGL2RenderingContext.clientWaitSync()]\n [WebGL2RenderingContext.waitSync()]\n [WebGL2RenderingContext.getSyncParameter()]\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WebGLTexture",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *WebGLTexture* interface is part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WebGLTransformFeedback",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[WebGLTransformFeedback]* interface is part of the WebGL 2 API and enables transform feedback, which is the process of capturing primitives generated by vertex processing. It allows to preserve the post-transform rendering state of an object and resubmit this data multiple times.\n\nWhen working with [WebGLTransformFeedback] objects, the following methods of the [WebGL2RenderingContext] are useful:\n\n\n [WebGL2RenderingContext.createTransformFeedback()]\n [WebGL2RenderingContext.deleteTransformFeedback()]\n [WebGL2RenderingContext.isTransformFeedback()]\n [WebGL2RenderingContext.bindTransformFeedback()]\n [WebGL2RenderingContext.beginTransformFeedback()]\n [WebGL2RenderingContext.endTransformFeedback()]\n [WebGL2RenderingContext.pauseTransformFeedback()]\n [WebGL2RenderingContext.resumeTransformFeedback()]\n [WebGL2RenderingContext.transformFeedbackVaryings()]\n [WebGL2RenderingContext.getTransformFeedbackVarying()]\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WebGLUniformLocation",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *WebGLUniformLocation* interface is part of the WebGL API and represents the location of a uniform variable in a shader program.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WebGLVertexArrayObject",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[WebGLVertexArrayObject]* interface is part of the WebGL 2 API, represents vertex array objects (VAOs) pointing to vertex array data, and provides names for different sets of vertex data.\n\nWhen working with [WebGLVertexArrayObject] objects, the following methods are useful:\n\n\n [WebGL2RenderingContext.createVertexArray()]\n [WebGL2RenderingContext.deleteVertexArray()]\n [WebGL2RenderingContext.isVertexArray()]\n [WebGL2RenderingContext.bindVertexArray()]\n\n\n\n*WebGL 1:* The [OES_vertex_array_object] extension allows you to use vertex array objects in a WebGL 1 context.\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WebSocket",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [WebSocket] object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.\n\nTo construct a [WebSocket], use the [WebSocket()] constructor.\n\n\n  *Note:* This feature is available in Web Workers\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "binaryType": {
        "type": "BinaryType",
        "array": false,
        "dartType": "BinaryType",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The binary data type used by the connection.",
        "event": false
      },
      "bufferedAmount": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The number of bytes of queued data.",
        "event": false
      },
      "extensions": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The extensions selected by the server.",
        "event": false
      },
      "onclose": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An event listener to be called when the connection is closed.",
        "event": false
      },
      "onerror": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An event listener to be called when an error occurs.",
        "event": false
      },
      "onmessage": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An event listener to be called when a message is received from the server.",
        "event": false
      },
      "onopen": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An event listener to be called when the connection is opened.",
        "event": false
      },
      "protocol": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The sub-protocol selected by the server.",
        "event": false
      },
      "readyState": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The current state of the connection.",
        "event": false
      },
      "url": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The absolute URL of the WebSocket.",
        "event": false
      }
    }
  },
  {
    "name": "WheelEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[WheelEvent]* interface represents events that occur due to the user moving a mouse wheel or similar input device.\n\n\n*Important: This is the standard wheel event interface to use.* Old versions of browsers implemented the non-standard and non-cross-browser-compatible [MouseWheelEvent] and [MouseScrollEvent] interfaces. Use this interface and avoid the non-standard ones.\n\n\n\n*Do not confuse the [wheel] event with the [scroll] event:* The default action of a [wheel] event is implementation-defined. Thus, a [wheel] event doesn't necessarily dispatch a [scroll] event. Even when it does, that doesn't mean that the [delta*] values in the [wheel] event necessarily reflect the content's scrolling direction. Therefore, do not rely on [delta*] properties to get the content's scrolling direction. Instead, detect value changes to [scrollLeft] and [scrollTop] of the target in the [scroll] event.\n\n\n\n\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "deltaX": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [double] representing the horizontal scroll amount.",
        "event": false
      },
      "deltaY": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [double] representing the vertical scroll amount.",
        "event": false
      },
      "deltaZ": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [double] representing the scroll amount for the z-axis.",
        "event": false
      },
      "deltaMode": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [unsigned long] representing the unit of the [delta*] values' scroll amount. Permitted values are:\n \n  \n   \n    Constant\n    Value\n    Description\n   \n  \n  \n   \n    [WheelEvent.DOM_DELTA_PIXEL]\n    [0x00]\n    The [delta*] values are specified in pixels.\n   \n   \n    [WheelEvent.DOM_DELTA_LINE]\n    [0x01]\n    The [delta*] values are specified in lines.\n   \n   \n    [WheelEvent.DOM_DELTA_PAGE]\n    [0x02]\n    The [delta*] values are specified in pages.\n   \n  \n \n ",
        "event": false
      }
    }
  },
  {
    "name": "Window",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Window]* interface represents a window containing a DOM document; the [document] property points to the DOM document loaded in that window. A window for a given document can be obtained using the [document.defaultView] property.\n\nA global variable, [window], representing the window in which the script is running, is exposed to JavaScript code.\n\nThe [Window] interface is home to a variety of functions, namespaces, objects, and constructors which are not necessarily directly associated with the concept of a user interface window. However, the [Window] interface is a suitable place to include these items that need to be globally available. Many of these are documented in the JavaScript Reference and the DOM Reference.\n\nIn a tabbed browser, each tab is represented by its own [Window] object; the global [window] seen by JavaScript code running within a given tab always represents the tab in which the code is running. That said, even in a tabbed browser, some properties and methods still apply to the overall window that contains the tab, such as [resizeTo()] and [innerHeight]. Generally, anything that can't reasonably pertain to a tab pertains to the window instead.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "closed": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "This property indicates whether the current window is closed or not.",
        "event": false
      },
      "customElements": {
        "type": "CustomElementRegistry",
        "array": false,
        "dartType": "CustomElementRegistry",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the [CustomElementRegistry] object, which can be used to register new custom elements and get information about previously registered custom elements.",
        "event": false
      },
      "crypto": {
        "type": "Crypto",
        "array": false,
        "dartType": "Crypto",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the browser crypto object.",
        "event": false
      },
      "devicePixelRatio": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the ratio between physical pixels and device independent pixels in the current display.",
        "event": false
      },
      "document": {
        "type": "Document",
        "array": false,
        "dartType": "Document",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the document that the window contains.",
        "event": false
      },
      "event": {
        "type": "undefined)",
        "array": false,
        "dartType": "undefined)",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Returns the *current event*, which is the event currently being handled by the JavaScript code's context, or [undefined] if no event is currently being handled. The [Event] object passed directly to event handlers should be used instead whenever possible.",
        "event": false
      },
      "frameElement": {
        "type": "Element",
        "array": false,
        "dartType": "Element",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the element in which the window is embedded, or null if the window is not embedded.",
        "event": false
      },
      "frames": {
        "type": "WindowProxy",
        "array": false,
        "dartType": "WindowProxy",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an array of the subframes in the current window.",
        "event": false
      },
      "history": {
        "type": "History",
        "array": false,
        "dartType": "History",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the history object.",
        "event": false
      },
      "innerHeight": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets the height of the content area of the browser window including, if rendered, the horizontal scrollbar.",
        "event": false
      },
      "innerWidth": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets the width of the content area of the browser window including, if rendered, the vertical scrollbar.",
        "event": false
      },
      "isSecureContext": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates whether a context is capable of using features that require secure contexts.",
        "event": false
      },
      "length": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the number of frames in the window. See also [window.frames].",
        "event": false
      },
      "location": {
        "type": "Location",
        "array": false,
        "dartType": "Location",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets/sets the location, or current URL, of the window object.",
        "event": false
      },
      "locationbar": {
        "type": "BarProp",
        "array": false,
        "dartType": "BarProp",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the locationbar object, whose visibility can be toggled in the window.",
        "event": false
      },
      "localStorage": {
        "type": "Storage",
        "array": false,
        "dartType": "Storage",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the local storage object used to store data that may only be accessed by the origin that created it.",
        "event": false
      },
      "menubar": {
        "type": "BarProp",
        "array": false,
        "dartType": "BarProp",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the menubar object, whose visibility can be toggled in the window.",
        "event": false
      },
      "name": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets/sets the name of the window.",
        "event": false
      },
      "navigator": {
        "type": "Navigator",
        "array": false,
        "dartType": "Navigator",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the navigator object.",
        "event": false
      },
      "opener": {
        "type": "any",
        "array": false,
        "dartType": "any",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the window that opened this current window.",
        "event": false
      },
      "outerHeight": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets the height of the outside of the browser window.",
        "event": false
      },
      "outerWidth": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Gets the width of the outside of the browser window.",
        "event": false
      },
      "pageXOffset": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An alias for [window.scrollX].",
        "event": false
      },
      "pageYOffset": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An alias for [window.scrollY]",
        "event": false
      },
      "parent": {
        "type": "WindowProxy",
        "array": false,
        "dartType": "WindowProxy",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the parent of the current window or subframe.",
        "event": false
      },
      "performance": {
        "type": "Performance",
        "array": false,
        "dartType": "Performance",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Performance] object, which includes the [timing] and [navigation] attributes, each of which is an object providing performance-related data. See also Using Navigation Timing for additional information and examples.",
        "event": false
      },
      "personalbar": {
        "type": "BarProp",
        "array": false,
        "dartType": "BarProp",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the personalbar object, whose visibility can be toggled in the window.",
        "event": false
      },
      "screen": {
        "type": "Screen",
        "array": false,
        "dartType": "Screen",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the screen object associated with the window.",
        "event": false
      },
      "screenX": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Both properties return the horizontal distance from the left border of the user's browser viewport to the left side of the screen.",
        "event": false
      },
      "screenY": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Both properties return the vertical distance from the top border of the user's browser viewport to the top side of the screen.",
        "event": false
      },
      "scrollbars": {
        "type": "BarProp",
        "array": false,
        "dartType": "BarProp",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the scrollbars object, whose visibility can be toggled in the window.",
        "event": false
      },
      "scrollX": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the number of pixels that the document has already been scrolled horizontally.",
        "event": false
      },
      "scrollY": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the number of pixels that the document has already been scrolled vertically.",
        "event": false
      },
      "self": {
        "type": "WindowProxy",
        "array": false,
        "dartType": "WindowProxy",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an object reference to the window object itself.",
        "event": false
      },
      "sessionStorage": {
        "type": "Storage",
        "array": false,
        "dartType": "Storage",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the session storage object used to store data that may only be accessed by the origin that created it.",
        "event": false
      },
      "speechSynthesis": {
        "type": "SpeechSynthesis",
        "array": false,
        "dartType": "SpeechSynthesis",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [SpeechSynthesis] object, which is the entry point into using Web Speech API speech synthesis functionality.",
        "event": false
      },
      "status": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": true,
        "standard": true,
        "desc": "Gets/sets the text in the statusbar at the bottom of the browser.",
        "event": false
      },
      "statusbar": {
        "type": "BarProp",
        "array": false,
        "dartType": "BarProp",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the statusbar object, whose visibility can be toggled in the window.",
        "event": false
      },
      "toolbar": {
        "type": "BarProp",
        "array": false,
        "dartType": "BarProp",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the toolbar object, whose visibility can be toggled in the window.",
        "event": false
      },
      "top": {
        "type": "WindowProxy",
        "array": false,
        "dartType": "WindowProxy",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the topmost window in the window hierarchy. This property is read only.",
        "event": false
      },
      "visualViewport": {
        "type": "VisualViewport",
        "array": false,
        "dartType": "VisualViewport",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [VisualViewport] object which represents the visual viewport for a given window.",
        "event": false
      },
      "window": {
        "type": "WindowProxy",
        "array": false,
        "dartType": "WindowProxy",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a reference to the current window.",
        "event": false
      },
      "ondevicemotion": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Called if accelerometer detects a change (For mobile devices)",
        "event": false
      },
      "ondeviceorientation": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Called when the orientation is changed (For mobile devices)",
        "event": false
      },
      "ondeviceorientationabsolute": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": false,
        "desc": "An event handler property for any device orientation changes.",
        "event": false
      },
      "ongamepadconnected": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents an event handler that will run when a gamepad is connected (when the [gamepadconnected] event fires).",
        "event": false
      },
      "ongamepaddisconnected": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents an event handler that will run when a gamepad is disconnected (when the [gamepaddisconnected] event fires).",
        "event": false
      },
      "onvrdisplayconnect": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents an event handler that will run when a compatible VR device has been connected to the computer (when the [vrdisplayconnected] event fires).",
        "event": false
      },
      "onvrdisplaydisconnect": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents an event handler that will run when a compatible VR device has been disconnected from the computer (when the [vrdisplaydisconnected] event fires).",
        "event": false
      },
      "onvrdisplayactivate": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents an event handler that will run when a display is able to be presented to (when the [vrdisplayactivate] event fires), for example if an HMD has been moved to bring it out of standby, or woken up by being put on.",
        "event": false
      },
      "onvrdisplaydeactivate": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents an event handler that will run when a display can no longer be presented to (when the [vrdisplaydeactivate] event fires), for example if an HMD has gone into standby or sleep mode due to a period of inactivity.",
        "event": false
      },
      "onvrdisplayblur": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents an event handler that will run when presentation to a display has been paused for some reason by the browser, OS, or VR hardware (when the [vrdisplayblur] event fires) — for example, while the user is interacting with a system menu or browser, to prevent tracking or loss of experience.",
        "event": false
      },
      "onvrdisplayfocus": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Represents an event handler that will run when presentation to a display has resumed after being blurred (when the [vrdisplayfocus] event fires).",
        "event": false
      },
      "onvrdisplaypresentchange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "represents an event handler that will run when the presenting state of a VR device changes — i.e. goes from presenting to not presenting, or vice versa (when the [vrdisplaypresentchange] event fires).",
        "event": false
      }
    }
  },
  {
    "name": "WindowClient",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [WindowClient] interface of the ServiceWorker API represents the scope of a service worker client that is a document in a browsing context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources.",
    "abstract": true,
    "category": "interface",
    "props": {
      "focused": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A boolean that indicates whether the current client has focus.",
        "event": false
      },
      "visibilityState": {
        "type": "VisibilityState",
        "array": false,
        "dartType": "VisibilityState",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Indicates the visibility of the current client. This value can be one of [\"hidden\"], [\"visible\"], or [\"prerender\"].",
        "event": false
      }
    }
  },
  {
    "name": "WindowEventHandlers",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[WindowEventHandlers]* mixin describes the event handlers common to several interfaces like [Window], or [HTMLBodyElement] and [HTMLFrameSetElement]. Each of these interfaces can implement additional specific event handlers.\n\n\n*Note*: [WindowEventHandlers] is a mixin and not an interface; you can't actually create an object of type [WindowEventHandlers].\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "onafterprint": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [afterprint] event is raised.",
        "event": true
      },
      "onbeforeprint": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [beforeprint] event is raised.",
        "event": true
      },
      "onbeforeunload": {
        "type": "OnBeforeUnloadEventHandler",
        "array": false,
        "dartType": "OnBeforeUnloadEventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [beforeunload] event is raised.",
        "event": true
      },
      "onhashchange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [hashchange] event is raised.",
        "event": true
      },
      "onlanguagechange": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [languagechange] event is raised.",
        "event": true
      },
      "onmessage": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [message] event is raised.",
        "event": true
      },
      "onmessageerror": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [MessageError] event is raised.",
        "event": true
      },
      "onoffline": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [offline] event is raised.",
        "event": true
      },
      "ononline": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [online] event is raised.",
        "event": true
      },
      "onpagehide": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [pagehide] event is raised.",
        "event": true
      },
      "onpageshow": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [pageshow] event is raised.",
        "event": true
      },
      "onpopstate": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [popstate] event is raised.",
        "event": true
      },
      "onrejectionhandled": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [rejectionhandled] event is raised, indicating that a [Promise] was rejected and the rejection has been handled.",
        "event": true
      },
      "onstorage": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [storage] event is raised.",
        "event": true
      },
      "onunhandledrejection": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [unhandledrejection] event is raised, indicating that a [Promise] was rejected but the rejection was not handled.",
        "event": true
      },
      "onunload": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [unload] event is raised.",
        "event": true
      }
    }
  },
  {
    "name": "WindowOrWorkerGlobalScope",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[WindowOrWorkerGlobalScope]* mixin describes several features common to the [Window] and [WorkerGlobalScope] interfaces. Each of these interfaces can, of course, add more features in addition to the ones listed below.\n\n\n*Note*: [WindowOrWorkerGlobalScope] is a mixin and not an interface; you can't actually create an object of type [WindowOrWorkerGlobalScope].\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "Worker",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[Worker]* interface of the Web Workers API represents a background task that can be created via script, which can send messages back to its creator. Creating a worker is done by calling the [Worker(\"path/to/worker/script\")] constructor.\n\nWorkers may themselves spawn new workers, as long as those workers are hosted at the same origin as the parent page. (Note: nested workers are not yet implemented in WebKit).\n\nNot all interfaces and functions are available to scripts inside a [Worker]. Workers may use [XMLHttpRequest] for network communication, but its [responseXML] and [channel] attributes are always [null]. ([fetch] is also available, with no such restrictions.)",
    "abstract": true,
    "category": "interface",
    "props": {
      "onerror": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [EventListener] called whenever an [ErrorEvent] of type [error] event occurs.",
        "event": false
      },
      "onmessage": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "An [EventListener] called whenever a [MessageEvent] of type [message] occurs — i.e. when a message is sent to the parent document from the worker via [DedicatedWorkerGlobalScope.postMessage]. The message is stored in the event's [data] property.",
        "event": false
      },
      "onmessageerror": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Is an [event handler] representing the code to be called when the [messageerror] event is raised.",
        "event": true
      }
    }
  },
  {
    "name": "WorkerGlobalScope",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*WorkerGlobalScope*] interface of the Web Workers API is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by [Window] objects — in this case event handlers, the console or the associated [WorkerNavigator] object. Each [WorkerGlobalScope] has its own event loop.\n\nThis interface is usually specialized by each worker type: [DedicatedWorkerGlobalScope] for dedicated workers, [SharedWorkerGlobalScope] for shared workers, and [ServiceWorkerGlobalScope] for ServiceWorker. The [self] property returns the specialized scope for each context.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WorkerLocation",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[WorkerLocation]* interface defines the absolute location of the script executed by the [Worker]. Such an object is initialized for each worker and is available via the [WorkerGlobalScope.location] property obtained by calling [self.location].\n\nThis interface is only visible from inside a JavaScript script executed in the context of a Web worker.",
    "abstract": true,
    "category": "interface",
    "props": {
      "href": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [USVString] containing the serialized [URL] for the worker’s location.",
        "event": false
      },
      "protocol": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [protocol] part of the worker’s location.",
        "event": false
      },
      "host": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [host] part of the worker’s location.",
        "event": false
      },
      "hostname": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [hostname] part of the worker’s location.",
        "event": false
      },
      "origin": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the worker’s [origin].",
        "event": false
      },
      "port": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [port] part of the worker’s location.",
        "event": false
      },
      "pathname": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [pathname] part of the worker’s location.",
        "event": false
      },
      "search": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [search] part of the worker’s location.",
        "event": false
      },
      "hash": {
        "type": "USVString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the [hash] part of the worker’s location.",
        "event": false
      }
    }
  },
  {
    "name": "WorkerNavigator",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [*WorkerNavigator*] interface represents a subset of the [Navigator] interface allowed to be accessed from a [Worker]. Such an object is initialized for each worker and is available via the [WorkerGlobalScope.navigator] property obtained by calling [self.navigator].",
    "abstract": true,
    "category": "interface",
    "props": {
      "permissions": {
        "type": "Permissions",
        "array": false,
        "dartType": "Permissions",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Permissions] object that can be used to query and update permission status of APIs covered by the Permissions API.",
        "event": false
      },
      "serial": {
        "type": "Serial",
        "array": false,
        "dartType": "Serial",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Serial] object,  which represents the entry point into the [Web Serial API] to enable the control of serial ports.",
        "event": false
      }
    }
  },
  {
    "name": "Worklet",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[Worklet]* interface is a lightweight version of [Web Workers] and gives developers access to low-level parts of the rendering pipeline. With Worklets, you can run JavaScript and WebAssembly code to do graphics rendering or audio processing where high performance is required.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WritableStream",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[WritableStream]* interface of the Streams API provides a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing.",
    "abstract": false,
    "category": "interface",
    "props": {
      "locked": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A boolean indicating whether the [WritableStream] is locked to a writer. ",
        "event": false
      }
    }
  },
  {
    "name": "WritableStreamDefaultController",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nThe *[WritableStreamDefaultController]* interface of the Streams API represents a controller allowing control of a [WritableStream]'s state. When constructing a [WritableStream], the underlying sink is given a corresponding [WritableStreamDefaultController] instance to manipulate.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "WritableStreamDefaultWriter",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\n The *[WritableStreamDefaultWriter]* interface of the Streams API is the object returned by [WritableStream.getWriter()] and once created locks the writer to the [WritableStream] ensuring that no other streams can write to the underlying sink.",
    "abstract": false,
    "category": "interface",
    "props": {
      "closed": {
        "type": "Promise<undefined>",
        "array": false,
        "dartType": "Promise<undefined>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Allows you to write code that responds to an end to the streaming process. Returns a promise that fulfills if the stream becomes closed or the writer's lock is released, or rejects if the stream errors.",
        "event": false
      },
      "desiredSize": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": true,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the desired size required to fill the stream's internal queue.",
        "event": false
      },
      "ready": {
        "type": "Promise<undefined>",
        "array": false,
        "dartType": "Promise<undefined>",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [Promise] that resolves when the desired size of the stream's internal queue transitions from non-positive to positive, signaling that it is no longer applying backpressure.",
        "event": false
      }
    }
  },
  {
    "name": "XMLDocument",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *XMLDocument* interface represents an XML document. It inherits from the generic [Document] and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XMLHttpRequest",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n[XMLHttpRequest] (XHR) objects are used to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing. [XMLHttpRequest] is used heavily in AJAX programming.\n\n\n\n\n\nDespite its name, [XMLHttpRequest] can be used to retrieve any type of data, not just XML.\n\nIf your communication needs to involve receiving event data or message data from a server, consider using server-sent events through the [EventSource] interface. For full-duplex communication, WebSockets may be a better choice.\n\n\n  *Note:* This feature is available in Web Workers, except for Service Workers\n",
    "abstract": false,
    "category": "interface",
    "props": {
      "response": {
        "type": "any",
        "array": false,
        "dartType": "any",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Returns an [ArrayBuffer], [Blob], [Document], JavaScript object, or a [DOMString], depending on the value of [XMLHttpRequest.responseType], that contains the response entity body.",
        "event": false
      }
    }
  },
  {
    "name": "XMLHttpRequestEventTarget",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\n[XMLHttpRequestEventTarget] is the interface that describes the event handlers you can implement in an object that will handle events for an [XMLHttpRequest].\n\n\n\n",
    "abstract": true,
    "category": "interface",
    "props": {
      "onabort": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the function to call when a request is aborted and the [abort] event is received by this object.",
        "event": false
      },
      "onerror": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the function to call when a request encounters an error and the [error] event is received by this object.",
        "event": false
      },
      "onload": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the function to call when an HTTP request returns after successfully fetching content and the [load] event is received by this object.",
        "event": false
      },
      "onloadstart": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the function that gets called when the HTTP request first begins loading data and the [loadstart] event is received by this object.",
        "event": false
      },
      "onprogress": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the function that is called periodically with information about the progress of the request and the [progress] event is received by this object.",
        "event": false
      },
      "ontimeout": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the function that is called if the event times out and the [timeout] event is received by this object; this only happens if a timeout has been previously established by setting the value of the [XMLHttpRequest] object's [timeout] attribute.",
        "event": false
      },
      "onloadend": {
        "type": "EventHandler",
        "array": false,
        "dartType": "EventHandler",
        "nullable": false,
        "readonly": false,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Contains the function that is called when the load is completed, even if the request failed, and the [loadend] event is received by this object.",
        "event": false
      }
    }
  },
  {
    "name": "XMLSerializer",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [XMLSerializer] interface provides the [serializeToString()] method to construct an XML string representing a DOM tree.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XPathEvaluator",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [XPathEvaluator] interface allows to compile and evaluate XPath expressions.\n\nIt is implemented by the [Document] interface.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XPathExpression",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThis interface is a compiled XPath expression that can be evaluated on a document or specific node to return information from its DOM tree. This is useful when an expression will be reused in an application, because it is just compiled once and all namespace prefixes which occur within the expression are preresolved.\n\nObjects of this type are created by calling [XPathEvaluator.createExpression()].",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XPathNSResolver",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe [XPathNSResolver] interface permits prefix strings in an XPath expression to be properly bound to namespace URI strings.\n\nThe [XPathEvaluator] interface can construct an implementation of [XPathNSResolver] from a node, or the interface may be implemented by any application.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XPathResult",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[XPathResult]* interface represents the results generated by evaluating an XPath expression within the context of a given node. Since XPath expressions can result in a variety of result types, this interface makes it possible to determine and handle the type and value of the result.",
    "abstract": true,
    "category": "interface",
    "props": {
      "booleanValue": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [boolean] representing the value of the result if [resultType] is [BOOLEAN_TYPE].",
        "event": false
      },
      "invalidIteratorState": {
        "type": "boolean",
        "array": false,
        "dartType": "boolean",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "Signifies that the iterator has become invalid. It is [true] if [resultType] is [UNORDERED_NODE_ITERATOR_TYPE] or [ORDERED_NODE_ITERATOR_TYPE] and the document has been modified since this result was returned.",
        "event": false
      },
      "numberValue": {
        "type": "double",
        "array": false,
        "dartType": "double",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [number] representing the value of the result if [resultType] is [NUMBER_TYPE].",
        "event": false
      },
      "resultType": {
        "type": "short",
        "array": false,
        "dartType": "short",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [number] code representing the type of the result, as defined by the type constants.",
        "event": false
      },
      "singleNodeValue": {
        "type": "Node",
        "array": false,
        "dartType": "Node",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [Node] representing the value of the single node result, which may be [null].",
        "event": false
      },
      "snapshotLength": {
        "type": "long",
        "array": false,
        "dartType": "long",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "The number of nodes in the result snapshot.",
        "event": false
      },
      "stringValue": {
        "type": "DOMString",
        "array": false,
        "dartType": "String",
        "nullable": false,
        "readonly": true,
        "experimental": false,
        "deprecated": false,
        "standard": true,
        "desc": "A [string] representing the value of the result if [resultType] is [STRING_TYPE].",
        "event": false
      }
    }
  },
  {
    "name": "XRBoundedReferenceSpace",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe WebXR Device API's [*XRBoundedReferenceSpace*] interface describes a virtual world reference space which has preset boundaries. This extends [XRReferenceSpace], which describes an essentially unrestricted space around the viewer's position. These bounds are defined using an array of points, each of which defines a vertex in a polygon inside which the user is allowed to move.\n\nThis is typically used when the XR system is capable of tracking the user's physical movement within a limited distance of their starting position. The specified bounds may, in fact, describe the shape and size of the room the user is located in, in order to let the WebXR site or application prevent the user from colliding with the walls or other obstacles in the real world.  At a minimum, the boundaries indicate the area in which the XR device is capable of tracking the user's movement. See the article Using bounded reference spaces for details on how bounded spaces work and why they're useful.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRInputSource",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe WebXR Device API's *[XRInputSource]* interface describes a single source of control input which is part of the user's WebXR-compatible virtual or augmented reality system. The device is specific to the platform being used, but provides the direction in which it is being aimed and optionally may generate events if the user triggers performs actions using the device.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRInputSourceArray",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe interface [*XRInputSourceArray*] represents a live list of WebXR input sources, and is used as the return value of the [XRSession] property [inputSources]. Each entry is an [XRInputSource] representing one input device connected to the WebXR system.\n\nIn addition to being able to access the input sources in the list using standard array notation (that is, with index numbers insize square brackets), methods are available to allow the use of iterators and the [forEach()] method is also available.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRInputSourceEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": " Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe WebXR Device API's [*XRInputSourceEvent*] interface describes an event which has occurred on a WebXR user input device such as a hand controller, gaze tracking system, or motion tracking system. More specifically, they represent a change in the state of an [XRInputSource].\n\nTo learn more about handling inputs in a WebXR project, see the article Inputs and input sources.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRInputSourceEventInit",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [*XRInputSourceEventInit*] dictionary is used when calling the [XRInputSourceEvent()] constructor to provide configuration options for the newly-created [XRInputSourceEvent] object to take on.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRInputSourcesChangeEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": " Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe WebXR Device API interface [*XRInputSourcesChangeEvent*] is used to represent the [inputsourceschange] event sent to an [XRSession] when the set of available WebXR input controllers changes.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRInputSourcesChangeEventInit",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": " Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [*XRInputSourcesChangeEventInit*] dictionary is used to provide options to the [XRInputSourcesChangeEvent()] constructor in order to set the initial state of the new [XRInputSourcesChangeEvent] object.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRPermissionDescriptor",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nUser permissions in the WebXR Device API are managed using the Permissions API. To that end, the [*XRPermissionDescriptor*] dictionary is used to describe the WebXR features the app needs to use, as well as those features it would like ot use if permision is granted.\n\nThe [XRPermissionDescriptor]'s [name] must be set to [xr] in order to direct the Permissions API to correctly handle the request as applying to WebXR.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRReferenceSpace",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe WebXR Device API's [*XRReferenceSpace*] interface describes the coordinate system for a specific tracked entity or object within the virtual world using a specified tracking behavior. The tracking behavior is defined by the selected reference space type. It expands upon the base class, [XRSpace], by adding support for several different tracking behaviors as well as to request a new reference space which describes the offset transform between the tracked object and another location in the world.\n\nAll reference spaces—with the sole exception being bounded reference spaces—are described using the [XRReferenceSpace] type. Bounded spaces are implemented as [XRBoundedReferenceSpace] objects. These are special spaces which let you establish a perimeter within which it's \"safe\" for the viewer to move. For XR systems that allow the user to physically move around, such as those that track movement with a real-world camera, this boundary establishes the edges of the area the user is able to move around in, whether due to physical obstacles or due to limitations of the XR hardware. See the article Using bounded reference spaces to protect the viewer for more on using boundaries to keep the user from colliding with obstacles both physical and virtual.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRReferenceSpaceEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe WebXR Device API interface [*XRReferenceSpaceEvent*] represents an event sent to an [XRReferenceSpace]. Currently, the only event  that uses this type is the [reset] event.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRReferenceSpaceEventInit",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [*XRReferenceSpaceEventInit*] dictionary is used when calling the [XRReferenceSpaceEvent()] constructor to provide the values for its properties. Since the properties are read-only, this is the only opportunity available to set their values.\n\nYou will not usually need to use this, since these events are created by the WebXR infrastructure.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRRigidTransform",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe *[XRRigidTransform]* is a WebXR API interface that represents the 3D geometric transform described by a position and orientation.\n\n[XRRigidTransform] is used to specify transforms throughout the WebXR APIs, including:\n\n\n The offset and orientation relative to the parent reference space to use when creating a new reference space with [getOffsetReferenceSpace()].\n The [transform] of an [XRView].\n The [transform] of an [XRPose].\n The [XRReferenceSpaceEvent] event's [transform] property, as found in the [reset] event received by an [XRReferenceSpace].\n\n\nUsing [XRRigidTransform] in these places rather than bare arrays that provide the matrix data has an advantage. It automatically computes the inverse of the transform and even caches it making subsequent requests significantly faster.",
    "abstract": false,
    "category": "interface",
    "props": {
      "position": {
        "type": "DOMPointReadOnly",
        "array": false,
        "dartType": "DOMPointReadOnly",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMPointReadOnly] specifying a 3-dimensional point, expressed in meters, describing the translation component of the transform. The [w] property is always [1.0].",
        "event": false
      },
      "orientation": {
        "type": "DOMPointReadOnly",
        "array": false,
        "dartType": "DOMPointReadOnly",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "A [DOMPointReadOnly] which contains a unit quaternion describing the rotational component of the transform. As a unit quaternion, its length is always normalized to [1.0].",
        "event": false
      },
      "matrix": {
        "type": "Float32Array",
        "array": false,
        "dartType": "Float32Array",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns the transform matrix in the form of a 16-member [Float32Array]. See the section Matrix format for how the array is used to represent a matrix.",
        "event": false
      },
      "inverse": {
        "type": "XRRigidTransform",
        "array": false,
        "dartType": "XRRigidTransform",
        "nullable": false,
        "readonly": true,
        "experimental": true,
        "deprecated": false,
        "standard": true,
        "desc": "Returns a [XRRigidTransform] which is the inverse of this transform. That is, if applied to an object that had been previously transformed by the original transform, it will undo the transform and return the original object.",
        "event": false
      }
    }
  },
  {
    "name": "XRSessionEvent",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe WebXR Device API's [*XRSessionEvent*] interface describes an event which indicates the change of the state of an [XRSession]. These events occur, for example, when the session ends or the visibility of its context changes.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRSessionEventInit",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe [*XRSessionEventInit*] dictionary is used when calling the [XRSessionEvent()] constructor to provide the new event's initial values. You're unlikely to need to create these events yourself, however, as they're created by the XR system.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRSystem",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe WebXR Device API interface [*XRSystem*] provides methods which let you get access to an [XRSession] object representing a WebXR session. With that [XRSession] in hand, you can use it to interact with the Augmented Reality (AR) or Virtual Reality (VR) device.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRView",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe WebXR Device API's [*XRView*] interface provides information describing a single view into the XR scene for a specific frame, providing orientation and position information for the viewpoint. You can think of it as a description of a specific eye or camera and how it views the world. A 3D frame will involve two views, one for each eye, separated by an appropriate distance which approximates the distance between the viewer's eyes. This allows the two views, when projected in isolation into the appropriate eyes, to simulate a 3D world.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRViewerPose",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe WebXR Device API interface [*XRViewerPose*] represents the pose (the position and orientation) of a viewer's point of view on the scene. Each [XRViewerPose] can have multiple views to represent, for example, the slight separation between the left and right eye. This view can represent anything from the point-of-view of a user's XR headset to the viewpoint represented by a player's movement of an avatar using mouse and keyboard, presented on the screen, to a virtual camera capturing the scene for a spectator.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRViewport",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe WebXR Device API's [*XRViewport*] interface provides properties used to describe the size and position of the current viewport within the [XRWebGLLayer] being used to render the 3D scene.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRWebGLLayer",
    "experimental": true,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n\nThe *[XRWebGLLayer]* interface of the WebXR Device API provides a linkage between the WebXR device (or simulated XR device, in the case of an inline session) and a WebGL context used to render the scene for display on the device. In particular, it provides access to the WebGL framebuffer and viewport to ease access to the context.\n\nAlthough [XRWebGLLayer] is currently the only type of framebuffer layer supported by WebGL, it's entirely possible that future updates to the WebXR specification may allow for other layer types and corresponding image sources.",
    "abstract": false,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XRWebGLLayerInit",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n\nThe WebXR Device API's [*XRWebGLLayerInit*] dictionary is used to provide configuration options when creating a new [XRWebGLLayer] object with the [XRWebGLLayer()] constructor. The constructor's optional [layerInit]  parameter takes an object which must conform to this dictionary.",
    "abstract": true,
    "category": "interface",
    "props": {}
  },
  {
    "name": "XSLTProcessor",
    "experimental": false,
    "deprecated": false,
    "standard": true,
    "inheritance": [],
    "desc": "\n        Non-standard\n        This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n      \n    Experimental\n    *This is an experimental technology*Check the Browser compatibility table carefully before using this in production.\n\n\nAn *[XSLTProcessor]* applies an XSLT stylesheet transformation to an XML document to\n  produce a new XML document as output. It has methods to load the XSLT stylesheet, to\n  manipulate [<xsl:param>] parameter values, and to apply the\n  transformation to documents.",
    "abstract": true,
    "category": "interface",
    "props": {}
  }
]